{"version":3,"file":"optimizely.node.min.js","sources":["../lib/utils/fns/index.js","../lib/utils/enums/index.js","../lib/utils/attributes_validator/index.js","../lib/core/bucketer/index.js","../lib/utils/config_validator/index.js","../lib/core/project_config/index.js","../lib/core/condition_tree_evaluator/index.js","../lib/core/custom_attribute_condition_evaluator/index.js","../lib/core/audience_evaluator/index.js","../lib/utils/string_value_validator/index.js","../lib/core/decision_service/index.js","../lib/utils/event_tag_utils/index.js","../lib/core/event_builder/index.js","../lib/core/event_builder/event_helpers.js","../lib/utils/event_tags_validator/index.js","../lib/core/notification_center/index.js","../lib/utils/user_profile_service_validator/index.js","../lib/core/optimizely_config/index.js","../lib/core/project_config/project_config_manager.js","../lib/optimizely/index.js","../lib/plugins/logger/index.js","../lib/plugins/error_handler/index.js","../lib/plugins/event_dispatcher/index.node.js","../lib/utils/event_processor_config_validator/index.js","../lib/index.node.js"],"sourcesContent":["/**\n * Copyright 2017, 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { generateUUID as uuid, keyBy as keyByUtil } from '@optimizely/js-sdk-utils';\n\nvar MAX_SAFE_INTEGER_LIMIT = Math.pow(2, 53);\n\nexport var assign = function (target) {\n  if (!target) {\n    return {};\n  }\n  if (typeof Object.assign === 'function') {\n    return Object.assign.apply(Object, arguments);\n  } else {\n    var to = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var nextSource = arguments[index];\n      if (nextSource !== null && nextSource !== undefined) {\n        for (var nextKey in nextSource) {\n          // Avoid bugs when hasOwnProperty is shadowed\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  }\n};\n\nexport var currentTimestamp = function () {\n  return Math.round(new Date().getTime());\n};\n\nexport var isSafeInteger = function (number) {\n  return typeof number == 'number' && Math.abs(number) <= MAX_SAFE_INTEGER_LIMIT;\n};\n\nexport var keyBy = function (arr, key) {\n  if (!arr) return {};\n  return keyByUtil(arr, function (item) {\n    return item[key];\n  });\n};\n\nexport { uuid };\n\nexport var isNumber = function (value) {\n  return typeof value === 'number';\n};\n\nexport default {\n  assign: assign,\n  currentTimestamp: currentTimestamp,\n  isSafeInteger: isSafeInteger,\n  keyBy: keyBy,\n  uuid: uuid,\n  isNumber: isNumber,\n};\n","/****************************************************************************\n * Copyright 2016-2020, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nimport { NOTIFICATION_TYPES as notificationTypesEnum } from '@optimizely/js-sdk-utils';\n\n/**\n * Contains global enums used throughout the library\n */\nexport var LOG_LEVEL = {\n  NOTSET: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARNING: 3,\n  ERROR: 4,\n};\n\nexport var ERROR_MESSAGES = {\n  CONDITION_EVALUATOR_ERROR: '%s: Error evaluating audience condition of type %s: %s',\n  DATAFILE_AND_SDK_KEY_MISSING: '%s: You must provide at least one of sdkKey or datafile. Cannot start Optimizely',\n  EXPERIMENT_KEY_NOT_IN_DATAFILE: '%s: Experiment key %s is not in datafile.',\n  FEATURE_NOT_IN_DATAFILE: '%s: Feature key %s is not in datafile.',\n  IMPROPERLY_FORMATTED_EXPERIMENT: '%s: Experiment key %s is improperly formatted.',\n  INVALID_ATTRIBUTES: '%s: Provided attributes are in an invalid format.',\n  INVALID_BUCKETING_ID: '%s: Unable to generate hash for bucketing ID %s: %s',\n  INVALID_DATAFILE: '%s: Datafile is invalid - property %s: %s',\n  INVALID_DATAFILE_MALFORMED: '%s: Datafile is invalid because it is malformed.',\n  INVALID_JSON: '%s: JSON object is not valid.',\n  INVALID_ERROR_HANDLER: '%s: Provided \"errorHandler\" is in an invalid format.',\n  INVALID_EVENT_DISPATCHER: '%s: Provided \"eventDispatcher\" is in an invalid format.',\n  INVALID_EVENT_TAGS: '%s: Provided event tags are in an invalid format.',\n  INVALID_EXPERIMENT_KEY: '%s: Experiment key %s is not in datafile. It is either invalid, paused, or archived.',\n  INVALID_EXPERIMENT_ID: '%s: Experiment ID %s is not in datafile.',\n  INVALID_GROUP_ID: '%s: Group ID %s is not in datafile.',\n  INVALID_LOGGER: '%s: Provided \"logger\" is in an invalid format.',\n  INVALID_ROLLOUT_ID: '%s: Invalid rollout ID %s attached to feature %s',\n  INVALID_USER_ID: '%s: Provided user ID is in an invalid format.',\n  INVALID_USER_PROFILE_SERVICE: '%s: Provided user profile service instance is in an invalid format: %s.',\n  NO_DATAFILE_SPECIFIED: '%s: No datafile specified. Cannot start optimizely.',\n  NO_JSON_PROVIDED: '%s: No JSON object to validate against schema.',\n  NO_VARIATION_FOR_EXPERIMENT_KEY: '%s: No variation key %s defined in datafile for experiment %s.',\n  UNDEFINED_ATTRIBUTE: '%s: Provided attribute: %s has an undefined value.',\n  UNRECOGNIZED_ATTRIBUTE: '%s: Unrecognized attribute %s provided. Pruning before sending event to Optimizely.',\n  UNABLE_TO_CAST_VALUE: '%s: Unable to cast value %s to type %s, returning null.',\n  USER_NOT_IN_FORCED_VARIATION: '%s: User %s is not in the forced variation map. Cannot remove their forced variation.',\n  USER_PROFILE_LOOKUP_ERROR: '%s: Error while looking up user profile for user ID \"%s\": %s.',\n  USER_PROFILE_SAVE_ERROR: '%s: Error while saving user profile for user ID \"%s\": %s.',\n  VARIABLE_KEY_NOT_IN_DATAFILE: '%s: Variable with key \"%s\" associated with feature with key \"%s\" is not in datafile.',\n  VARIATION_ID_NOT_IN_DATAFILE: '%s: No variation ID %s defined in datafile for experiment %s.',\n  VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT: '%s: Variation ID %s is not in the datafile.',\n  INVALID_INPUT_FORMAT: '%s: Provided %s is in an invalid format.',\n  INVALID_DATAFILE_VERSION: '%s: This version of the JavaScript SDK does not support the given datafile version: %s',\n  INVALID_VARIATION_KEY: '%s: Provided variation key is in an invalid format.',\n};\n\nexport var LOG_MESSAGES = {\n  ACTIVATE_USER: '%s: Activating user %s in experiment %s.',\n  DISPATCH_CONVERSION_EVENT: '%s: Dispatching conversion event to URL %s with params %s.',\n  DISPATCH_IMPRESSION_EVENT: '%s: Dispatching impression event to URL %s with params %s.',\n  DEPRECATED_EVENT_VALUE: '%s: Event value is deprecated in %s call.',\n  EVENT_KEY_NOT_FOUND: '%s: Event key %s is not in datafile.',\n  EXPERIMENT_NOT_RUNNING: '%s: Experiment %s is not running.',\n  FEATURE_ENABLED_FOR_USER: '%s: Feature %s is enabled for user %s.',\n  FEATURE_NOT_ENABLED_FOR_USER: '%s: Feature %s is not enabled for user %s.',\n  FEATURE_HAS_NO_EXPERIMENTS: '%s: Feature %s is not attached to any experiments.',\n  FAILED_TO_PARSE_VALUE: '%s: Failed to parse event value \"%s\" from event tags.',\n  FAILED_TO_PARSE_REVENUE: '%s: Failed to parse revenue value \"%s\" from event tags.',\n  FORCED_BUCKETING_FAILED: '%s: Variation key %s is not in datafile. Not activating user %s.',\n  INVALID_OBJECT: '%s: Optimizely object is not valid. Failing %s.',\n  INVALID_CLIENT_ENGINE: '%s: Invalid client engine passed: %s. Defaulting to node-sdk.',\n  INVALID_VARIATION_ID: '%s: Bucketed into an invalid variation ID. Returning null.',\n  NOTIFICATION_LISTENER_EXCEPTION: '%s: Notification listener for (%s) threw exception: %s',\n  NO_ROLLOUT_EXISTS: '%s: There is no rollout of feature %s.',\n  NOT_ACTIVATING_USER: '%s: Not activating user %s for experiment %s.',\n  NOT_TRACKING_USER: '%s: Not tracking user %s.',\n  PARSED_REVENUE_VALUE: '%s: Parsed revenue value \"%s\" from event tags.',\n  PARSED_NUMERIC_VALUE: '%s: Parsed event value \"%s\" from event tags.',\n  RETURNING_STORED_VARIATION:\n    '%s: Returning previously activated variation \"%s\" of experiment \"%s\" for user \"%s\" from user profile.',\n  ROLLOUT_HAS_NO_EXPERIMENTS: '%s: Rollout of feature %s has no experiments',\n  SAVED_VARIATION: '%s: Saved variation \"%s\" of experiment \"%s\" for user \"%s\".',\n  SAVED_VARIATION_NOT_FOUND:\n    '%s: User %s was previously bucketed into variation with ID %s for experiment %s, but no matching variation was found.',\n  SHOULD_NOT_DISPATCH_ACTIVATE: '%s: Experiment %s is not in \"Running\" state. Not activating user.',\n  SKIPPING_JSON_VALIDATION: '%s: Skipping JSON schema validation.',\n  TRACK_EVENT: '%s: Tracking event %s for user %s.',\n  USER_ASSIGNED_TO_EXPERIMENT_BUCKET: '%s: Assigned bucket %s to user with bucketing ID %s.',\n  USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is in experiment %s of group %s.',\n  USER_BUCKETED_INTO_TARGETING_RULE: '%s: User %s bucketed into targeting rule %s.',\n  USER_IN_FEATURE_EXPERIMENT: '%s: User %s is in variation %s of experiment %s on the feature %s.',\n  USER_IN_ROLLOUT: '%s: User %s is in rollout of feature %s.',\n  USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE: '%s: User %s bucketed into everyone targeting rule.',\n  USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE:\n    '%s: User %s not bucketed into everyone targeting rule due to traffic allocation.',\n  USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is not in experiment %s of group %s.',\n  USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP: '%s: User %s is not in any experiment of group %s.',\n  USER_NOT_BUCKETED_INTO_TARGETING_RULE:\n    '%s User %s not bucketed into targeting rule %s due to traffic allocation. Trying everyone rule.',\n  USER_NOT_IN_FEATURE_EXPERIMENT: '%s: User %s is not in any experiment on the feature %s.',\n  USER_NOT_IN_ROLLOUT: '%s: User %s is not in rollout of feature %s.',\n  USER_FORCED_IN_VARIATION: '%s: User %s is forced in variation %s.',\n  USER_MAPPED_TO_FORCED_VARIATION: '%s: Set variation %s for experiment %s and user %s in the forced variation map.',\n  USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s does not meet conditions for targeting rule %s.',\n  USER_MEETS_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s meets conditions for targeting rule %s.',\n  USER_HAS_VARIATION: '%s: User %s is in variation %s of experiment %s.',\n  USER_HAS_FORCED_VARIATION: '%s: Variation %s is mapped to experiment %s and user %s in the forced variation map.',\n  USER_HAS_NO_VARIATION: '%s: User %s is in no variation of experiment %s.',\n  USER_HAS_NO_FORCED_VARIATION: '%s: User %s is not in the forced variation map.',\n  USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT: '%s: No experiment %s mapped to user %s in the forced variation map.',\n  USER_NOT_IN_ANY_EXPERIMENT: '%s: User %s is not in any experiment of group %s.',\n  USER_NOT_IN_EXPERIMENT: '%s: User %s does not meet conditions to be in experiment %s.',\n  USER_RECEIVED_DEFAULT_VARIABLE_VALUE:\n    '%s: User \"%s\" is not in any variation or rollout rule. Returning default value for variable \"%s\" of feature flag \"%s\".',\n  FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE:\n    '%s: Feature \"%s\" is not enabled for user %s. Returning the default variable value \"%s\".',\n  VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE:\n    '%s: Variable \"%s\" is not used in variation \"%s\". Returning default value.',\n  USER_RECEIVED_VARIABLE_VALUE: '%s: Got variable value \"%s\" for variable \"%s\" of feature flag \"%s\"',\n  VALID_DATAFILE: '%s: Datafile is valid.',\n  VALID_USER_PROFILE_SERVICE: '%s: Valid user profile service provided.',\n  VARIATION_REMOVED_FOR_USER: '%s: Variation mapped to experiment %s has been removed for user %s.',\n  VARIABLE_REQUESTED_WITH_WRONG_TYPE:\n    '%s: Requested variable type \"%s\", but variable is of type \"%s\". Use correct API to retrieve value. Returning None.',\n  VALID_BUCKETING_ID: '%s: BucketingId is valid: \"%s\"',\n  BUCKETING_ID_NOT_STRING: '%s: BucketingID attribute is not a string. Defaulted to userId',\n  EVALUATING_AUDIENCE: '%s: Starting to evaluate audience \"%s\" with conditions: %s.',\n  EVALUATING_AUDIENCES_COMBINED: '%s: Evaluating audiences for %s \"%s\": %s.',\n  AUDIENCE_EVALUATION_RESULT: '%s: Audience \"%s\" evaluated to %s.',\n  AUDIENCE_EVALUATION_RESULT_COMBINED: '%s: Audiences for %s %s collectively evaluated to %s.',\n  MISSING_ATTRIBUTE_VALUE:\n    '%s: Audience condition %s evaluated to UNKNOWN because no value was passed for user attribute \"%s\".',\n  UNEXPECTED_CONDITION_VALUE:\n    '%s: Audience condition %s evaluated to UNKNOWN because the condition value is not supported.',\n  UNEXPECTED_TYPE:\n    '%s: Audience condition %s evaluated to UNKNOWN because a value of type \"%s\" was passed for user attribute \"%s\".',\n  UNEXPECTED_TYPE_NULL:\n    '%s: Audience condition %s evaluated to UNKNOWN because a null value was passed for user attribute \"%s\".',\n  UNKNOWN_CONDITION_TYPE:\n    '%s: Audience condition %s has an unknown condition type. You may need to upgrade to a newer release of the Optimizely SDK.',\n  UNKNOWN_MATCH_TYPE:\n    '%s: Audience condition %s uses an unknown match type. You may need to upgrade to a newer release of the Optimizely SDK.',\n  UPDATED_OPTIMIZELY_CONFIG: '%s: Updated Optimizely config to revision %s (project id %s)',\n  OUT_OF_BOUNDS:\n    '%s: Audience condition %s evaluated to UNKNOWN because the number value for user attribute \"%s\" is not in the range [-2^53, +2^53].',\n  UNABLE_TO_ATTACH_UNLOAD: '%s: unable to bind optimizely.close() to page unload event: \"%s\"',\n};\n\nexport var RESERVED_EVENT_KEYWORDS = {\n  REVENUE: 'revenue',\n  VALUE: 'value',\n};\n\nexport var CONTROL_ATTRIBUTES = {\n  BOT_FILTERING: '$opt_bot_filtering',\n  BUCKETING_ID: '$opt_bucketing_id',\n  STICKY_BUCKETING_KEY: '$opt_experiment_bucket_map',\n  USER_AGENT: '$opt_user_agent',\n};\n\nexport var JAVASCRIPT_CLIENT_ENGINE = 'javascript-sdk';\nexport var NODE_CLIENT_ENGINE = 'node-sdk';\nexport var REACT_CLIENT_ENGINE = 'react-sdk';\nexport var NODE_CLIENT_VERSION = '4.2.1';\n\nexport var VALID_CLIENT_ENGINES = [\n  NODE_CLIENT_ENGINE,\n  REACT_CLIENT_ENGINE,\n  JAVASCRIPT_CLIENT_ENGINE,\n];\n\nexport var NOTIFICATION_TYPES = notificationTypesEnum;\n\nexport var DECISION_NOTIFICATION_TYPES = {\n  AB_TEST: 'ab-test',\n  FEATURE: 'feature',\n  FEATURE_TEST: 'feature-test',\n  FEATURE_VARIABLE: 'feature-variable',\n  ALL_FEATURE_VARIABLES: 'all-feature-variables',\n};\n\n/*\n * Represents the source of a decision for feature management. When a feature\n * is accessed through isFeatureEnabled or getVariableValue APIs, the decision\n * source is used to decide whether to dispatch an impression event to\n * Optimizely.\n */\nexport var DECISION_SOURCES = {\n  FEATURE_TEST: 'feature-test',\n  ROLLOUT: 'rollout',\n};\n\nexport var AUDIENCE_EVALUATION_TYPES = {\n  RULE: 'rule',\n  EXPERIMENT: 'experiment',\n}\n\n/*\n * Possible types of variables attached to features\n */\nexport var FEATURE_VARIABLE_TYPES = {\n  BOOLEAN: 'boolean',\n  DOUBLE: 'double',\n  INTEGER: 'integer',\n  STRING: 'string',\n  JSON: 'json',\n};\n\n/*\n * Supported datafile versions\n */\nexport var DATAFILE_VERSIONS = {\n  V2: '2',\n  V3: '3',\n  V4: '4',\n};\n\nexport default {\n  LOG_LEVEL: LOG_LEVEL,\n  ERROR_MESSAGES: ERROR_MESSAGES,\n  LOG_MESSAGES: LOG_MESSAGES,\n  RESERVED_EVENT_KEYWORDS: RESERVED_EVENT_KEYWORDS,\n  CONTROL_ATTRIBUTES: CONTROL_ATTRIBUTES,\n  JAVASCRIPT_CLIENT_ENGINE: JAVASCRIPT_CLIENT_ENGINE,\n  NODE_CLIENT_ENGINE: NODE_CLIENT_ENGINE,\n  REACT_CLIENT_ENGINE: REACT_CLIENT_ENGINE,\n  NODE_CLIENT_VERSION: NODE_CLIENT_VERSION,\n  VALID_CLIENT_ENGINES: VALID_CLIENT_ENGINES,\n  NOTIFICATION_TYPES: NOTIFICATION_TYPES,\n  DECISION_NOTIFICATION_TYPES: DECISION_NOTIFICATION_TYPES,\n  DECISION_SOURCES: DECISION_SOURCES,\n  FEATURE_VARIABLE_TYPES: FEATURE_VARIABLE_TYPES,\n  DATAFILE_VERSIONS: DATAFILE_VERSIONS,\n  AUDIENCE_EVALUATION_TYPES: AUDIENCE_EVALUATION_TYPES\n}\n","/**\n * Copyright 2016, 2018-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '@optimizely/js-sdk-utils';\n\nimport fns from '../../utils/fns';\nimport { ERROR_MESSAGES } from '../enums';\n\nvar MODULE_NAME = 'ATTRIBUTES_VALIDATOR';\n\n/**\n * Validates user's provided attributes\n * @param  {Object}  attributes\n * @return {boolean} True if the attributes are valid\n * @throws If the attributes are not valid\n */\nexport var validate = function(attributes) {\n  if (typeof attributes === 'object' && !Array.isArray(attributes) && attributes !== null) {\n    Object.keys(attributes).forEach(function(key) {\n      if (typeof attributes[key] === 'undefined') {\n        throw new Error(sprintf(ERROR_MESSAGES.UNDEFINED_ATTRIBUTE, MODULE_NAME, key));\n      }\n    });\n    return true;\n  } else {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_ATTRIBUTES, MODULE_NAME));\n  }\n};\n\nexport var isAttributeValid = function(attributeKey, attributeValue) {\n  return (\n    typeof attributeKey === 'string' &&\n    (typeof attributeValue === 'string' ||\n      typeof attributeValue === 'boolean' ||\n      (fns.isNumber(attributeValue) && fns.isSafeInteger(attributeValue)))\n  );\n};\n\n/**\n * Provides utility method for validating that the attributes user has provided are valid\n */\nexport default {\n  validate: validate,\n  isAttributeValid: isAttributeValid,\n};\n","/**\n * Copyright 2016, 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Bucketer API for determining the variation id from the specified parameters\n */\nimport { sprintf } from '@optimizely/js-sdk-utils';\nimport murmurhash from 'murmurhash';\n\nimport {\n  ERROR_MESSAGES,\n  LOG_LEVEL,\n  LOG_MESSAGES,\n} from '../../utils/enums';\n\nvar HASH_SEED = 1;\nvar MAX_HASH_VALUE = Math.pow(2, 32);\nvar MAX_TRAFFIC_VALUE = 10000;\nvar MODULE_NAME = 'BUCKETER';\nvar RANDOM_POLICY = 'random';\n\n/**\n * Determines ID of variation to be shown for the given input params\n * @param  {Object}         bucketerParams\n * @param  {string}         bucketerParams.experimentId\n * @param  {string}         bucketerParams.experimentKey\n * @param  {string}         bucketerParams.userId\n * @param  {Object[]}       bucketerParams.trafficAllocationConfig\n * @param  {Array}          bucketerParams.experimentKeyMap\n * @param  {Object}         bucketerParams.groupIdMap\n * @param  {Object}         bucketerParams.variationIdMap\n * @param  {string}         bucketerParams.varationIdMap[].key\n * @param  {Object}         bucketerParams.logger\n * @param  {string}         bucketerParams.bucketingId\n * @return Variation ID that user has been bucketed into, null if user is not bucketed into any experiment\n */\nexport var bucket = function(bucketerParams) {\n  // Check if user is in a random group; if so, check if user is bucketed into a specific experiment\n  var experiment = bucketerParams.experimentKeyMap[bucketerParams.experimentKey];\n  var groupId = experiment['groupId'];\n  if (groupId) {\n    var group = bucketerParams.groupIdMap[groupId];\n    if (!group) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_GROUP_ID, MODULE_NAME, groupId));\n    }\n    if (group.policy === RANDOM_POLICY) {\n      var bucketedExperimentId = this.bucketUserIntoExperiment(\n        group,\n        bucketerParams.bucketingId,\n        bucketerParams.userId,\n        bucketerParams.logger\n      );\n\n      // Return if user is not bucketed into any experiment\n      if (bucketedExperimentId === null) {\n        var notbucketedInAnyExperimentLogMessage = sprintf(\n          LOG_MESSAGES.USER_NOT_IN_ANY_EXPERIMENT,\n          MODULE_NAME,\n          bucketerParams.userId,\n          groupId\n        );\n        bucketerParams.logger.log(LOG_LEVEL.INFO, notbucketedInAnyExperimentLogMessage);\n        return null;\n      }\n\n      // Return if user is bucketed into a different experiment than the one specified\n      if (bucketedExperimentId !== bucketerParams.experimentId) {\n        var notBucketedIntoExperimentOfGroupLogMessage = sprintf(\n          LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP,\n          MODULE_NAME,\n          bucketerParams.userId,\n          bucketerParams.experimentKey,\n          groupId\n        );\n        bucketerParams.logger.log(LOG_LEVEL.INFO, notBucketedIntoExperimentOfGroupLogMessage);\n        return null;\n      }\n\n      // Continue bucketing if user is bucketed into specified experiment\n      var bucketedIntoExperimentOfGroupLogMessage = sprintf(\n        LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP,\n        MODULE_NAME,\n        bucketerParams.userId,\n        bucketerParams.experimentKey,\n        groupId\n      );\n      bucketerParams.logger.log(LOG_LEVEL.INFO, bucketedIntoExperimentOfGroupLogMessage);\n    }\n  }\n  var bucketingId = sprintf('%s%s', bucketerParams.bucketingId, bucketerParams.experimentId);\n  var bucketValue = this._generateBucketValue(bucketingId);\n\n  var bucketedUserLogMessage = sprintf(\n    LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET,\n    MODULE_NAME,\n    bucketValue,\n    bucketerParams.userId\n  );\n  bucketerParams.logger.log(LOG_LEVEL.DEBUG, bucketedUserLogMessage);\n\n  var entityId = this._findBucket(bucketValue, bucketerParams.trafficAllocationConfig);\n\n  if (!bucketerParams.variationIdMap.hasOwnProperty(entityId)) {\n    if (entityId) {\n      var invalidVariationIdLogMessage = sprintf(LOG_MESSAGES.INVALID_VARIATION_ID, MODULE_NAME);\n      bucketerParams.logger.log(LOG_LEVEL.WARNING, invalidVariationIdLogMessage);\n    }\n    return null;\n  }\n\n  return entityId;\n};\n\n/**\n * Returns bucketed experiment ID to compare against experiment user is being called into\n * @param {Object} group        Group that experiment is in\n * @param {string} bucketingId  Bucketing ID\n * @param {string} userId       ID of user to be bucketed into experiment\n * @param {Object} logger       Logger implementation\n * @return {string|null} ID of experiment if user is bucketed into experiment within the group, null otherwise\n */\nexport var bucketUserIntoExperiment = function(group, bucketingId, userId, logger) {\n  var bucketingKey = sprintf('%s%s', bucketingId, group.id);\n  var bucketValue = this._generateBucketValue(bucketingKey);\n  logger.log(\n    LOG_LEVEL.DEBUG,\n    sprintf(LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET, MODULE_NAME, bucketValue, userId)\n  );\n  var trafficAllocationConfig = group.trafficAllocation;\n  var bucketedExperimentId = this._findBucket(bucketValue, trafficAllocationConfig);\n  return bucketedExperimentId;\n};\n\n/**\n * Returns entity ID associated with bucket value\n * @param  {string}   bucketValue\n * @param  {Object[]} trafficAllocationConfig\n * @param  {number}   trafficAllocationConfig[].endOfRange\n * @param  {number}   trafficAllocationConfig[].entityId\n * @return {string|null}   Entity ID for bucketing if bucket value is within traffic allocation boundaries, null otherwise\n */\nexport var _findBucket = function(bucketValue, trafficAllocationConfig) {\n  for (var i = 0; i < trafficAllocationConfig.length; i++) {\n    if (bucketValue < trafficAllocationConfig[i].endOfRange) {\n      return trafficAllocationConfig[i].entityId;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper function to generate bucket value in half-closed interval [0, MAX_TRAFFIC_VALUE)\n * @param  {string} bucketingKey String value for bucketing\n * @return {string} the generated bucket value\n * @throws If bucketing value is not a valid string\n */\nexport var _generateBucketValue = function(bucketingKey) {\n  try {\n    // NOTE: the mmh library already does cast the hash value as an unsigned 32bit int\n    // https://github.com/perezd/node-murmurhash/blob/master/murmurhash.js#L115\n    var hashValue = murmurhash.v3(bucketingKey, HASH_SEED);\n    var ratio = hashValue / MAX_HASH_VALUE;\n    return parseInt(ratio * MAX_TRAFFIC_VALUE, 10);\n  } catch (ex) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_BUCKETING_ID, MODULE_NAME, bucketingKey, ex.message));\n  }\n};\n\nexport default {\n  bucket: bucket,\n  bucketUserIntoExperiment: bucketUserIntoExperiment,\n  _findBucket: _findBucket,\n  _generateBucketValue: _generateBucketValue,\n};\n","/**\n * Copyright 2016, 2018-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '@optimizely/js-sdk-utils';\n\nimport { \n  ERROR_MESSAGES, \n  DATAFILE_VERSIONS,\n} from '../enums';\n\nvar MODULE_NAME = 'CONFIG_VALIDATOR';\nvar SUPPORTED_VERSIONS = [DATAFILE_VERSIONS.V2, DATAFILE_VERSIONS.V3, DATAFILE_VERSIONS.V4];\n\n/**\n * Validates the given config options\n * @param  {Object} config\n * @param  {Object} config.errorHandler\n * @param  {Object} config.eventDispatcher\n * @param  {Object} config.logger\n * @return {Boolean} True if the config options are valid\n * @throws If any of the config options are not valid\n */\nexport var validate = function(config) {\n  if (config.errorHandler && typeof config.errorHandler.handleError !== 'function') {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_ERROR_HANDLER, MODULE_NAME));\n  }\n\n  if (config.eventDispatcher && typeof config.eventDispatcher.dispatchEvent !== 'function') {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_DISPATCHER, MODULE_NAME));\n  }\n\n  if (config.logger && typeof config.logger.log !== 'function') {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_LOGGER, MODULE_NAME));\n  }\n\n  return true;\n};\n\n/**\n * Validates the datafile\n * @param {string}  datafile\n * @return {Boolean} True if the datafile is valid\n * @throws If the datafile is not valid for any of the following reasons:\n - The datafile string is undefined\n - The datafile string cannot be parsed as a JSON object\n - The datafile version is not supported\n */\nexport var validateDatafile = function(datafile) {\n  if (!datafile) {\n    throw new Error(sprintf(ERROR_MESSAGES.NO_DATAFILE_SPECIFIED, MODULE_NAME));\n  }\n\n  if (typeof datafile === 'string' || datafile instanceof String) {\n    // Attempt to parse the datafile string\n    try {\n      datafile = JSON.parse(datafile);\n    } catch (ex) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_MALFORMED, MODULE_NAME));\n    }\n  }\n\n  if (SUPPORTED_VERSIONS.indexOf(datafile.version) === -1) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_VERSION, MODULE_NAME, datafile.version));\n  }\n\n  return true;\n};\n\n/**\n * Provides utility methods for validating that the configuration options are valid\n */\nexport default {\n  validate: validate,\n  validateDatafile: validateDatafile,\n};\n","/**\n * Copyright 2016-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf, objectValues } from '@optimizely/js-sdk-utils';\n\nimport fns from '../../utils/fns';\nimport {\n  ERROR_MESSAGES,\n  LOG_MESSAGES,\n  LOG_LEVEL,\n  FEATURE_VARIABLE_TYPES,\n} from '../../utils/enums';\nimport configValidator from '../../utils/config_validator';\n\nvar EXPERIMENT_RUNNING_STATUS = 'Running';\nvar RESERVED_ATTRIBUTE_PREFIX = '$opt_';\nvar MODULE_NAME = 'PROJECT_CONFIG';\n\nfunction createMutationSafeDatafileCopy(datafile) {\n  var datafileCopy = fns.assign({}, datafile);\n  datafileCopy.audiences = (datafile.audiences || []).map(function(audience) {\n    return fns.assign({}, audience);\n  });\n  datafileCopy.experiments = (datafile.experiments || []).map(function(experiment) {\n    return fns.assign({}, experiment);\n  });\n  datafileCopy.featureFlags = (datafile.featureFlags || []).map(function(featureFlag) {\n    return fns.assign({}, featureFlag);\n  });\n  datafileCopy.groups = (datafile.groups || []).map(function(group) {\n    var groupCopy = fns.assign({}, group);\n    groupCopy.experiments = (group.experiments || []).map(function(experiment) {\n      return fns.assign({}, experiment);\n    });\n    return groupCopy;\n  });\n  datafileCopy.rollouts = (datafile.rollouts || []).map(function(rollout) {\n    var rolloutCopy = fns.assign({}, rollout);\n    rolloutCopy.experiments = (rollout.experiments || []).map(function(experiment) {\n      return fns.assign({}, experiment);\n    });\n    return rolloutCopy;\n  });\n  return datafileCopy;\n}\n\n/**\n * Creates projectConfig object to be used for quick project property lookup\n * @param  {Object} datafile JSON datafile representing the project\n * @return {Object} Object representing project configuration\n */\nexport var createProjectConfig = function(datafile) {\n  var projectConfig = createMutationSafeDatafileCopy(datafile);\n\n  /*\n   * Conditions of audiences in projectConfig.typedAudiences are not\n   * expected to be string-encoded as they are here in projectConfig.audiences.\n   */\n  (projectConfig.audiences || []).forEach(function(audience) {\n    audience.conditions = JSON.parse(audience.conditions);\n  });\n  projectConfig.audiencesById = fns.keyBy(projectConfig.audiences, 'id');\n  fns.assign(projectConfig.audiencesById, fns.keyBy(projectConfig.typedAudiences, 'id'));\n\n  projectConfig.attributeKeyMap = fns.keyBy(projectConfig.attributes, 'key');\n  projectConfig.eventKeyMap = fns.keyBy(projectConfig.events, 'key');\n  projectConfig.groupIdMap = fns.keyBy(projectConfig.groups, 'id');\n\n  var experiments;\n  Object.keys(projectConfig.groupIdMap || {}).forEach(function(Id) {\n    experiments = projectConfig.groupIdMap[Id].experiments;\n    (experiments || []).forEach(function(experiment) {\n      projectConfig.experiments.push(fns.assign(experiment, { groupId: Id }));\n    });\n  });\n\n  projectConfig.rolloutIdMap = fns.keyBy(projectConfig.rollouts || [], 'id');\n  objectValues(projectConfig.rolloutIdMap || {}).forEach(function (rollout) {\n    (rollout.experiments || []).forEach(function(experiment) {\n      projectConfig.experiments.push(experiment);\n      // Creates { <variationKey>: <variation> } map inside of the experiment\n      experiment.variationKeyMap = fns.keyBy(experiment.variations, 'key');\n    });\n  });\n\n  projectConfig.experimentKeyMap = fns.keyBy(projectConfig.experiments, 'key');\n  projectConfig.experimentIdMap = fns.keyBy(projectConfig.experiments, 'id');\n\n  projectConfig.variationIdMap = {};\n  projectConfig.variationVariableUsageMap = {};\n  (projectConfig.experiments || []).forEach(function(experiment) {\n    // Creates { <variationKey>: <variation> } map inside of the experiment\n    experiment.variationKeyMap = fns.keyBy(experiment.variations, 'key');\n\n    // Creates { <variationId>: { key: <variationKey>, id: <variationId> } } mapping for quick lookup\n    fns.assign(projectConfig.variationIdMap, fns.keyBy(experiment.variations, 'id'));\n    objectValues(experiment.variationKeyMap || {}).forEach(function(variation) {\n      if (variation.variables) {\n        projectConfig.variationVariableUsageMap[variation.id] = fns.keyBy(variation.variables, 'id');\n      }\n    });\n  });\n\n  // Object containing experiment Ids that exist in any feature\n  // for checking that experiment is a feature experiment or not.\n  projectConfig.experimentFeatureMap = {};\n\n  projectConfig.featureKeyMap = fns.keyBy(projectConfig.featureFlags || [], 'key');\n  objectValues(projectConfig.featureKeyMap || {}).forEach(function(feature) {\n    // Json type is represented in datafile as a subtype of string for the sake of backwards compatibility.\n    // Converting it to a first-class json type while creating Project Config\n    feature.variables.forEach(function(variable) {\n      if (variable.type === FEATURE_VARIABLE_TYPES.STRING && variable.subType === FEATURE_VARIABLE_TYPES.JSON) {\n        variable.type = FEATURE_VARIABLE_TYPES.JSON;\n        delete variable.subType;\n      }\n    });\n\n    feature.variableKeyMap = fns.keyBy(feature.variables, 'key');\n    (feature.experimentIds || []).forEach(function(experimentId) {\n      // Add this experiment in experiment-feature map.\n      if (projectConfig.experimentFeatureMap[experimentId]) {\n        projectConfig.experimentFeatureMap[experimentId].push(feature.id);\n      } else {\n        projectConfig.experimentFeatureMap[experimentId] = [feature.id];\n      }\n\n      var experimentInFeature = projectConfig.experimentIdMap[experimentId];\n      // Experiments in feature can only belong to one mutex group.\n      if (experimentInFeature.groupId && !feature.groupId) {\n        feature.groupId = experimentInFeature.groupId;\n      }\n    });\n  });\n\n  return projectConfig;\n};\n\n/**\n * Get experiment ID for the provided experiment key\n * @param  {Object} projectConfig Object representing project configuration\n * @param  {string} experimentKey Experiment key for which ID is to be determined\n * @return {string} Experiment ID corresponding to the provided experiment key\n * @throws If experiment key is not in datafile\n */\nexport var getExperimentId = function(projectConfig, experimentKey) {\n  var experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n  }\n  return experiment.id;\n};\n\n/**\n * Get layer ID for the provided experiment key\n * @param  {Object} projectConfig Object representing project configuration\n * @param  {string} experimentId Experiment ID for which layer ID is to be determined\n * @return {string} Layer ID corresponding to the provided experiment key\n * @throws If experiment key is not in datafile\n */\nexport var getLayerId = function(projectConfig, experimentId) {\n  var experiment = projectConfig.experimentIdMap[experimentId];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId));\n  }\n  return experiment.layerId;\n};\n\n/**\n * Get attribute ID for the provided attribute key\n * @param  {Object}      projectConfig Object representing project configuration\n * @param  {string}      attributeKey  Attribute key for which ID is to be determined\n * @param  {Object}      logger\n * @return {string|null} Attribute ID corresponding to the provided attribute key. Attribute key if it is a reserved attribute.\n */\nexport var getAttributeId = function(projectConfig, attributeKey, logger) {\n  var attribute = projectConfig.attributeKeyMap[attributeKey];\n  var hasReservedPrefix = attributeKey.indexOf(RESERVED_ATTRIBUTE_PREFIX) === 0;\n  if (attribute) {\n    if (hasReservedPrefix) {\n      logger.log(\n        LOG_LEVEL.WARN,\n        sprintf(\n          'Attribute %s unexpectedly has reserved prefix %s; using attribute ID instead of reserved attribute name.',\n          attributeKey,\n          RESERVED_ATTRIBUTE_PREFIX\n        )\n      );\n    }\n    return attribute.id;\n  } else if (hasReservedPrefix) {\n    return attributeKey;\n  }\n\n  logger.log(LOG_LEVEL.DEBUG, sprintf(ERROR_MESSAGES.UNRECOGNIZED_ATTRIBUTE, MODULE_NAME, attributeKey));\n  return null;\n};\n\n/**\n * Get event ID for the provided\n * @param  {Object}      projectConfig Object representing project configuration\n * @param  {string}      eventKey      Event key for which ID is to be determined\n * @return {string|null} Event ID corresponding to the provided event key\n */\nexport var getEventId = function(projectConfig, eventKey) {\n  var event = projectConfig.eventKeyMap[eventKey];\n  if (event) {\n    return event.id;\n  }\n  return null;\n};\n\n/**\n * Get experiment status for the provided experiment key\n * @param  {Object} projectConfig Object representing project configuration\n * @param  {string} experimentKey Experiment key for which status is to be determined\n * @return {string} Experiment status corresponding to the provided experiment key\n * @throws If experiment key is not in datafile\n */\nexport var getExperimentStatus = function(projectConfig, experimentKey) {\n  var experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n  }\n  return experiment.status;\n};\n\n/**\n * Returns whether experiment has a status of 'Running'\n * @param  {Object}  projectConfig Object representing project configuration\n * @param  {string}  experimentKey Experiment key for which status is to be compared with 'Running'\n * @return {Boolean}               true if experiment status is set to 'Running', false otherwise\n */\nexport var isActive = function(projectConfig, experimentKey) {\n  return this.getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;\n};\n\n/**\n * Determine for given experiment if event is running, which determines whether should be dispatched or not\n */\nexport var isRunning = function(projectConfig, experimentKey) {\n  return this.getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;\n};\n\n/**\n * Get audience conditions for the experiment\n * @param  {Object}         projectConfig Object representing project configuration\n * @param  {string}         experimentKey Experiment key for which audience conditions are to be determined\n * @return {Array}          Audience conditions for the experiment - can be an array of audience IDs, or a\n *                          nested array of conditions\n *                          Examples: [\"5\", \"6\"], [\"and\", [\"or\", \"1\", \"2\"], \"3\"]\n * @throws If experiment key is not in datafile\n */\nexport var getExperimentAudienceConditions = function(projectConfig, experimentKey) {\n  var experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n  }\n\n  return experiment.audienceConditions || experiment.audienceIds;\n};\n\n/**\n * Get variation key given experiment key and variation ID\n * @param  {Object} projectConfig Object representing project configuration\n * @param  {string} variationId   ID of the variation\n * @return {string} Variation key or null if the variation ID is not found\n */\nexport var getVariationKeyFromId = function(projectConfig, variationId) {\n  if (projectConfig.variationIdMap.hasOwnProperty(variationId)) {\n    return projectConfig.variationIdMap[variationId].key;\n  }\n  return null;\n};\n\n/**\n * Get the variation ID given the experiment key and variation key\n * @param  {Object} projectConfig Object representing project configuration\n * @param  {string} experimentKey Key of the experiment the variation belongs to\n * @param  {string} variationKey  The variation key\n * @return {string} the variation ID\n */\nexport var getVariationIdFromExperimentAndVariationKey = function(projectConfig, experimentKey, variationKey) {\n  var experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (experiment.variationKeyMap.hasOwnProperty(variationKey)) {\n    return experiment.variationKeyMap[variationKey].id;\n  }\n  return null;\n};\n\n/**\n * Get experiment from provided experiment key\n * @param  {Object} projectConfig  Object representing project configuration\n * @param  {string} experimentKey  Event key for which experiment IDs are to be retrieved\n * @return {Object} experiment\n * @throws If experiment key is not in datafile\n */\nexport var getExperimentFromKey = function(projectConfig, experimentKey) {\n  if (projectConfig.experimentKeyMap.hasOwnProperty(experimentKey)) {\n    var experiment = projectConfig.experimentKeyMap[experimentKey];\n    if (experiment) {\n      return experiment;\n    }\n  }\n\n  throw new Error(sprintf(ERROR_MESSAGES.EXPERIMENT_KEY_NOT_IN_DATAFILE, MODULE_NAME, experimentKey));\n};\n\n/**\n * Given an experiment key, returns the traffic allocation within that experiment\n * @param  {Object} projectConfig Object representing project configuration\n * @param  {string} experimentKey Key representing the experiment\n * @return {Array<Object>}        Traffic allocation for the experiment\n * @throws If experiment key is not in datafile\n */\nexport var getTrafficAllocation = function(projectConfig, experimentKey) {\n  var experiment = projectConfig.experimentKeyMap[experimentKey];\n  if (!experiment) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n  }\n  return experiment.trafficAllocation;\n};\n\n/**\n * Get experiment from provided experiment id. Log an error if no experiment\n * exists in the project config with the given ID.\n * @param  {Object} projectConfig  Object representing project configuration\n * @param  {string} experimentId  ID of desired experiment object\n * @return {Object} Experiment object\n */\nexport var getExperimentFromId = function(projectConfig, experimentId, logger) {\n  if (projectConfig.experimentIdMap.hasOwnProperty(experimentId)) {\n    var experiment = projectConfig.experimentIdMap[experimentId];\n    if (experiment) {\n      return experiment;\n    }\n  }\n\n  logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId));\n  return null;\n};\n\n/**\n * Get feature from provided feature key. Log an error if no feature exists in\n * the project config with the given key.\n * @param {Object} projectConfig\n * @param {string} featureKey\n * @param {Object} logger\n * @return {Object|null} Feature object, or null if no feature with the given\n * key exists\n */\nexport var getFeatureFromKey = function(projectConfig, featureKey, logger) {\n  if (projectConfig.featureKeyMap.hasOwnProperty(featureKey)) {\n    var feature = projectConfig.featureKeyMap[featureKey];\n    if (feature) {\n      return feature;\n    }\n  }\n\n  logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME, featureKey));\n  return null;\n};\n\n/**\n * Get the variable with the given key associated with the feature with the\n * given key. If the feature key or the variable key are invalid, log an error\n * message.\n * @param {Object} projectConfig\n * @param {string} featureKey\n * @param {string} variableKey\n * @param {Object} logger\n * @return {Object|null} Variable object, or null one or both of the given\n * feature and variable keys are invalid\n */\nexport var getVariableForFeature = function(projectConfig, featureKey, variableKey, logger) {\n  var feature = projectConfig.featureKeyMap[featureKey];\n  if (!feature) {\n    logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME, featureKey));\n    return null;\n  }\n\n  var variable = feature.variableKeyMap[variableKey];\n  if (!variable) {\n    logger.log(\n      LOG_LEVEL.ERROR,\n      sprintf(ERROR_MESSAGES.VARIABLE_KEY_NOT_IN_DATAFILE, MODULE_NAME, variableKey, featureKey)\n    );\n    return null;\n  }\n\n  return variable;\n};\n\n/**\n * Get the value of the given variable for the given variation. If the given\n * variable has no value for the given variation, return null. Log an error message if the variation is invalid. If the\n * variable or variation are invalid, return null.\n * @param {Object} projectConfig\n * @param {Object} variable\n * @param {Object} variation\n * @param {Object} logger\n * @return {string|null} The value of the given variable for the given\n * variation, or null if the given variable has no value\n * for the given variation or if the variation or variable are invalid\n */\nexport var getVariableValueForVariation = function(projectConfig, variable, variation, logger) {\n  if (!variable || !variation) {\n    return null;\n  }\n\n  if (!projectConfig.variationVariableUsageMap.hasOwnProperty(variation.id)) {\n    logger.log(\n      LOG_LEVEL.ERROR,\n      sprintf(ERROR_MESSAGES.VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT, MODULE_NAME, variation.id)\n    );\n    return null;\n  }\n\n  var variableUsages = projectConfig.variationVariableUsageMap[variation.id];\n  var variableUsage = variableUsages[variable.id];\n\n  return variableUsage ? variableUsage.value : null;\n};\n\n/**\n * Given a variable value in string form, try to cast it to the argument type.\n * If the type cast succeeds, return the type casted value, otherwise log an\n * error and return null.\n * @param {string} variableValue  Variable value in string form\n * @param {string} variableType   Type of the variable whose value was passed\n *                                in the first argument. Must be one of\n *                                FEATURE_VARIABLE_TYPES in\n *                                lib/utils/enums/index.js. The return value's\n *                                type is determined by this argument (boolean\n *                                for BOOLEAN, number for INTEGER or DOUBLE,\n *                                and string for STRING).\n * @param {Object} logger         Logger instance\n * @returns {*}                   Variable value of the appropriate type, or\n *                                null if the type cast failed\n */\nexport var getTypeCastValue = function(variableValue, variableType, logger) {\n  var castValue;\n\n  switch (variableType) {\n    case FEATURE_VARIABLE_TYPES.BOOLEAN:\n      if (variableValue !== 'true' && variableValue !== 'false') {\n        logger.log(\n          LOG_LEVEL.ERROR,\n          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType)\n        );\n        castValue = null;\n      } else {\n        castValue = variableValue === 'true';\n      }\n      break;\n\n    case FEATURE_VARIABLE_TYPES.INTEGER:\n      castValue = parseInt(variableValue, 10);\n      if (isNaN(castValue)) {\n        logger.log(\n          LOG_LEVEL.ERROR,\n          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType)\n        );\n        castValue = null;\n      }\n      break;\n\n    case FEATURE_VARIABLE_TYPES.DOUBLE:\n      castValue = parseFloat(variableValue);\n      if (isNaN(castValue)) {\n        logger.log(\n          LOG_LEVEL.ERROR,\n          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType)\n        );\n        castValue = null;\n      }\n      break;\n\n    case FEATURE_VARIABLE_TYPES.JSON:\n      try {\n        castValue = JSON.parse(variableValue);\n      } catch (e) {\n        logger.log(\n          LOG_LEVEL.ERROR,\n          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType)\n        );\n        castValue = null;\n      }\n      break;\n\n    default:\n      // type is STRING\n      castValue = variableValue;\n      break;\n  }\n\n  return castValue;\n};\n\n/**\n * Returns an object containing all audiences in the project config. Keys are audience IDs\n * and values are audience objects.\n * @param projectConfig\n * @returns {Object}\n */\nexport var getAudiencesById = function(projectConfig) {\n  return projectConfig.audiencesById;\n};\n\n/**\n * Returns true if an event with the given key exists in the datafile, and false otherwise\n * @param {Object} projectConfig\n * @param {string} eventKey\n * @returns {boolean}\n */\nexport var eventWithKeyExists = function(projectConfig, eventKey) {\n  return projectConfig.eventKeyMap.hasOwnProperty(eventKey);\n};\n\n/**\n *\n * @param {Object} projectConfig\n * @param {string} experimentId\n * @returns {boolean} Returns true if experiment belongs to\n * any feature, false otherwise.\n */\nexport var isFeatureExperiment = function(projectConfig, experimentId) {\n  return projectConfig.experimentFeatureMap.hasOwnProperty(experimentId);\n};\n\n/**\n * Try to create a project config object from the given datafile and\n * configuration properties.\n * If successful, return the project config object, otherwise throws an error\n * @param  {Object} config\n * @param  {Object} config.datafile\n * @param  {Object} config.jsonSchemaValidator\n * @param  {Object} config.logger\n * @return {Object} Project config object\n */\nexport var tryCreatingProjectConfig = function(config) {\n  configValidator.validateDatafile(config.datafile);\n  if (!config.jsonSchemaValidator) {\n    config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.SKIPPING_JSON_VALIDATION, MODULE_NAME));\n  } else {\n    config.jsonSchemaValidator.validate(config.datafile);\n    config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VALID_DATAFILE, MODULE_NAME));\n  }\n  return this.createProjectConfig(config.datafile);\n};\n\nexport default {\n  createProjectConfig: createProjectConfig,\n  getExperimentId: getExperimentId,\n  getLayerId: getLayerId,\n  getAttributeId: getAttributeId,\n  getEventId: getEventId,\n  getExperimentStatus: getExperimentStatus,\n  isActive: isActive,\n  isRunning: isRunning,\n  getExperimentAudienceConditions: getExperimentAudienceConditions,\n  getVariationKeyFromId: getVariationKeyFromId,\n  getVariationIdFromExperimentAndVariationKey: getVariationIdFromExperimentAndVariationKey,\n  getExperimentFromKey: getExperimentFromKey,\n  getTrafficAllocation: getTrafficAllocation,\n  getExperimentFromId: getExperimentFromId,\n  getFeatureFromKey: getFeatureFromKey,\n  getVariableForFeature: getVariableForFeature,\n  getVariableValueForVariation: getVariableValueForVariation,\n  getTypeCastValue: getTypeCastValue,\n  getAudiencesById: getAudiencesById,\n  eventWithKeyExists: eventWithKeyExists,\n  isFeatureExperiment: isFeatureExperiment,\n  tryCreatingProjectConfig: tryCreatingProjectConfig,\n};\n","/****************************************************************************\n * Copyright 2018, 2020, Optimizely, Inc. and contributors                  *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nvar AND_CONDITION = 'and';\nvar OR_CONDITION = 'or';\nvar NOT_CONDITION = 'not';\n\nvar DEFAULT_OPERATOR_TYPES = [AND_CONDITION, OR_CONDITION, NOT_CONDITION];\n\n/**\n * Top level method to evaluate conditions\n * @param  {Array|*}    conditions      Nested array of and/or conditions, or a single leaf\n *                                      condition value of any type\n *                                      Example: ['and', '0', ['or', '1', '2']]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition\n *                                      values\n * @return {?Boolean}                   Result of evaluating the conditions using the operator\n *                                      rules and the leaf evaluator. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated\n */\nexport var evaluate = function(conditions, leafEvaluator) {\n  if (Array.isArray(conditions)) {\n    var firstOperator = conditions[0];\n    var restOfConditions = conditions.slice(1);\n\n    if (DEFAULT_OPERATOR_TYPES.indexOf(firstOperator) === -1) {\n      // Operator to apply is not explicit - assume 'or'\n      firstOperator = OR_CONDITION;\n      restOfConditions = conditions;\n    }\n\n    switch (firstOperator) {\n      case AND_CONDITION:\n        return andEvaluator(restOfConditions, leafEvaluator);\n      case NOT_CONDITION:\n        return notEvaluator(restOfConditions, leafEvaluator);\n      default:\n        // firstOperator is OR_CONDITION\n        return orEvaluator(restOfConditions, leafEvaluator);\n    }\n  }\n\n  var leafCondition = conditions;\n  return leafEvaluator(leafCondition);\n};\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results AND-ed together.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\nfunction andEvaluator(conditions, leafEvaluator) {\n  var sawNullResult = false;\n  for (var i = 0; i < conditions.length; i++) {\n    var conditionResult = evaluate(conditions[i], leafEvaluator);\n    if (conditionResult === false) {\n      return false;\n    }\n    if (conditionResult === null) {\n      sawNullResult = true;\n    }\n  }\n  return sawNullResult ? null : true;\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to a single entry and NOT was applied to the result.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\nfunction notEvaluator(conditions, leafEvaluator) {\n  if (conditions.length > 0) {\n    var result = evaluate(conditions[0], leafEvaluator);\n    return result === null ? null : !result;\n  }\n  return null;\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results OR-ed together.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\nfunction orEvaluator(conditions, leafEvaluator) {\n  var sawNullResult = false;\n  for (var i = 0; i < conditions.length; i++) {\n    var conditionResult = evaluate(conditions[i], leafEvaluator);\n    if (conditionResult === true) {\n      return true;\n    }\n    if (conditionResult === null) {\n      sawNullResult = true;\n    }\n  }\n  return sawNullResult ? null : false;\n}\n\nexport default {\n  evaluate: evaluate,\n};\n","/****************************************************************************\n * Copyright 2018-2019, 2020 Optimizely, Inc. and contributors              *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { sprintf } from '@optimizely/js-sdk-utils';\n\nimport fns from '../../utils/fns';\nimport {\n  LOG_LEVEL,\n  LOG_MESSAGES,\n} from '../../utils/enums';\n\nvar MODULE_NAME = 'CUSTOM_ATTRIBUTE_CONDITION_EVALUATOR';\n\nvar EXACT_MATCH_TYPE = 'exact';\nvar EXISTS_MATCH_TYPE = 'exists';\nvar GREATER_THAN_MATCH_TYPE = 'gt';\nvar LESS_THAN_MATCH_TYPE = 'lt';\nvar SUBSTRING_MATCH_TYPE = 'substring';\n\nvar MATCH_TYPES = [\n  EXACT_MATCH_TYPE,\n  EXISTS_MATCH_TYPE,\n  GREATER_THAN_MATCH_TYPE,\n  LESS_THAN_MATCH_TYPE,\n  SUBSTRING_MATCH_TYPE,\n];\n\nvar EVALUATORS_BY_MATCH_TYPE = {};\nEVALUATORS_BY_MATCH_TYPE[EXACT_MATCH_TYPE] = exactEvaluator;\nEVALUATORS_BY_MATCH_TYPE[EXISTS_MATCH_TYPE] = existsEvaluator;\nEVALUATORS_BY_MATCH_TYPE[GREATER_THAN_MATCH_TYPE] = greaterThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[LESS_THAN_MATCH_TYPE] = lessThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SUBSTRING_MATCH_TYPE] = substringEvaluator;\n\n/**\n * Given a custom attribute audience condition and user attributes, evaluate the\n * condition against the attributes.\n * @param  {Object}     condition\n * @param  {Object}     userAttributes\n * @param  {Object}     logger\n * @return {?Boolean}   true/false if the given user attributes match/don't match the given condition,\n *                                      null if the given user attributes and condition can't be evaluated\n * TODO: Change to accept and object with named properties\n */\nexport var evaluate = function(condition, userAttributes, logger) {\n  var conditionMatch = condition.match;\n  if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  var attributeKey = condition.name;\n  if (!userAttributes.hasOwnProperty(attributeKey) && conditionMatch != EXISTS_MATCH_TYPE) {\n    logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.MISSING_ATTRIBUTE_VALUE, MODULE_NAME, JSON.stringify(condition), attributeKey)\n    );\n    return null;\n  }\n\n  var evaluatorForMatch = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || exactEvaluator;\n  return evaluatorForMatch(condition, userAttributes, logger);\n};\n\n/**\n * Returns true if the value is valid for exact conditions. Valid values include\n * strings, booleans, and numbers that aren't NaN, -Infinity, or Infinity.\n * @param value\n * @returns {Boolean}\n */\nfunction isValueTypeValidForExactConditions(value) {\n  return typeof value === 'string' || typeof value === 'boolean' || fns.isNumber(value);\n}\n\n/**\n * Evaluate the given exact match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @return  {?Boolean}  true if the user attribute value is equal (===) to the condition value,\n *                      false if the user attribute value is not equal (!==) to the condition value,\n *                      null if the condition value or user attribute value has an invalid type, or\n *                      if there is a mismatch between the user attribute type and the condition value\n *                      type\n */\nfunction exactEvaluator(condition, userAttributes, logger) {\n  var conditionValue = condition.value;\n  var conditionValueType = typeof conditionValue;\n  var conditionName = condition.name;\n  var userValue = userAttributes[conditionName];\n  var userValueType = typeof userValue;\n\n  if (\n    !isValueTypeValidForExactConditions(conditionValue) ||\n    (fns.isNumber(conditionValue) && !fns.isSafeInteger(conditionValue))\n  ) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition))\n    );\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName)\n    );\n    return null;\n  }\n\n  if (!isValueTypeValidForExactConditions(userValue) || conditionValueType !== userValueType) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName)\n    );\n    return null;\n  }\n\n  if (fns.isNumber(userValue) && !fns.isSafeInteger(userValue)) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName)\n    );\n    return null;\n  }\n\n  return conditionValue === userValue;\n}\n\n/**\n * Evaluate the given exists match condition for the given user attributes\n * @param   {Object}  condition\n * @param   {Object}  userAttributes\n * @returns {Boolean} true if both:\n *                      1) the user attributes have a value for the given condition, and\n *                      2) the user attribute value is neither null nor undefined\n *                    Returns false otherwise\n */\nfunction existsEvaluator(condition, userAttributes) {\n  var userValue = userAttributes[condition.name];\n  return typeof userValue !== 'undefined' && userValue !== null;\n}\n\n/**\n * Evaluate the given greater than match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the user attribute value is greater than the condition value,\n *                      false if the user attribute value is less than or equal to the condition value,\n *                      null if the condition value isn't a number or the user attribute value\n *                      isn't a number\n */\nfunction greaterThanEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[conditionName];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (!fns.isSafeInteger(conditionValue)) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition))\n    );\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName)\n    );\n    return null;\n  }\n\n  if (!fns.isNumber(userValue)) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName)\n    );\n    return null;\n  }\n\n  if (!fns.isSafeInteger(userValue)) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName)\n    );\n    return null;\n  }\n\n  return userValue > conditionValue;\n}\n\n/**\n * Evaluate the given less than match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the user attribute value is less than the condition value,\n *                      false if the user attribute value is greater than or equal to the condition value,\n *                      null if the condition value isn't a number or the user attribute value isn't a\n *                      number\n */\nfunction lessThanEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[condition.name];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (!fns.isSafeInteger(conditionValue)) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition))\n    );\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName)\n    );\n    return null;\n  }\n\n  if (!fns.isNumber(userValue)) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName)\n    );\n    return null;\n  }\n\n  if (!fns.isSafeInteger(userValue)) {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName)\n    );\n    return null;\n  }\n\n  return userValue < conditionValue;\n}\n\n/**\n * Evaluate the given substring match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the condition value is a substring of the user attribute value,\n *                      false if the condition value is not a substring of the user attribute value,\n *                      null if the condition value isn't a string or the user attribute value\n *                      isn't a string\n */\nfunction substringEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[condition.name];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (typeof conditionValue !== 'string') {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition))\n    );\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName)\n    );\n    return null;\n  }\n\n  if (typeof userValue !== 'string') {\n    logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName)\n    );\n    return null;\n  }\n\n  return userValue.indexOf(conditionValue) !== -1;\n}\n\nexport default {\n  evaluate: evaluate,\n};\n","/**\n * Copyright 2016, 2018-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '@optimizely/js-sdk-utils';\nimport { getLogger } from '@optimizely/js-sdk-logging';\n\nimport fns from '../../utils/fns';\nimport {\n  LOG_LEVEL,\n  LOG_MESSAGES,\n  ERROR_MESSAGES,\n} from '../../utils/enums';\nimport conditionTreeEvaluator from '../condition_tree_evaluator';\nimport customAttributeConditionEvaluator from '../custom_attribute_condition_evaluator';\n\nvar logger = getLogger();\nvar MODULE_NAME = 'AUDIENCE_EVALUATOR';\n\n/**\n * Construct an instance of AudienceEvaluator with given options\n * @param {Object=} UNSTABLE_conditionEvaluators A map of condition evaluators provided by the consumer. This enables matching\n *                                                   condition types which are not supported natively by the SDK. Note that built in\n *                                                   Optimizely evaluators cannot be overridden.\n * @constructor\n */\nfunction AudienceEvaluator(UNSTABLE_conditionEvaluators) {\n  this.typeToEvaluatorMap = fns.assign({}, UNSTABLE_conditionEvaluators, {\n    custom_attribute: customAttributeConditionEvaluator,\n  });\n}\n\n/**\n * Determine if the given user attributes satisfy the given audience conditions\n * @param  {Array|String|null|undefined}  audienceConditions    Audience conditions to match the user attributes against - can be an array\n *                                                              of audience IDs, a nested array of conditions, or a single leaf condition.\n *                                                              Examples: [\"5\", \"6\"], [\"and\", [\"or\", \"1\", \"2\"], \"3\"], \"1\"\n * @param  {Object}                       audiencesById         Object providing access to full audience objects for audience IDs\n *                                                              contained in audienceConditions. Keys should be audience IDs, values\n *                                                              should be full audience objects with conditions properties\n * @param  {Object}                       [userAttributes]      User attributes which will be used in determining if audience conditions\n *                                                              are met. If not provided, defaults to an empty object\n * @return {Boolean}                                            true if the user attributes match the given audience conditions, false\n *                                                              otherwise\n */\nAudienceEvaluator.prototype.evaluate = function(audienceConditions, audiencesById, userAttributes) {\n  // if there are no audiences, return true because that means ALL users are included in the experiment\n  if (!audienceConditions || audienceConditions.length === 0) {\n    return true;\n  }\n\n  if (!userAttributes) {\n    userAttributes = {};\n  }\n\n  var evaluateAudience = function(audienceId) {\n    var audience = audiencesById[audienceId];\n    if (audience) {\n      logger.log(\n        LOG_LEVEL.DEBUG,\n        sprintf(LOG_MESSAGES.EVALUATING_AUDIENCE, MODULE_NAME, audienceId, JSON.stringify(audience.conditions))\n      );\n      var result = conditionTreeEvaluator.evaluate(\n        audience.conditions,\n        this.evaluateConditionWithUserAttributes.bind(this, userAttributes)\n      );\n      var resultText = result === null ? 'UNKNOWN' : result.toString().toUpperCase();\n      logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT, MODULE_NAME, audienceId, resultText));\n      return result;\n    }\n\n    return null;\n  }.bind(this);\n\n  return conditionTreeEvaluator.evaluate(audienceConditions, evaluateAudience) || false;\n};\n\n/**\n * Wrapper around evaluator.evaluate that is passed to the conditionTreeEvaluator.\n * Evaluates the condition provided given the user attributes if an evaluator has been defined for the condition type.\n * @param  {Object} userAttributes     A map of user attributes.\n * @param  {Object} condition          A single condition object to evaluate.\n * @return {Boolean|null}              true if the condition is satisfied, null if a matcher is not found.\n */\nAudienceEvaluator.prototype.evaluateConditionWithUserAttributes = function(userAttributes, condition) {\n  var evaluator = this.typeToEvaluatorMap[condition.type];\n  if (!evaluator) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_CONDITION_TYPE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n  try {\n    return evaluator.evaluate(condition, userAttributes, logger);\n  } catch (err) {\n    logger.log(\n      LOG_LEVEL.ERROR,\n      sprintf(ERROR_MESSAGES.CONDITION_EVALUATOR_ERROR, MODULE_NAME, condition.type, err.message)\n    );\n  }\n  return null;\n};\n\nexport default AudienceEvaluator;\n","/**\n * Copyright 2018, 2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Validates provided value is a non-empty string\n * @param  {string}  input\n * @return {boolean} True for non-empty string, false otherwise\n */\nexport var validate = function(input) {\n  return typeof input === 'string' && input !== '';\n};\n\nexport default {\n  validate: validate,\n};\n","/****************************************************************************\n * Copyright 2017-2020 Optimizely, Inc. and contributors                    *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { sprintf } from'@optimizely/js-sdk-utils';\n\nimport bucketer from '../bucketer';\nimport enums from '../../utils/enums';\nimport fns from '../../utils/fns';\nimport projectConfig from '../project_config';\nimport AudienceEvaluator from '../audience_evaluator';\nimport stringValidator from '../../utils/string_value_validator';\n\nvar MODULE_NAME = 'DECISION_SERVICE';\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar DECISION_SOURCES = enums.DECISION_SOURCES;\nvar AUDIENCE_EVALUATION_TYPES = enums.AUDIENCE_EVALUATION_TYPES;\n\n/**\n * Optimizely's decision service that determines which variation of an experiment the user will be allocated to.\n *\n * The decision service contains all logic around how a user decision is made. This includes all of the following (in order):\n *   1. Checking experiment status\n *   2. Checking forced bucketing\n *   3. Checking whitelisting\n *   4. Checking user profile service for past bucketing decisions (sticky bucketing)\n *   5. Checking audience targeting\n *   6. Using Murmurhash3 to bucket the user.\n *\n * @constructor\n * @param   {Object} options\n * @param   {Object} options.userProfileService An instance of the user profile service for sticky bucketing.\n * @param   {Object} options.logger An instance of a logger to log messages.\n * @returns {Object}\n */\nfunction DecisionService(options) {\n  this.audienceEvaluator = new AudienceEvaluator(options.UNSTABLE_conditionEvaluators);\n  this.forcedVariationMap = {};\n  this.logger = options.logger;\n  this.userProfileService = options.userProfileService || null;\n}\n\n/**\n * Gets variation where visitor will be bucketed.\n * @param  {Object}      configObj      The parsed project configuration object\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} the variation the user is bucketed into.\n */\nDecisionService.prototype.getVariation = function(configObj, experimentKey, userId, attributes) {\n  // by default, the bucketing ID should be the user ID\n  var bucketingId = this._getBucketingId(userId, attributes);\n\n  if (!this.__checkIfExperimentIsActive(configObj, experimentKey)) {\n    return null;\n  }\n  var experiment = configObj.experimentKeyMap[experimentKey];\n  var forcedVariationKey = this.getForcedVariation(configObj, experimentKey, userId);\n  if (forcedVariationKey) {\n    return forcedVariationKey;\n  }\n\n  var variation = this.__getWhitelistedVariation(experiment, userId);\n  if (variation) {\n    return variation.key;\n  }\n\n  // check for sticky bucketing\n  var experimentBucketMap = this.__resolveExperimentBucketMap(userId, attributes);\n  variation = this.__getStoredVariation(configObj, experiment, userId, experimentBucketMap);\n  if (variation) {\n    this.logger.log(\n      LOG_LEVEL.INFO,\n      sprintf(LOG_MESSAGES.RETURNING_STORED_VARIATION, MODULE_NAME, variation.key, experimentKey, userId)\n    );\n    return variation.key;\n  }\n\n  // Perform regular targeting and bucketing\n  if (!this.__checkIfUserIsInAudience(configObj, experimentKey, AUDIENCE_EVALUATION_TYPES.EXPERIMENT, userId, attributes, '')) {\n    var userDoesNotMeetConditionsLogMessage = sprintf(\n      LOG_MESSAGES.USER_NOT_IN_EXPERIMENT,\n      MODULE_NAME,\n      userId,\n      experimentKey\n    );\n    this.logger.log(LOG_LEVEL.INFO, userDoesNotMeetConditionsLogMessage);\n    return null;\n  }\n\n  var bucketerParams = this.__buildBucketerParams(configObj, experimentKey, bucketingId, userId);\n  var variationId = bucketer.bucket(bucketerParams);\n  variation = configObj.variationIdMap[variationId];\n  if (!variation) {\n    var userHasNoVariationLogMessage = sprintf(\n      LOG_MESSAGES.USER_HAS_NO_VARIATION,\n      MODULE_NAME,\n      userId,\n      experimentKey\n    );\n    this.logger.log(LOG_LEVEL.DEBUG, userHasNoVariationLogMessage);\n    return null;\n  }\n\n  var userInVariationLogMessage = sprintf(\n    LOG_MESSAGES.USER_HAS_VARIATION,\n    MODULE_NAME,\n    userId,\n    variation.key,\n    experimentKey\n  );\n  this.logger.log(LOG_LEVEL.INFO, userInVariationLogMessage);\n  // persist bucketing\n  this.__saveUserProfile(experiment, variation, userId, experimentBucketMap);\n\n  return variation.key;\n};\n\n/**\n * Merges attributes from attributes[STICKY_BUCKETING_KEY] and userProfileService\n * @param  {Object} attributes\n * @return {Object} finalized copy of experiment_bucket_map\n */\nDecisionService.prototype.__resolveExperimentBucketMap = function(userId, attributes) {\n  attributes = attributes || {};\n  var userProfile = this.__getUserProfile(userId) || {};\n  var attributeExperimentBucketMap = attributes[enums.CONTROL_ATTRIBUTES.STICKY_BUCKETING_KEY];\n  return fns.assign({}, userProfile.experiment_bucket_map, attributeExperimentBucketMap);\n};\n\n/**\n * Checks whether the experiment is running\n * @param  {Object}  configObj     The parsed project configuration object\n * @param  {string}  experimentKey Key of experiment being validated\n * @param  {string}  userId        ID of user\n * @return {boolean} True if experiment is running\n */\nDecisionService.prototype.__checkIfExperimentIsActive = function(configObj, experimentKey) {\n  if (!projectConfig.isActive(configObj, experimentKey)) {\n    var experimentNotRunningLogMessage = sprintf(LOG_MESSAGES.EXPERIMENT_NOT_RUNNING, MODULE_NAME, experimentKey);\n    this.logger.log(LOG_LEVEL.INFO, experimentNotRunningLogMessage);\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks if user is whitelisted into any variation and return that variation if so\n * @param  {Object} experiment\n * @param  {string} userId\n * @return {string|null} Forced variation if it exists for user ID, otherwise null\n */\nDecisionService.prototype.__getWhitelistedVariation = function(experiment, userId) {\n  if (experiment.forcedVariations && experiment.forcedVariations.hasOwnProperty(userId)) {\n    var forcedVariationKey = experiment.forcedVariations[userId];\n    if (experiment.variationKeyMap.hasOwnProperty(forcedVariationKey)) {\n      var forcedBucketingSucceededMessageLog = sprintf(\n        LOG_MESSAGES.USER_FORCED_IN_VARIATION,\n        MODULE_NAME,\n        userId,\n        forcedVariationKey\n      );\n      this.logger.log(LOG_LEVEL.INFO, forcedBucketingSucceededMessageLog);\n      return experiment.variationKeyMap[forcedVariationKey];\n    } else {\n      var forcedBucketingFailedMessageLog = sprintf(\n        LOG_MESSAGES.FORCED_BUCKETING_FAILED,\n        MODULE_NAME,\n        forcedVariationKey,\n        userId\n      );\n      this.logger.log(LOG_LEVEL.ERROR, forcedBucketingFailedMessageLog);\n      return null;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Checks whether the user is included in experiment audience\n * @param  {Object}  configObj            The parsed project configuration object\n * @param  {string}  experimentKey        Key of experiment being validated\n * @param  {string}  evaluationAttribute  String representing experiment key or rule\n * @param  {string}  userId               ID of user\n * @param  {Object}  attributes           Optional parameter for user's attributes\n * @param  {string}  loggingKey           String representing experiment key or rollout rule. To be used in log messages only.\n * @return {boolean} True if user meets audience conditions\n */\nDecisionService.prototype.__checkIfUserIsInAudience = function(configObj, experimentKey, evaluationAttribute, userId, attributes, loggingKey) {\n  var experimentAudienceConditions = projectConfig.getExperimentAudienceConditions(configObj, experimentKey);\n  var audiencesById = projectConfig.getAudiencesById(configObj);\n  this.logger.log(\n    LOG_LEVEL.DEBUG,\n    sprintf(\n      LOG_MESSAGES.EVALUATING_AUDIENCES_COMBINED,\n      MODULE_NAME,\n      evaluationAttribute,\n      loggingKey || experimentKey,\n      JSON.stringify(experimentAudienceConditions)\n    )\n  );\n  var result = this.audienceEvaluator.evaluate(experimentAudienceConditions, audiencesById, attributes);\n  this.logger.log(\n    LOG_LEVEL.INFO,\n    sprintf(\n      LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT_COMBINED,\n      MODULE_NAME,\n      evaluationAttribute,\n      loggingKey || experimentKey,\n      result.toString().toUpperCase()\n    )\n  );\n\n  return result;\n};\n\n/**\n * Given an experiment key and user ID, returns params used in bucketer call\n * @param  configObj     The parsed project configuration object\n * @param  experimentKey Experiment key used for bucketer\n * @param  bucketingId   ID to bucket user into\n * @param  userId        ID of user to be bucketed\n * @return {Object}\n */\nDecisionService.prototype.__buildBucketerParams = function(configObj, experimentKey, bucketingId, userId) {\n  var bucketerParams = {};\n  bucketerParams.experimentKey = experimentKey;\n  bucketerParams.experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  bucketerParams.userId = userId;\n  bucketerParams.trafficAllocationConfig = projectConfig.getTrafficAllocation(configObj, experimentKey);\n  bucketerParams.experimentKeyMap = configObj.experimentKeyMap;\n  bucketerParams.groupIdMap = configObj.groupIdMap;\n  bucketerParams.variationIdMap = configObj.variationIdMap;\n  bucketerParams.logger = this.logger;\n  bucketerParams.bucketingId = bucketingId;\n  return bucketerParams;\n};\n\n/**\n * Pull the stored variation out of the experimentBucketMap for an experiment/userId\n * @param  {Object} configObj           The parsed project configuration object\n * @param  {Object} experiment\n * @param  {String} userId\n * @param  {Object} experimentBucketMap mapping experiment => { variation_id: <variationId> }\n * @return {Object} the stored variation or null if the user profile does not have one for the given experiment\n */\nDecisionService.prototype.__getStoredVariation = function(configObj, experiment, userId, experimentBucketMap) {\n  if (experimentBucketMap.hasOwnProperty(experiment.id)) {\n    var decision = experimentBucketMap[experiment.id];\n    var variationId = decision.variation_id;\n    if (configObj.variationIdMap.hasOwnProperty(variationId)) {\n      return configObj.variationIdMap[decision.variation_id];\n    } else {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        sprintf(LOG_MESSAGES.SAVED_VARIATION_NOT_FOUND, MODULE_NAME, userId, variationId, experiment.key)\n      );\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get the user profile with the given user ID\n * @param  {string} userId\n * @return {Object|undefined} the stored user profile or undefined if one isn't found\n */\nDecisionService.prototype.__getUserProfile = function(userId) {\n  var userProfile = {\n    user_id: userId,\n    experiment_bucket_map: {},\n  };\n\n  if (!this.userProfileService) {\n    return userProfile;\n  }\n\n  try {\n    return this.userProfileService.lookup(userId);\n  } catch (ex) {\n    this.logger.log(\n      LOG_LEVEL.ERROR,\n      sprintf(ERROR_MESSAGES.USER_PROFILE_LOOKUP_ERROR, MODULE_NAME, userId, ex.message)\n    );\n  }\n};\n\n/**\n * Saves the bucketing decision to the user profile\n * @param {Object} userProfile\n * @param {Object} experiment\n * @param {Object} variation\n * @param {Object} experimentBucketMap\n */\nDecisionService.prototype.__saveUserProfile = function(experiment, variation, userId, experimentBucketMap) {\n  if (!this.userProfileService) {\n    return;\n  }\n\n  try {\n    experimentBucketMap[experiment.id] = {\n      variation_id: variation.id\n    };\n\n    this.userProfileService.save({\n      user_id: userId,\n      experiment_bucket_map: experimentBucketMap,\n    });\n\n    this.logger.log(\n      LOG_LEVEL.INFO,\n      sprintf(LOG_MESSAGES.SAVED_VARIATION, MODULE_NAME, variation.key, experiment.key, userId)\n    );\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.USER_PROFILE_SAVE_ERROR, MODULE_NAME, userId, ex.message));\n  }\n};\n\n/**\n * Given a feature, user ID, and attributes, returns an object representing a\n * decision. If the user was bucketed into a variation for the given feature\n * and attributes, the returned decision object will have variation and\n * experiment properties (both objects), as well as a decisionSource property.\n * decisionSource indicates whether the decision was due to a rollout or an\n * experiment.\n * @param   {Object} configObj  The parsed project configuration object\n * @param   {Object} feature    A feature flag object from project configuration\n * @param   {String} userId     A string identifying the user, for bucketing\n * @param   {Object} attributes Optional user attributes\n * @return  {Object} An object with experiment, variation, and decisionSource\n * properties. If the user was not bucketed into a variation, the variation\n * property is null.\n */\nDecisionService.prototype.getVariationForFeature = function(configObj, feature, userId, attributes) {\n  var experimentDecision = this._getVariationForFeatureExperiment(configObj, feature, userId, attributes);\n  if (experimentDecision.variation !== null) {\n    return experimentDecision;\n  }\n\n  var rolloutDecision = this._getVariationForRollout(configObj, feature, userId, attributes);\n  if (rolloutDecision.variation !== null) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_IN_ROLLOUT, MODULE_NAME, userId, feature.key));\n    return rolloutDecision;\n  }\n\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_IN_ROLLOUT, MODULE_NAME, userId, feature.key));\n  return rolloutDecision;\n};\n\nDecisionService.prototype._getVariationForFeatureExperiment = function(configObj, feature, userId, attributes) {\n  var experiment = null;\n  var variationKey = null;\n\n  if (feature.hasOwnProperty('groupId')) {\n    var group = configObj.groupIdMap[feature.groupId];\n    if (group) {\n      experiment = this._getExperimentInGroup(configObj, group, userId);\n      if (experiment && feature.experimentIds.indexOf(experiment.id) !== -1) {\n        variationKey = this.getVariation(configObj, experiment.key, userId, attributes);\n      }\n    }\n  } else if (feature.experimentIds.length > 0) {\n    // If the feature does not have a group ID, then it can only be associated\n    // with one experiment, so we look at the first experiment ID only\n    experiment = projectConfig.getExperimentFromId(configObj, feature.experimentIds[0], this.logger);\n    if (experiment) {\n      variationKey = this.getVariation(configObj, experiment.key, userId, attributes);\n    }\n  } else {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.key));\n  }\n\n  var variation = null;\n  if (variationKey !== null && experiment !== null) {\n    variation = experiment.variationKeyMap[variationKey];\n  }\n  return {\n    experiment: experiment,\n    variation: variation,\n    decisionSource: DECISION_SOURCES.FEATURE_TEST,\n  };\n};\n\nDecisionService.prototype._getExperimentInGroup = function(configObj, group, userId) {\n  var experimentId = bucketer.bucketUserIntoExperiment(group, userId, userId, this.logger);\n  if (experimentId) {\n    this.logger.log(\n      LOG_LEVEL.INFO,\n      sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME, userId, experimentId, group.id)\n    );\n    var experiment = projectConfig.getExperimentFromId(configObj, experimentId, this.logger);\n    if (experiment) {\n      return experiment;\n    }\n  }\n\n  this.logger.log(\n    LOG_LEVEL.INFO,\n    sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP, MODULE_NAME, userId, group.id)\n  );\n  return null;\n};\n\nDecisionService.prototype._getVariationForRollout = function(configObj, feature, userId, attributes) {\n  if (!feature.rolloutId) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.NO_ROLLOUT_EXISTS, MODULE_NAME, feature.key));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT,\n    };\n  }\n\n  var rollout = configObj.rolloutIdMap[feature.rolloutId];\n  if (!rollout) {\n    this.logger.log(\n      LOG_LEVEL.ERROR,\n      sprintf(ERROR_MESSAGES.INVALID_ROLLOUT_ID, MODULE_NAME, feature.rolloutId, feature.key)\n    );\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT,\n    };\n  }\n\n  if (rollout.experiments.length === 0) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.rolloutId));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT,\n    };\n  }\n\n  var bucketingId = this._getBucketingId(userId, attributes);\n\n  // The end index is length - 1 because the last experiment is assumed to be\n  // \"everyone else\", which will be evaluated separately outside this loop\n  var endIndex = rollout.experiments.length - 1;\n  var index;\n  var rolloutRule;\n  var bucketerParams;\n  var variationId;\n  var variation;\n  var loggingKey;\n  for (index = 0; index < endIndex; index++) {\n    rolloutRule = configObj.experimentKeyMap[rollout.experiments[index].key];\n    loggingKey = index + 1;\n\n    if (!this.__checkIfUserIsInAudience(configObj, rolloutRule.key, AUDIENCE_EVALUATION_TYPES.RULE, userId, attributes, loggingKey)) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        sprintf(LOG_MESSAGES.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME, userId, loggingKey)\n      );\n      continue;\n    }\n\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME, userId, loggingKey)\n    );\n    bucketerParams = this.__buildBucketerParams(configObj, rolloutRule.key, bucketingId, userId);\n    variationId = bucketer.bucket(bucketerParams);\n    variation = configObj.variationIdMap[variationId];\n    if (variation) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME, userId, loggingKey)\n      );\n      return {\n        experiment: rolloutRule,\n        variation: variation,\n        decisionSource: DECISION_SOURCES.ROLLOUT,\n      };\n    } else {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME, userId, loggingKey)\n      );\n      break;\n    }\n  }\n\n  var everyoneElseRule = configObj.experimentKeyMap[rollout.experiments[endIndex].key];\n  if (this.__checkIfUserIsInAudience(configObj, everyoneElseRule.key, AUDIENCE_EVALUATION_TYPES.RULE, userId, attributes, 'Everyone Else')) {\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME, userId, 'Everyone Else')\n    );\n    bucketerParams = this.__buildBucketerParams(configObj, everyoneElseRule.key, bucketingId, userId);\n    variationId = bucketer.bucket(bucketerParams);\n    variation = configObj.variationIdMap[variationId];\n    if (variation) {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME, userId)\n      );\n      return {\n        experiment: everyoneElseRule,\n        variation: variation,\n        decisionSource: DECISION_SOURCES.ROLLOUT,\n      };\n    } else {\n      this.logger.log(\n        LOG_LEVEL.DEBUG,\n        sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME, userId)\n      );\n    }\n  }\n\n  return {\n    experiment: null,\n    variation: null,\n    decisionSource: DECISION_SOURCES.ROLLOUT,\n  };\n};\n\n/**\n * Get bucketing Id from user attributes.\n * @param {String} userId\n * @param {Object} attributes\n * @returns {String} Bucketing Id if it is a string type in attributes, user Id otherwise.\n */\nDecisionService.prototype._getBucketingId = function(userId, attributes) {\n  var bucketingId = userId;\n\n  // If the bucketing ID key is defined in attributes, than use that in place of the userID for the murmur hash key\n  if (\n    attributes != null &&\n    typeof attributes === 'object' &&\n    attributes.hasOwnProperty(enums.CONTROL_ATTRIBUTES.BUCKETING_ID)\n  ) {\n    if (typeof attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID] === 'string') {\n      bucketingId = attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID];\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.VALID_BUCKETING_ID, MODULE_NAME, bucketingId));\n    } else {\n      this.logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.BUCKETING_ID_NOT_STRING, MODULE_NAME));\n    }\n  }\n\n  return bucketingId;\n};\n\n/**\n * Removes forced variation for given userId and experimentKey\n * @param  {string} userId         String representing the user id\n * @param  {number} experimentId   Number representing the experiment id\n * @param  {string} experimentKey  Key representing the experiment id\n * @throws If the user id is not valid or not in the forced variation map\n */\nDecisionService.prototype.removeForcedVariation = function(userId, experimentId, experimentKey) {\n  if (!userId) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_ID, MODULE_NAME));\n  }\n\n  if (this.forcedVariationMap.hasOwnProperty(userId)) {\n    delete this.forcedVariationMap[userId][experimentId];\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.VARIATION_REMOVED_FOR_USER, MODULE_NAME, experimentKey, userId)\n    );\n  } else {\n    throw new Error(sprintf(ERROR_MESSAGES.USER_NOT_IN_FORCED_VARIATION, MODULE_NAME, userId));\n  }\n};\n\n/**\n * Sets forced variation for given userId and experimentKey\n * @param  {string} userId        String representing the user id\n * @param  {number} experimentId  Number representing the experiment id\n * @param  {number} variationId   Number representing the variation id\n * @throws If the user id is not valid\n */\nDecisionService.prototype.__setInForcedVariationMap = function(userId, experimentId, variationId) {\n  if (this.forcedVariationMap.hasOwnProperty(userId)) {\n    this.forcedVariationMap[userId][experimentId] = variationId;\n  } else {\n    this.forcedVariationMap[userId] = {};\n    this.forcedVariationMap[userId][experimentId] = variationId;\n  }\n\n  this.logger.log(\n    LOG_LEVEL.DEBUG,\n    sprintf(LOG_MESSAGES.USER_MAPPED_TO_FORCED_VARIATION, MODULE_NAME, variationId, experimentId, userId)\n  );\n};\n\n/**\n * Gets the forced variation key for the given user and experiment.\n * @param  {Object} configObj        Object representing project configuration\n * @param  {string} experimentKey    Key for experiment.\n * @param  {string} userId           The user Id.\n * @return {string|null} Variation   The variation which the given user and experiment should be forced into.\n */\nDecisionService.prototype.getForcedVariation = function(configObj, experimentKey, userId) {\n  var experimentToVariationMap = this.forcedVariationMap[userId];\n  if (!experimentToVariationMap) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION, MODULE_NAME, userId));\n    return null;\n  }\n\n  var experimentId;\n  try {\n    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);\n    if (experiment.hasOwnProperty('id')) {\n      experimentId = experiment['id'];\n    } else {\n      // catching improperly formatted experiments\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        sprintf(ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME, experimentKey)\n      );\n      return null;\n    }\n  } catch (ex) {\n    // catching experiment not in datafile\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return null;\n  }\n\n  var variationId = experimentToVariationMap[experimentId];\n  if (!variationId) {\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME, experimentKey, userId)\n    );\n    return null;\n  }\n\n  var variationKey = projectConfig.getVariationKeyFromId(configObj, variationId);\n  if (variationKey) {\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.USER_HAS_FORCED_VARIATION, MODULE_NAME, variationKey, experimentKey, userId)\n    );\n  } else {\n    this.logger.log(\n      LOG_LEVEL.DEBUG,\n      sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME, experimentKey, userId)\n    );\n  }\n\n  return variationKey;\n};\n\n/**\n * Sets the forced variation for a user in a given experiment\n * @param  {Object} configObj      Object representing project configuration\n * @param  {string} experimentKey  Key for experiment.\n * @param  {string} userId         The user Id.\n * @param  {string} variationKey   Key for variation. If null, then clear the existing experiment-to-variation mapping\n * @return {boolean}               A boolean value that indicates if the set completed successfully.\n */\nDecisionService.prototype.setForcedVariation = function(configObj, experimentKey, userId, variationKey) {\n  if (variationKey != null && !stringValidator.validate(variationKey)) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_VARIATION_KEY, MODULE_NAME));\n    return false;\n  }\n\n  var experimentId;\n  try {\n    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);\n    if (experiment.hasOwnProperty('id')) {\n      experimentId = experiment['id'];\n    } else {\n      // catching improperly formatted experiments\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        sprintf(ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME, experimentKey)\n      );\n      return false;\n    }\n  } catch (ex) {\n    // catching experiment not in datafile\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return false;\n  }\n\n  if (variationKey == null) {\n    try {\n      this.removeForcedVariation(userId, experimentId, experimentKey, this.logger);\n      return true;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      return false;\n    }\n  }\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n\n  if (!variationId) {\n    this.logger.log(\n      LOG_LEVEL.ERROR,\n      sprintf(ERROR_MESSAGES.NO_VARIATION_FOR_EXPERIMENT_KEY, MODULE_NAME, variationKey, experimentKey)\n    );\n    return false;\n  }\n\n  try {\n    this.__setInForcedVariationMap(userId, experimentId, variationId);\n    return true;\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return false;\n  }\n};\n\n/**\n * Creates an instance of the DecisionService.\n * @param  {Object} options               Configuration options\n * @param  {Object} options.userProfileService\n * @param  {Object} options.logger\n * @return {Object} An instance of the DecisionService\n */\nexport var createDecisionService = function(options) {\n  return new DecisionService(options);\n};\n\nexport default {\n  createDecisionService: createDecisionService,\n};\n","/**\n * Copyright 2017, 2019-2020 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '@optimizely/js-sdk-utils';\n\nimport {\n  LOG_LEVEL,\n  LOG_MESSAGES,\n  RESERVED_EVENT_KEYWORDS,\n} from '../enums';\n\n/**\n * Provides utility method for parsing event tag values\n */\nvar MODULE_NAME = 'EVENT_TAG_UTILS';\nvar REVENUE_EVENT_METRIC_NAME = RESERVED_EVENT_KEYWORDS.REVENUE;\nvar VALUE_EVENT_METRIC_NAME = RESERVED_EVENT_KEYWORDS.VALUE;\n\n/**\n * Grab the revenue value from the event tags. \"revenue\" is a reserved keyword.\n * @param {Object} eventTags\n * @param {Object} logger\n * @return {Integer|null}\n */\nexport var getRevenueValue = function(eventTags, logger) {\n  if (eventTags && eventTags.hasOwnProperty(REVENUE_EVENT_METRIC_NAME)) {\n    var rawValue = eventTags[REVENUE_EVENT_METRIC_NAME];\n    var parsedRevenueValue = parseInt(rawValue, 10);\n    if (isNaN(parsedRevenueValue)) {\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_REVENUE, MODULE_NAME, rawValue));\n      return null;\n    }\n    logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_REVENUE_VALUE, MODULE_NAME, parsedRevenueValue));\n    return parsedRevenueValue;\n  }\n  return null;\n};\n\n/**\n * Grab the event value from the event tags. \"value\" is a reserved keyword.\n * @param {Object} eventTags\n * @param {Object} logger\n * @return {Number|null}\n */\nexport var getEventValue = function(eventTags, logger) {\n  if (eventTags && eventTags.hasOwnProperty(VALUE_EVENT_METRIC_NAME)) {\n    var rawValue = eventTags[VALUE_EVENT_METRIC_NAME];\n    var parsedEventValue = parseFloat(rawValue);\n    if (isNaN(parsedEventValue)) {\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_VALUE, MODULE_NAME, rawValue));\n      return null;\n    }\n    logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_NUMERIC_VALUE, MODULE_NAME, parsedEventValue));\n    return parsedEventValue;\n  }\n  return null;\n};\n\nexport default {\n  getRevenueValue: getRevenueValue,\n  getEventValue: getEventValue,\n};\n","/**\n * Copyright 2016-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport fns from '../../utils/fns';\nimport enums from '../../utils/enums';\nimport projectConfig from '../project_config';\nimport eventTagUtils from '../../utils/event_tag_utils';\nimport attributeValidator from '../../utils/attributes_validator';\n\nvar ACTIVATE_EVENT_KEY = 'campaign_activated';\nvar CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';\nvar ENDPOINT = 'https://logx.optimizely.com/v1/events';\nvar HTTP_VERB = 'POST';\n\n/**\n * Get params which are used same in both conversion and impression events\n * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded\n * @param  {string} options.clientEngine  The client we are using: node or javascript\n * @param  {string} options.clientVersion The version of the client\n * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup\n * @param  {string} options.userId        ID for user\n * @param  {Object} options.Logger        logger\n * @return {Object}                       Common params with properties that are used in both conversion and impression events\n */\nfunction getCommonEventParams(options) {\n  var attributes = options.attributes;\n  var configObj = options.configObj;\n  var anonymize_ip = configObj.anonymizeIP;\n  var botFiltering = configObj.botFiltering;\n  if (anonymize_ip === null || anonymize_ip === undefined) {\n    anonymize_ip = false;\n  }\n\n  var visitor = {\n    snapshots: [],\n    visitor_id: options.userId,\n    attributes: [],\n  };\n\n  var commonParams = {\n    account_id: configObj.accountId,\n    project_id: configObj.projectId,\n    visitors: [visitor],\n    revision: configObj.revision,\n    client_name: options.clientEngine,\n    client_version: options.clientVersion,\n    anonymize_ip: anonymize_ip,\n    enrich_decisions: true,\n  };\n\n  // Omit attribute values that are not supported by the log endpoint.\n  Object.keys(attributes || {}).forEach(function(attributeKey) {\n    var attributeValue = attributes[attributeKey];\n    if (attributeValidator.isAttributeValid(attributeKey, attributeValue)) {\n      var attributeId = projectConfig.getAttributeId(options.configObj, attributeKey, options.logger);\n      if (attributeId) {\n        commonParams.visitors[0].attributes.push({\n          entity_id: attributeId,\n          key: attributeKey,\n          type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n          value: attributes[attributeKey],\n        });\n      }\n    }\n  });\n\n  if (typeof botFiltering === 'boolean') {\n    commonParams.visitors[0].attributes.push({\n      entity_id: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,\n      key: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,\n      type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n      value: botFiltering,\n    });\n  }\n  return commonParams;\n}\n\n/**\n * Creates object of params specific to impression events\n * @param  {Object} configObj    Object representing project configuration\n * @param  {string} experimentId ID of experiment for which impression needs to be recorded\n * @param  {string} variationId  ID for variation which would be presented to user\n * @return {Object}              Impression event params\n */\nfunction getImpressionEventParams(configObj, experimentId, variationId) {\n  var impressionEventParams = {\n    decisions: [\n      {\n        campaign_id: projectConfig.getLayerId(configObj, experimentId),\n        experiment_id: experimentId,\n        variation_id: variationId,\n      },\n    ],\n    events: [\n      {\n        entity_id: projectConfig.getLayerId(configObj, experimentId),\n        timestamp: fns.currentTimestamp(),\n        key: ACTIVATE_EVENT_KEY,\n        uuid: fns.uuid(),\n      },\n    ],\n  };\n  return impressionEventParams;\n}\n\n/**\n * Creates object of params specific to conversion events\n * @param  {Object} configObj                 Object representing project configuration\n * @param  {string} eventKey                  Event key representing the event which needs to be recorded\n * @param  {Object} eventTags                 Values associated with the event.\n * @param  {Object} logger                    Logger object\n * @return {Object}                           Conversion event params\n */\nfunction getVisitorSnapshot(configObj, eventKey, eventTags, logger) {\n  var snapshot = {\n    events: [],\n  };\n\n  var eventDict = {\n    entity_id: projectConfig.getEventId(configObj, eventKey),\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n    key: eventKey,\n  };\n\n  if (eventTags) {\n    var revenue = eventTagUtils.getRevenueValue(eventTags, logger);\n    if (revenue !== null) {\n      eventDict[enums.RESERVED_EVENT_KEYWORDS.REVENUE] = revenue;\n    }\n\n    var eventValue = eventTagUtils.getEventValue(eventTags, logger);\n    if (eventValue !== null) {\n      eventDict[enums.RESERVED_EVENT_KEYWORDS.VALUE] = eventValue;\n    }\n\n    eventDict['tags'] = eventTags;\n  }\n  snapshot.events.push(eventDict);\n\n  return snapshot;\n}\n\n/**\n * Create impression event params to be sent to the logging endpoint\n * @param  {Object} options               Object containing values needed to build impression event\n * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded\n * @param  {string} options.clientEngine  The client we are using: node or javascript\n * @param  {string} options.clientVersion The version of the client\n * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup\n * @param  {string} options.experimentId  Experiment for which impression needs to be recorded\n * @param  {string} options.userId        ID for user\n * @param  {string} options.variationId   ID for variation which would be presented to user\n * @return {Object}                       Params to be used in impression event logging endpoint call\n */\nexport var getImpressionEvent = function(options) {\n  var impressionEvent = {\n    httpVerb: HTTP_VERB,\n  };\n\n  var commonParams = getCommonEventParams(options);\n  impressionEvent.url = ENDPOINT;\n\n  var impressionEventParams = getImpressionEventParams(options.configObj, options.experimentId, options.variationId);\n  // combine Event params into visitor obj\n  commonParams.visitors[0].snapshots.push(impressionEventParams);\n\n  impressionEvent.params = commonParams;\n\n  return impressionEvent;\n};\n\n/**\n * Create conversion event params to be sent to the logging endpoint\n * @param  {Object} options                           Object containing values needed to build conversion event\n * @param  {Object} options.attributes                Object representing user attributes and values which need to be recorded\n * @param  {string} options.clientEngine              The client we are using: node or javascript\n * @param  {string} options.clientVersion             The version of the client\n * @param  {Object} options.configObj                 Object representing project configuration, including datafile information and mappings for quick lookup\n * @param  {string} options.eventKey                  Event key representing the event which needs to be recorded\n * @param  {Object} options.eventTags                 Object with event-specific tags\n * @param  {Object} options.logger                    Logger object\n * @param  {string} options.userId                    ID for user\n * @return {Object}                                   Params to be used in conversion event logging endpoint call\n */\nexport var getConversionEvent = function(options) {\n  var conversionEvent = {\n    httpVerb: HTTP_VERB,\n  };\n\n  var commonParams = getCommonEventParams(options);\n  conversionEvent.url = ENDPOINT;\n\n  var snapshot = getVisitorSnapshot(options.configObj, options.eventKey, options.eventTags, options.logger);\n\n  commonParams.visitors[0].snapshots = [snapshot];\n  conversionEvent.params = commonParams;\n\n  return conversionEvent;\n};\n\nexport default {\n  getConversionEvent: getConversionEvent,\n  getImpressionEvent: getImpressionEvent,\n};\n","/**\n * Copyright 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getLogger } from '@optimizely/js-sdk-logging';\n\nimport fns from '../../utils/fns';\nimport projectConfig from '../project_config';\nimport eventTagUtils from '../../utils/event_tag_utils';\nimport attributesValidator from'../../utils/attributes_validator';\n\nvar logger = getLogger('EVENT_BUILDER');\n\n/**\n * Creates an ImpressionEvent object from decision data\n * @param {Object} config\n * @param {Object} config.configObj\n * @param {String} config.experimentKey\n * @param {String} config.variationKey\n * @param {String} config.userId\n * @param {Object} config.userAttributes\n * @param {String} config.clientEngine\n * @param {String} config.clientVersion\n * @return {Object} an ImpressionEvent object\n */\nexport var buildImpressionEvent = function(config) {\n  var configObj = config.configObj;\n  var experimentKey = config.experimentKey;\n  var variationKey = config.variationKey;\n  var userId = config.userId;\n  var userAttributes = config.userAttributes;\n  var clientEngine = config.clientEngine;\n  var clientVersion = config.clientVersion;\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  var layerId = projectConfig.getLayerId(configObj, experimentId);\n\n  return {\n    type: 'impression',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes),\n    },\n\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering,\n    },\n\n    layer: {\n      id: layerId,\n    },\n\n    experiment: {\n      id: experimentId,\n      key: experimentKey,\n    },\n\n    variation: {\n      id: variationId,\n      key: variationKey,\n    },\n  };\n};\n\n/**\n * Creates a ConversionEvent object from track\n * @param {Object} config\n * @param {Object} config.configObj\n * @param {String} config.eventKey\n * @param {Object|undefined} config.eventTags\n * @param {String} config.userId\n * @param {Object} config.userAttributes\n * @param {String} config.clientEngine\n * @param {String} config.clientVersion\n * @return {Object} a ConversionEvent object\n */\nexport var buildConversionEvent = function(config) {\n  var configObj = config.configObj;\n  var userId = config.userId;\n  var userAttributes = config.userAttributes;\n  var clientEngine = config.clientEngine;\n  var clientVersion = config.clientVersion;\n\n  var eventKey = config.eventKey;\n  var eventTags = config.eventTags;\n  var eventId = projectConfig.getEventId(configObj, eventKey);\n\n  return {\n    type: 'conversion',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes),\n    },\n\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering,\n    },\n\n    event: {\n      id: eventId,\n      key: eventKey,\n    },\n\n    revenue: eventTagUtils.getRevenueValue(eventTags, logger),\n    value: eventTagUtils.getEventValue(eventTags, logger),\n    tags: eventTags,\n  };\n};\n\nfunction buildVisitorAttributes(configObj, attributes) {\n  var builtAttributes = [];\n  // Omit attribute values that are not supported by the log endpoint.\n  Object.keys(attributes || {}).forEach(function(attributeKey) {\n    var attributeValue = attributes[attributeKey];\n    if (attributesValidator.isAttributeValid(attributeKey, attributeValue)) {\n      var attributeId = projectConfig.getAttributeId(configObj, attributeKey, logger);\n      if (attributeId) {\n        builtAttributes.push({\n          entityId: attributeId,\n          key: attributeKey,\n          value: attributes[attributeKey],\n        });\n      }\n    }\n  });\n\n  return builtAttributes;\n}\n","/**\n * Copyright 2017, 2020 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides utility method for validating that event tags user has provided are valid\n */\nimport { sprintf } from '@optimizely/js-sdk-utils';\n\nimport { ERROR_MESSAGES } from '../enums';\n\nvar MODULE_NAME = 'EVENT_TAGS_VALIDATOR';\n\n/**\n * Validates user's provided event tags\n * @param  {Object}  event tags\n * @return {boolean} True if event tags are valid\n * @throws If event tags are not valid\n */\nexport var validate = function(eventTags) {\n  if (typeof eventTags === 'object' && !Array.isArray(eventTags) && eventTags !== null) {\n    return true;\n  } else {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_TAGS, MODULE_NAME));\n  }\n}\n\nexport default {\n  validate: validate,\n}\n","/**\n * Copyright 2017, 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf, objectValues } from '@optimizely/js-sdk-utils';\n\nimport {\n  LOG_LEVEL,\n  LOG_MESSAGES,\n  NOTIFICATION_TYPES,\n} from '../../utils/enums';\n\nvar MODULE_NAME = 'NOTIFICATION_CENTER';\n\n/**\n * NotificationCenter allows registration and triggering of callback functions using\n * notification event types defined in NOTIFICATION_TYPES of utils/enums/index.js:\n * - ACTIVATE: An impression event will be sent to Optimizely.\n * - TRACK a conversion event will be sent to Optimizely\n * @constructor\n * @param {Object} options\n * @param {Object} options.logger An instance of a logger to log messages with\n * @param {object} options.errorHandler An instance of errorHandler to handle any unexpected error\n * @returns {Object}\n */\nfunction NotificationCenter(options) {\n  this.logger = options.logger;\n  this.errorHandler = options.errorHandler;\n  this.__notificationListeners = {};\n\n  objectValues(NOTIFICATION_TYPES).forEach(\n    function(notificationTypeEnum) {\n      this.__notificationListeners[notificationTypeEnum] = [];\n    }.bind(this)\n  );\n  this.__listenerId = 1;\n}\n\n/**\n * Add a notification callback to the notification center\n * @param {string} notificationType One of the values from NOTIFICATION_TYPES in utils/enums/index.js\n * @param {Function} callback Function that will be called when the event is triggered\n * @returns {number} If the callback was successfully added, returns a listener ID which can be used\n * to remove the callback by calling removeNotificationListener. The ID is a number greater than 0.\n * If there was an error and the listener was not added, addNotificationListener returns -1. This\n * can happen if the first argument is not a valid notification type, or if the same callback\n * function was already added as a listener by a prior call to this function.\n */\nNotificationCenter.prototype.addNotificationListener = function(notificationType, callback) {\n  try {\n    var isNotificationTypeValid = objectValues(NOTIFICATION_TYPES).indexOf(notificationType) > -1;\n    if (!isNotificationTypeValid) {\n      return -1;\n    }\n\n    if (!this.__notificationListeners[notificationType]) {\n      this.__notificationListeners[notificationType] = [];\n    }\n\n    var callbackAlreadyAdded = false;\n    (this.__notificationListeners[notificationType] || []).forEach(function(listenerEntry) {\n      if (listenerEntry.callback === callback) {\n        callbackAlreadyAdded = true;\n        return false;\n      }\n    });\n    if (callbackAlreadyAdded) {\n      return -1;\n    }\n\n    this.__notificationListeners[notificationType].push({\n      id: this.__listenerId,\n      callback: callback,\n    });\n\n    var returnId = this.__listenerId;\n    this.__listenerId += 1;\n    return returnId;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return -1;\n  }\n};\n\n/**\n * Remove a previously added notification callback\n * @param {number} listenerId ID of listener to be removed\n * @returns {boolean} Returns true if the listener was found and removed, and false\n * otherwise.\n */\nNotificationCenter.prototype.removeNotificationListener = function(listenerId) {\n  try {\n    var indexToRemove;\n    var typeToRemove;\n\n    Object.keys(this.__notificationListeners).some(\n      function(notificationType) {\n        var listenersForType = this.__notificationListeners[notificationType];\n        (listenersForType || []).every(function(listenerEntry, i) {\n          if (listenerEntry.id === listenerId) {\n            indexToRemove = i;\n            typeToRemove = notificationType;\n            return false;\n          }\n          return true;\n        });\n        if (indexToRemove !== undefined && typeToRemove !== undefined) {\n          return true;\n        }\n      }.bind(this)\n    );\n\n    if (indexToRemove !== undefined && typeToRemove !== undefined) {\n      this.__notificationListeners[typeToRemove].splice(indexToRemove, 1);\n      return true;\n    }\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n  }\n  return false;\n};\n\n/**\n * Removes all previously added notification listeners, for all notification types\n */\nNotificationCenter.prototype.clearAllNotificationListeners = function() {\n  try {\n    objectValues(NOTIFICATION_TYPES).forEach(\n      function(notificationTypeEnum) {\n        this.__notificationListeners[notificationTypeEnum] = [];\n      }.bind(this)\n    );\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n  }\n};\n\n/**\n * Remove all previously added notification listeners for the argument type\n * @param {string} notificationType One of NOTIFICATION_TYPES\n */\nNotificationCenter.prototype.clearNotificationListeners = function(notificationType) {\n  try {\n    this.__notificationListeners[notificationType] = [];\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n  }\n};\n\n/**\n * Fires notifications for the argument type. All registered callbacks for this type will be\n * called. The notificationData object will be passed on to callbacks called.\n * @param {string} notificationType One of NOTIFICATION_TYPES\n * @param {Object} notificationData Will be passed to callbacks called\n */\nNotificationCenter.prototype.sendNotifications = function(notificationType, notificationData) {\n  try {\n    (this.__notificationListeners[notificationType] || []).forEach(\n      function(listenerEntry) {\n        var callback = listenerEntry.callback;\n        try {\n          callback(notificationData);\n        } catch (ex) {\n          this.logger.log(\n            LOG_LEVEL.ERROR,\n            sprintf(LOG_MESSAGES.NOTIFICATION_LISTENER_EXCEPTION, MODULE_NAME, notificationType, ex.message)\n          );\n        }\n      }.bind(this)\n    );\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n  }\n};\n\n/**\n * Create an instance of NotificationCenter\n * @param {Object} options\n * @param {Object} options.logger An instance of a logger to log messages with\n * @returns {Object} An instance of NotificationCenter\n */\nexport var createNotificationCenter = function(options) {\n  return new NotificationCenter(options);\n};\n\nexport default {\n  createNotificationCenter: createNotificationCenter,\n};\n","/****************************************************************************\n * Copyright 2017, 2020, Optimizely, Inc. and contributors                  *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\n/**\n * Provides utility method for validating that the given user profile service implementation is valid.\n */\n\nimport { sprintf } from '@optimizely/js-sdk-utils';\n\nimport { ERROR_MESSAGES } from '../enums';\nvar MODULE_NAME = 'USER_PROFILE_SERVICE_VALIDATOR';\n\n/**\n * Validates user's provided user profile service instance\n * @param  {Object}  userProfileServiceInstance\n * @return {boolean} True if the instance is valid\n * @throws If the instance is not valid\n */\nexport var validate = function(userProfileServiceInstance) {\n  if (typeof userProfileServiceInstance.lookup !== 'function') {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME, \"Missing function 'lookup'\"));\n  } else if (typeof userProfileServiceInstance.save !== 'function') {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME, \"Missing function 'save'\"));\n  }\n  return true;\n};\n\nexport default {\n  validate: validate,\n};\n","/**\n * Copyright 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFeatureExperiment } from '../project_config';\n\n// Get Experiment Ids which are part of rollouts\nfunction getRolloutExperimentIds(rollouts) {\n  return (rollouts || []).reduce(function(experimentIds, rollout) {\n    rollout.experiments.forEach(function(e) {\n      experimentIds[e.id] = true;\n    });\n    return experimentIds;\n  }, {});\n}\n\n// Gets Map of all experiments except rollouts\nfunction getExperimentsMap(configObj) {\n  var rolloutExperimentIds = getRolloutExperimentIds(configObj.rollouts);\n  var featureVariablesMap = (configObj.featureFlags || []).reduce(function(resultMap, feature) {\n    resultMap[feature.id] = feature.variables;\n    return resultMap;\n  }, {});\n  return (configObj.experiments || []).reduce(function(experiments, experiment) {\n    // skip experiments that are part of a rollout\n    if (!rolloutExperimentIds[experiment.id]) {\n      experiments[experiment.key] = {\n        id: experiment.id,\n        key: experiment.key,\n        variationsMap: (experiment.variations || []).reduce(function(variations, variation) {\n          variations[variation.key] = {\n            id: variation.id,\n            key: variation.key,\n            variablesMap: getMergedVariablesMap(configObj, variation, experiment.id, featureVariablesMap),\n          };\n          if (isFeatureExperiment(configObj, experiment.id)) {\n            variations[variation.key].featureEnabled = variation.featureEnabled;\n          }\n          return variations;\n        }, {}),\n      };\n    }\n    return experiments;\n  }, {});\n}\n\n// Merges feature key and type from feature variables to variation variables.\nfunction getMergedVariablesMap(configObj, variation, experimentId, featureVariablesMap) {\n  var featureId = configObj.experimentFeatureMap[experimentId];\n  var variablesObject = {};\n  if (featureId) {\n    var experimentFeatureVariables = featureVariablesMap[featureId];\n    // Temporary variation variables map to get values to merge.\n    var tempVariablesIdMap = (variation.variables || []).reduce(function(variablesMap, variable) {\n      variablesMap[variable.id] = {\n        id: variable.id,\n        value: variable.value,\n      };\n      return variablesMap;\n    }, {});\n    variablesObject = (experimentFeatureVariables || []).reduce(function(variablesMap, featureVariable) {\n      var variationVariable = tempVariablesIdMap[featureVariable.id];\n      var variableValue =\n        variation.featureEnabled && variationVariable ? variationVariable.value : featureVariable.defaultValue;\n      variablesMap[featureVariable.key] = {\n        id: featureVariable.id,\n        key: featureVariable.key,\n        type: featureVariable.type,\n        value: variableValue,\n      };\n      return variablesMap;\n    }, {});\n  }\n  return variablesObject;\n}\n\n// Gets map of all experiments\nfunction getFeaturesMap(configObj, allExperiments) {\n  return (configObj.featureFlags || []).reduce(function(features, feature) {\n    features[feature.key] = {\n      id: feature.id,\n      key: feature.key,\n      experimentsMap: (feature.experimentIds || []).reduce(function(experiments, experimentId) {\n        var experimentKey = configObj.experimentIdMap[experimentId].key;\n        experiments[experimentKey] = allExperiments[experimentKey];\n        return experiments;\n      }, {}),\n      variablesMap: (feature.variables || []).reduce(function(variables, variable) {\n        variables[variable.key] = {\n          id: variable.id,\n          key: variable.key,\n          type: variable.type,\n          value: variable.defaultValue,\n        };\n        return variables;\n      }, {}),\n    };\n    return features;\n  }, {});\n}\n\nexport var getOptimizelyConfig = function(configObj) {\n  // Fetch all feature variables from feature flags to merge them with variation variables\n  var experimentsMap = getExperimentsMap(configObj);\n  return {\n    experimentsMap: experimentsMap,\n    featuresMap: getFeaturesMap(configObj, experimentsMap),\n    revision: configObj.revision,\n  };\n};\n","/**\n * Copyright 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { sprintf } from '@optimizely/js-sdk-utils';\nimport { getLogger } from '@optimizely/js-sdk-logging';\nimport { HttpPollingDatafileManager } from '@optimizely/js-sdk-datafile-manager';\n\nimport fns from '../../utils/fns';\nimport { ERROR_MESSAGES } from '../../utils/enums';\nimport projectConfig from '../../core/project_config';\nimport { getOptimizelyConfig } from '../optimizely_config';\nimport configValidator from '../../utils/config_validator';\n\nvar logger = getLogger();\nvar MODULE_NAME = 'PROJECT_CONFIG_MANAGER';\n\n/**\n * Return an error message derived from a thrown value. If the thrown value is\n * an error, return the error's message property. Otherwise, return a default\n * provided by the second argument.\n * @param {*} maybeError\n * @param {String=} defaultMessage\n * @return {String}\n */\nfunction getErrorMessage(maybeError, defaultMessage) {\n  if (maybeError instanceof Error) {\n    return maybeError.message;\n  }\n  return defaultMessage || 'Unknown error';\n}\n\n/**\n * ProjectConfigManager provides project config objects via its methods\n * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is\n * responsible for parsing and validating datafiles, and converting datafile\n * JSON objects into project config objects.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @param {Object=}        config.datafileOptions\n * @param {Object=}        config.jsonSchemaValidator\n * @param {string=}        config.sdkKey\n */\nexport function ProjectConfigManager(config) {\n  try {\n    this.__initialize(config);\n  } catch (ex) {\n    logger.error(ex);\n    this.__updateListeners = [];\n    this.__configObj = null;\n    this.__optimizelyConfigObj = null;\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(ex, 'Error in initialize'),\n    });\n  }\n}\n\n/**\n * Initialize internal properties including __updateListeners, __configObj, and\n * __readyPromise, using the argument config. Create and subscribe to a datafile\n * manager if appropriate.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @param {Object=}        config.datafileOptions\n * @param {Object=}        config.jsonSchemaValidator\n * @param {string=}        config.sdkKey\n */\nProjectConfigManager.prototype.__initialize = function(config) {\n  this.__updateListeners = [];\n  this.jsonSchemaValidator = config.jsonSchemaValidator;\n\n  if (!config.datafile && !config.sdkKey) {\n    this.__configObj = null;\n    var datafileAndSdkKeyMissingError = new Error(sprintf(ERROR_MESSAGES.DATAFILE_AND_SDK_KEY_MISSING, MODULE_NAME));\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(datafileAndSdkKeyMissingError),\n    });\n    logger.error(datafileAndSdkKeyMissingError);\n    return;\n  }\n\n  var initialDatafile = this.__getDatafileFromConfig(config);\n  var projectConfigCreationEx;\n  if (initialDatafile) {\n    try {\n      this.__configObj = projectConfig.tryCreatingProjectConfig({\n        datafile: initialDatafile,\n        jsonSchemaValidator: this.jsonSchemaValidator,\n        logger: logger,\n      });\n      this.__optimizelyConfigObj = getOptimizelyConfig(this.__configObj);\n    } catch (ex) {\n      logger.error(ex);\n      projectConfigCreationEx = ex;\n      this.__configObj = null;\n    }\n  } else {\n    this.__configObj = null;\n  }\n\n  if (config.sdkKey) {\n    var datafileManagerConfig = {\n      sdkKey: config.sdkKey,\n    };\n    if (this.__validateDatafileOptions(config.datafileOptions)) {\n      fns.assign(datafileManagerConfig, config.datafileOptions);\n    }\n    if (initialDatafile && this.__configObj) {\n      datafileManagerConfig.datafile = initialDatafile;\n    }\n    this.datafileManager = new HttpPollingDatafileManager(datafileManagerConfig);\n    this.datafileManager.start();\n    this.__readyPromise = this.datafileManager\n      .onReady()\n      .then(this.__onDatafileManagerReadyFulfill.bind(this), this.__onDatafileManagerReadyReject.bind(this));\n    this.datafileManager.on('update', this.__onDatafileManagerUpdate.bind(this));\n  } else if (this.__configObj) {\n    this.__readyPromise = Promise.resolve({\n      success: true,\n    });\n  } else {\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(projectConfigCreationEx, 'Invalid datafile'),\n    });\n  }\n};\n\n/**\n * Respond to datafile manager's onReady promise becoming fulfilled.\n * If there are validation or parse failures using the datafile provided by\n * DatafileManager, ProjectConfigManager's ready promise is resolved with an\n * unsuccessful result. Otherwise, ProjectConfigManager updates its own project\n * config object from the new datafile, and its ready promise is resolved with a\n * successful result.\n */\nProjectConfigManager.prototype.__onDatafileManagerReadyFulfill = function() {\n  var newDatafile = this.datafileManager.get();\n  var newConfigObj;\n  try {\n    newConfigObj = projectConfig.tryCreatingProjectConfig({\n      datafile: newDatafile,\n      jsonSchemaValidator: this.jsonSchemaValidator,\n      logger: logger,\n    });\n  } catch (ex) {\n    logger.error(ex);\n    return {\n      success: false,\n      reason: getErrorMessage(ex),\n    };\n  }\n  this.__handleNewConfigObj(newConfigObj);\n  return {\n    success: true,\n  };\n};\n\n/**\n * Respond to datafile manager's onReady promise becoming rejected.\n * When DatafileManager's onReady promise is rejected, there is no possibility\n * of obtaining a datafile. In this case, ProjectConfigManager's ready promise\n * is fulfilled with an unsuccessful result.\n * @param {Error} err\n */\nProjectConfigManager.prototype.__onDatafileManagerReadyReject = function(err) {\n  return {\n    success: false,\n    reason: getErrorMessage(err, 'Failed to become ready'),\n  };\n};\n\n/**\n * Respond to datafile manager's update event. Attempt to update own config\n * object using latest datafile from datafile manager. Call own registered\n * update listeners if successful\n */\nProjectConfigManager.prototype.__onDatafileManagerUpdate = function() {\n  var newDatafile = this.datafileManager.get();\n  var newConfigObj;\n  try {\n    newConfigObj = projectConfig.tryCreatingProjectConfig({\n      datafile: newDatafile,\n      jsonSchemaValidator: this.jsonSchemaValidator,\n      logger: logger,\n    });\n  } catch (ex) {\n    logger.error(ex);\n  }\n  if (newConfigObj) {\n    this.__handleNewConfigObj(newConfigObj);\n  }\n};\n\n/**\n * If the argument config contains a valid datafile object or string,\n * return a datafile object based on that provided datafile, otherwise\n * return null.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @return {Object|null}\n */\nProjectConfigManager.prototype.__getDatafileFromConfig = function(config) {\n  var initialDatafile = null;\n  try {\n    if (config.datafile) {\n      configValidator.validateDatafile(config.datafile);\n      if (typeof config.datafile === 'string' || config.datafile instanceof String) {\n        initialDatafile = JSON.parse(config.datafile);\n      } else {\n        initialDatafile = config.datafile;\n      }\n    }\n  } catch (ex) {\n    logger.error(ex);\n  }\n  return initialDatafile;\n};\n\n/**\n * Validate user-provided datafileOptions. It should be an object or undefined.\n * @param {*} datafileOptions\n * @returns {boolean}\n */\nProjectConfigManager.prototype.__validateDatafileOptions = function(datafileOptions) {\n  if (typeof datafileOptions === 'undefined') {\n    return true;\n  }\n\n  if (typeof datafileOptions === 'object') {\n    return datafileOptions !== null;\n  }\n\n  return false;\n};\n\n/**\n * Update internal project config object to be argument object when the argument\n * object has a different revision than the current internal project config\n * object. If the internal object is updated, call update listeners.\n * @param {Object} newConfigObj\n */\nProjectConfigManager.prototype.__handleNewConfigObj = function(newConfigObj) {\n  var oldConfigObj = this.__configObj;\n\n  var oldRevision = oldConfigObj ? oldConfigObj.revision : 'null';\n  if (oldRevision === newConfigObj.revision) {\n    return;\n  }\n\n  this.__configObj = newConfigObj;\n  this.__optimizelyConfigObj = getOptimizelyConfig(newConfigObj);\n\n  this.__updateListeners.forEach(function(listener) {\n    listener(newConfigObj);\n  });\n};\n\n/**\n * Returns the current project config object, or null if no project config object\n * is available\n * @return {Object|null}\n */\nProjectConfigManager.prototype.getConfig = function() {\n  return this.__configObj;\n};\n\n/**\n * Returns the optimizely config object\n * @return {Object}\n */\nProjectConfigManager.prototype.getOptimizelyConfig = function() {\n  return this.__optimizelyConfigObj;\n};\n\n/**\n * Returns a Promise that fulfills when this ProjectConfigManager is ready to\n * use (meaning it has a valid project config object), or has failed to become\n * ready.\n *\n * Failure can be caused by the following:\n * - At least one of sdkKey or datafile is not provided in the constructor argument\n * - The provided datafile was invalid\n * - The datafile provided by the datafile manager was invalid\n * - The datafile manager failed to fetch a datafile\n *\n * The returned Promise is fulfilled with a result object containing these\n * properties:\n *    - success (boolean): True if this instance is ready to use with a valid\n *                         project config object, or false if it failed to\n *                         become ready\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message.\n * @return {Promise}\n */\nProjectConfigManager.prototype.onReady = function() {\n  return this.__readyPromise;\n};\n\n/**\n * Add a listener for project config updates. The listener will be called\n * whenever this instance has a new project config object available.\n * Returns a dispose function that removes the subscription\n * @param {Function} listener\n * @return {Function}\n */\nProjectConfigManager.prototype.onUpdate = function(listener) {\n  this.__updateListeners.push(listener);\n  return function() {\n    var index = this.__updateListeners.indexOf(listener);\n    if (index > -1) {\n      this.__updateListeners.splice(index, 1);\n    }\n  }.bind(this);\n};\n\n/**\n * Stop the internal datafile manager and remove all update listeners\n */\nProjectConfigManager.prototype.stop = function() {\n  if (this.datafileManager) {\n    this.datafileManager.stop();\n  }\n  this.__updateListeners = [];\n};\n\nexport default {\n  ProjectConfigManager: ProjectConfigManager,\n};\n","/****************************************************************************\n * Copyright 2016-2020, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { sprintf, objectValues } from '@optimizely/js-sdk-utils';\nimport * as eventProcessor from '@optimizely/js-sdk-event-processor';\n\nimport fns from '../utils/fns'\nimport { validate } from '../utils/attributes_validator';\nimport decisionService from '../core/decision_service';\nimport enums from '../utils/enums';\nimport { getImpressionEvent, getConversionEvent } from '../core/event_builder/index.js';\nimport { buildConversionEvent, buildImpressionEvent } from '../core/event_builder/event_helpers';\nimport eventTagsValidator from '../utils/event_tags_validator';\nimport notificationCenter from '../core/notification_center';\nimport projectConfig from '../core/project_config';\nimport userProfileServiceValidator from '../utils/user_profile_service_validator';\nimport stringValidator from '../utils/string_value_validator';\nimport projectConfigManager from '../core/project_config/project_config_manager';\n\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'OPTIMIZELY';\nvar DECISION_SOURCES = enums.DECISION_SOURCES;\nvar FEATURE_VARIABLE_TYPES = enums.FEATURE_VARIABLE_TYPES;\nvar DECISION_NOTIFICATION_TYPES = enums.DECISION_NOTIFICATION_TYPES;\nvar NOTIFICATION_TYPES = enums.NOTIFICATION_TYPES;\n\nvar DEFAULT_ONREADY_TIMEOUT = 30000;\n\n/**\n * The Optimizely class\n * @param {Object} config\n * @param {string} config.clientEngine\n * @param {string} config.clientVersion\n * @param {Object} config.datafile\n * @param {Object} config.errorHandler\n * @param {Object} config.eventDispatcher\n * @param {Object} config.logger\n * @param {Object} config.userProfileService\n * @param {Object} config.eventBatchSize\n * @param {Object} config.eventFlushInterval\n */\nfunction Optimizely(config) {\n  var clientEngine = config.clientEngine;\n  if (enums.VALID_CLIENT_ENGINES.indexOf(clientEngine) === -1) {\n    config.logger.log(\n      LOG_LEVEL.INFO,\n      sprintf(LOG_MESSAGES.INVALID_CLIENT_ENGINE, MODULE_NAME, clientEngine)\n    );\n    clientEngine = enums.NODE_CLIENT_ENGINE;\n  }\n\n  this.clientEngine = clientEngine;\n  this.clientVersion = config.clientVersion || enums.NODE_CLIENT_VERSION;\n  this.errorHandler = config.errorHandler;\n  this.eventDispatcher = config.eventDispatcher;\n  this.__isOptimizelyConfigValid = config.isValidInstance;\n  this.logger = config.logger;\n\n  this.projectConfigManager = new projectConfigManager.ProjectConfigManager({\n    datafile: config.datafile,\n    datafileOptions: config.datafileOptions,\n    jsonSchemaValidator: config.jsonSchemaValidator,\n    sdkKey: config.sdkKey,\n  });\n\n  this.__disposeOnUpdate = this.projectConfigManager.onUpdate(\n    function(configObj) {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        sprintf(LOG_MESSAGES.UPDATED_OPTIMIZELY_CONFIG, MODULE_NAME, configObj.revision, configObj.projectId)\n      );\n      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE);\n    }.bind(this)\n  );\n\n  var projectConfigManagerReadyPromise = this.projectConfigManager.onReady();\n\n  var userProfileService = null;\n  if (config.userProfileService) {\n    try {\n      if (userProfileServiceValidator.validate(config.userProfileService)) {\n        userProfileService = config.userProfileService;\n        this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VALID_USER_PROFILE_SERVICE, MODULE_NAME));\n      }\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.WARNING, ex.message);\n    }\n  }\n\n  this.decisionService = decisionService.createDecisionService({\n    userProfileService: userProfileService,\n    logger: this.logger,\n    UNSTABLE_conditionEvaluators: config.UNSTABLE_conditionEvaluators,\n  });\n\n  this.notificationCenter = notificationCenter.createNotificationCenter({\n    logger: this.logger,\n    errorHandler: this.errorHandler,\n  });\n\n  this.eventProcessor = new eventProcessor.LogTierV1EventProcessor({\n    dispatcher: this.eventDispatcher,\n    flushInterval: config.eventFlushInterval,\n    batchSize: config.eventBatchSize,\n    maxQueueSize: config.eventMaxQueueSize,\n    notificationCenter: this.notificationCenter,\n  });\n\n  var eventProcessorStartedPromise = this.eventProcessor.start();\n\n  this.__readyPromise = Promise.all([projectConfigManagerReadyPromise, eventProcessorStartedPromise]).then(function(promiseResults) {\n    // Only return status from project config promise because event processor promise does not return any status.\n    return promiseResults[0];\n  })\n\n  this.__readyTimeouts = {};\n  this.__nextReadyTimeoutId = 0;\n}\n\n/**\n * Returns a truthy value if this instance currently has a valid project config\n * object, and the initial configuration object that was passed into the\n * constructor was also valid.\n * @return {*}\n */\nOptimizely.prototype.__isValidInstance = function() {\n  return this.__isOptimizelyConfigValid && this.projectConfigManager.getConfig();\n};\n\n/**\n * Buckets visitor and sends impression event to Optimizely.\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} variation key\n */\nOptimizely.prototype.activate = function(experimentKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'activate'));\n      return null;\n    }\n\n    if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {\n      return this.__notActivatingExperiment(experimentKey, userId);\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n\n    try {\n      var variationKey = this.getVariation(experimentKey, userId, attributes);\n      if (variationKey === null) {\n        return this.__notActivatingExperiment(experimentKey, userId);\n      }\n\n      // If experiment is not set to 'Running' status, log accordingly and return variation key\n      if (!projectConfig.isRunning(configObj, experimentKey)) {\n        var shouldNotDispatchActivateLogMessage = sprintf(\n          LOG_MESSAGES.SHOULD_NOT_DISPATCH_ACTIVATE,\n          MODULE_NAME,\n          experimentKey\n        );\n        this.logger.log(LOG_LEVEL.DEBUG, shouldNotDispatchActivateLogMessage);\n        return variationKey;\n      }\n\n      this._sendImpressionEvent(experimentKey, variationKey, userId, attributes);\n\n      return variationKey;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      var failedActivationLogMessage = sprintf(\n        LOG_MESSAGES.NOT_ACTIVATING_USER,\n        MODULE_NAME,\n        userId,\n        experimentKey\n      );\n      this.logger.log(LOG_LEVEL.INFO, failedActivationLogMessage);\n      this.errorHandler.handleError(ex);\n      return null;\n    }\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Create an impression event and call the event dispatcher's dispatch method to\n * send this event to Optimizely. Then use the notification center to trigger\n * any notification listeners for the ACTIVATE notification type.\n * @param {string} experimentKey  Key of experiment that was activated\n * @param {string} variationKey   Key of variation shown in experiment that was activated\n * @param {string} userId         ID of user to whom the variation was shown\n * @param {Object} attributes     Optional user attributes\n */\nOptimizely.prototype._sendImpressionEvent = function(experimentKey, variationKey, userId, attributes) {\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return;\n  }\n\n  var impressionEvent = buildImpressionEvent({\n    experimentKey: experimentKey,\n    variationKey: variationKey,\n    userId: userId,\n    userAttributes: attributes,\n    clientEngine: this.clientEngine,\n    clientVersion: this.clientVersion,\n    configObj: configObj,\n  });\n  // TODO is it okay to not pass a projectConfig as second argument\n  this.eventProcessor.process(impressionEvent);\n  this.__emitNotificationCenterActivate(experimentKey, variationKey, userId, attributes);\n};\n\n/**\n * Emit the ACTIVATE notification on the notificationCenter\n * @param {string} experimentKey  Key of experiment that was activated\n * @param {string} variationKey   Key of variation shown in experiment that was activated\n * @param {string} userId         ID of user to whom the variation was shown\n * @param {Object} attributes     Optional user attributes\n */\nOptimizely.prototype.__emitNotificationCenterActivate = function(experimentKey, variationKey, userId, attributes) {\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return;\n  }\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  var impressionEventOptions = {\n    attributes: attributes,\n    clientEngine: this.clientEngine,\n    clientVersion: this.clientVersion,\n    configObj: configObj,\n    experimentId: experimentId,\n    userId: userId,\n    variationId: variationId,\n    logger: this.logger,\n  };\n  var impressionEvent = getImpressionEvent(impressionEventOptions);\n  var experiment = configObj.experimentKeyMap[experimentKey];\n  var variation;\n  if (experiment && experiment.variationKeyMap) {\n    variation = experiment.variationKeyMap[variationKey];\n  }\n  this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.ACTIVATE, {\n    experiment: experiment,\n    userId: userId,\n    attributes: attributes,\n    variation: variation,\n    logEvent: impressionEvent,\n  });\n};\n\n/**\n * Sends conversion event to Optimizely.\n * @param  {string} eventKey\n * @param  {string} userId\n * @param  {string} attributes\n * @param  {Object} eventTags Values associated with the event.\n */\nOptimizely.prototype.track = function(eventKey, userId, attributes, eventTags) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'track'));\n      return;\n    }\n\n    if (!this.__validateInputs({ user_id: userId, event_key: eventKey }, attributes, eventTags)) {\n      return;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return;\n    }\n\n    if (!projectConfig.eventWithKeyExists(configObj, eventKey)) {\n      this.logger.log(\n        LOG_LEVEL.WARNING,\n        sprintf(enums.LOG_MESSAGES.EVENT_KEY_NOT_FOUND, MODULE_NAME, eventKey)\n      );\n      this.logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME, userId));\n      return;\n    }\n\n    // remove null values from eventTags\n    eventTags = this.__filterEmptyValues(eventTags);\n    var conversionEvent = buildConversionEvent({\n      eventKey: eventKey,\n      eventTags: eventTags,\n      userId: userId,\n      userAttributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj,\n    });\n    this.logger.log(LOG_LEVEL.INFO, sprintf(enums.LOG_MESSAGES.TRACK_EVENT, MODULE_NAME, eventKey, userId));\n    // TODO is it okay to not pass a projectConfig as second argument\n    this.eventProcessor.process(conversionEvent);\n    this.__emitNotificationCenterTrack(eventKey, userId, attributes, eventTags);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    var failedTrackLogMessage = sprintf(LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME, userId);\n    this.logger.log(LOG_LEVEL.ERROR, failedTrackLogMessage);\n  }\n};\n\n/**\n * Send TRACK event to notificationCenter\n * @param  {string} eventKey\n * @param  {string} userId\n * @param  {string} attributes\n * @param  {Object} eventTags Values associated with the event.\n */\nOptimizely.prototype.__emitNotificationCenterTrack = function(eventKey, userId, attributes, eventTags) {\n  try {\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return;\n    }\n\n    var conversionEventOptions = {\n      attributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj,\n      eventKey: eventKey,\n      eventTags: eventTags,\n      logger: this.logger,\n      userId: userId,\n    };\n    var conversionEvent = getConversionEvent(conversionEventOptions);\n\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.TRACK, {\n      eventKey: eventKey,\n      userId: userId,\n      attributes: attributes,\n      eventTags: eventTags,\n      logEvent: conversionEvent,\n    });\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n  }\n};\n\n/**\n * Gets variation where visitor will be bucketed.\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} variation key\n */\nOptimizely.prototype.getVariation = function(experimentKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getVariation'));\n      return null;\n    }\n\n    try {\n      if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {\n        return null;\n      }\n\n      var configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return null;\n      }\n\n      var experiment = configObj.experimentKeyMap[experimentKey];\n      if (!experiment) {\n        this.logger.log(\n          LOG_LEVEL.DEBUG,\n          sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey)\n        );\n        return null;\n      }\n\n      var variationKey = this.decisionService.getVariation(configObj, experimentKey, userId, attributes);\n      var decisionNotificationType = projectConfig.isFeatureExperiment(configObj, experiment.id)\n        ? DECISION_NOTIFICATION_TYPES.FEATURE_TEST\n        : DECISION_NOTIFICATION_TYPES.AB_TEST;\n\n      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n        type: decisionNotificationType,\n        userId: userId,\n        attributes: attributes || {},\n        decisionInfo: {\n          experimentKey: experimentKey,\n          variationKey: variationKey,\n        },\n      });\n\n      return variationKey;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      this.errorHandler.handleError(ex);\n      return null;\n    }\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Force a user into a variation for a given experiment.\n * @param {string} experimentKey\n * @param {string} userId\n * @param {string|null} variationKey user will be forced into. If null, then clear the existing experiment-to-variation mapping.\n * @return boolean A boolean value that indicates if the set completed successfully.\n */\nOptimizely.prototype.setForcedVariation = function(experimentKey, userId, variationKey) {\n  if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {\n    return false;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return false;\n  }\n\n  try {\n    return this.decisionService.setForcedVariation(configObj, experimentKey, userId, variationKey);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return false;\n  }\n};\n\n/**\n * Gets the forced variation for a given user and experiment.\n * @param  {string} experimentKey\n * @param  {string} userId\n * @return {string|null} The forced variation key.\n */\nOptimizely.prototype.getForcedVariation = function(experimentKey, userId) {\n  if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {\n    return null;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return null;\n  }\n\n  try {\n    return this.decisionService.getForcedVariation(configObj, experimentKey, userId);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return null;\n  }\n};\n\n/**\n * Validate string inputs, user attributes and event tags.\n * @param  {string}  stringInputs   Map of string keys and associated values\n * @param  {Object}  userAttributes Optional parameter for user's attributes\n * @param  {Object}  eventTags      Optional parameter for event tags\n * @return {boolean} True if inputs are valid\n *\n */\nOptimizely.prototype.__validateInputs = function(stringInputs, userAttributes, eventTags) {\n  try {\n    // Null, undefined or non-string user Id is invalid.\n    if (stringInputs.hasOwnProperty('user_id')) {\n      var userId = stringInputs.user_id;\n      if (typeof userId !== 'string' || userId === null || userId === 'undefined') {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, 'user_id'));\n      }\n\n      delete stringInputs.user_id;\n    }\n\n    var inputKeys = Object.keys(stringInputs);\n    for (var index = 0; index < inputKeys.length; index++) {\n      var key = inputKeys[index];\n      if (!stringValidator.validate(stringInputs[key])) {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, key));\n      }\n    }\n    if (userAttributes) {\n      validate(userAttributes);\n    }\n    if (eventTags) {\n      eventTagsValidator.validate(eventTags);\n    }\n    return true;\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return false;\n  }\n};\n\n/**\n * Shows failed activation log message and returns null when user is not activated in experiment\n * @param  experimentKey\n * @param  userId\n * @return {null}\n */\nOptimizely.prototype.__notActivatingExperiment = function(experimentKey, userId) {\n  var failedActivationLogMessage = sprintf(\n    LOG_MESSAGES.NOT_ACTIVATING_USER,\n    MODULE_NAME,\n    userId,\n    experimentKey\n  );\n  this.logger.log(LOG_LEVEL.INFO, failedActivationLogMessage);\n  return null;\n};\n\n/**\n * Filters out attributes/eventTags with null or undefined values\n * @param  map\n * @returns {Object} map\n */\nOptimizely.prototype.__filterEmptyValues = function(map) {\n  for (var key in map) {\n    if (map.hasOwnProperty(key) && (map[key] === null || map[key] === undefined)) {\n      delete map[key];\n    }\n  }\n  return map;\n};\n\n/**\n * Returns true if the feature is enabled for the given user.\n * @param {string} featureKey   Key of feature which will be checked\n * @param {string} userId       ID of user which will be checked\n * @param {Object} attributes   Optional user attributes\n * @return {boolean}            True if the feature is enabled for the user, false otherwise\n */\nOptimizely.prototype.isFeatureEnabled = function(featureKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'isFeatureEnabled')\n      );\n      return false;\n    }\n\n    if (!this.__validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {\n      return false;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return false;\n    }\n\n    var feature = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n    if (!feature) {\n      return false;\n    }\n\n    var featureEnabled = false;\n    var decision = this.decisionService.getVariationForFeature(configObj, feature, userId, attributes);\n    var variation = decision.variation;\n    var sourceInfo = {};\n\n    if (variation) {\n      featureEnabled = variation.featureEnabled;\n      if (decision.decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n        sourceInfo = {\n          experimentKey: decision.experiment.key,\n          variationKey: decision.variation.key,\n        };\n        // got a variation from the exp, so we track the impression\n        this._sendImpressionEvent(decision.experiment.key, decision.variation.key, userId, attributes);\n      }\n    }\n\n    if (featureEnabled === true) {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        sprintf(LOG_MESSAGES.FEATURE_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId)\n      );\n    } else {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        sprintf(LOG_MESSAGES.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId)\n      );\n      featureEnabled = false;\n    }\n\n    var featureInfo = {\n      featureKey: featureKey,\n      featureEnabled: featureEnabled,\n      source: decision.decisionSource,\n      sourceInfo: sourceInfo,\n    };\n\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n      type: DECISION_NOTIFICATION_TYPES.FEATURE,\n      userId: userId,\n      attributes: attributes || {},\n      decisionInfo: featureInfo,\n    });\n\n    return featureEnabled;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return false;\n  }\n};\n\n/**\n * Returns an Array containing the keys of all features in the project that are\n * enabled for the given user.\n * @param {string} userId\n * @param {Object} attributes\n * @return {Array} Array of feature keys (strings)\n */\nOptimizely.prototype.getEnabledFeatures = function(userId, attributes) {\n  try {\n    var enabledFeatures = [];\n    if (!this.__isValidInstance()) {\n      this.logger.log(\n        LOG_LEVEL.ERROR,\n        sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getEnabledFeatures')\n      );\n      return enabledFeatures;\n    }\n\n    if (!this.__validateInputs({ user_id: userId })) {\n      return enabledFeatures;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return enabledFeatures;\n    }\n\n    objectValues(configObj.featureKeyMap).forEach(\n      function(feature) {\n        if (this.isFeatureEnabled(feature.key, userId, attributes)) {\n          enabledFeatures.push(feature.key);\n        }\n      }.bind(this)\n    );\n\n    return enabledFeatures;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return [];\n  }\n};\n\n/**\n * Returns dynamically-typed value of the variable attached to the given\n * feature flag. Returns null if the feature key or variable key is invalid.\n *\n * @param {string} featureKey           Key of the feature whose variable's\n *                                      value is being accessed\n * @param {string} variableKey          Key of the variable whose value is\n *                                      being accessed\n * @param {string} userId               ID for the user\n * @param {Object} attributes           Optional user attributes\n * @return {string|boolean|number|null} Value of the variable cast to the appropriate\n *                                      type, or null if the feature key is invalid or\n *                                      the variable key is invalid\n */\n\nOptimizely.prototype.getFeatureVariable = function(featureKey, variableKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariable'));\n      return null;\n    }\n    return this._getFeatureVariableForType(featureKey, variableKey, null, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Helper method to get the value for a variable of a certain type attached to a\n * feature flag. Returns null if the feature key is invalid, the variable key is\n * invalid, the given variable type does not match the variable's actual type,\n * or the variable value cannot be cast to the required type. If the given variable\n * type is null, the value of the variable cast to the appropriate type is returned.\n *\n * @param {string} featureKey           Key of the feature whose variable's value is\n *                                      being accessed\n * @param {string} variableKey          Key of the variable whose value is being\n *                                      accessed\n * @param {string|null} variableType    Type of the variable whose value is being\n *                                      accessed (must be one of FEATURE_VARIABLE_TYPES\n *                                      in lib/utils/enums/index.js), or null to return the\n *                                      value of the variable cast to the appropriate type\n * @param {string} userId               ID for the user\n * @param {Object} attributes           Optional user attributes\n * @return {string|boolean|number|null} Value of the variable cast to the appropriate\n *                                      type, or null if the feature key is invalid, the\n *                                      variable key is invalid, or there is a mismatch\n *                                      with the type of the variable\n */\nOptimizely.prototype._getFeatureVariableForType = function(featureKey, variableKey, variableType, userId, attributes) {\n  if (!this.__validateInputs({ feature_key: featureKey, variable_key: variableKey, user_id: userId }, attributes)) {\n    return null;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return null;\n  }\n\n  var featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n  if (!featureFlag) {\n    return null;\n  }\n\n  var variable = projectConfig.getVariableForFeature(configObj, featureKey, variableKey, this.logger);\n  if (!variable) {\n    return null;\n  }\n\n  if (variableType && variable.type !== variableType) {\n    this.logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.VARIABLE_REQUESTED_WITH_WRONG_TYPE, MODULE_NAME, variableType, variable.type)\n    );\n    return null;\n  }\n\n  var decision = this.decisionService.getVariationForFeature(configObj, featureFlag, userId, attributes);\n  var featureEnabled = decision.variation !== null ? decision.variation.featureEnabled : false;\n  var variableValue = this._getFeatureVariableValueFromVariation(featureKey, featureEnabled, decision.variation, variable, userId);\n\n  var sourceInfo = {};\n  if (decision.decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n    sourceInfo = {\n      experimentKey: decision.experiment.key,\n      variationKey: decision.variation.key,\n    };\n  }\n\n  this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n    type: DECISION_NOTIFICATION_TYPES.FEATURE_VARIABLE,\n    userId: userId,\n    attributes: attributes || {},\n    decisionInfo: {\n      featureKey: featureKey,\n      featureEnabled: featureEnabled,\n      source: decision.decisionSource,\n      variableKey: variableKey,\n      variableValue: variableValue,\n      variableType: variable.type,\n      sourceInfo: sourceInfo,\n    },\n  });\n  return variableValue;\n};\n\n/**\n * Helper method to get the non type-casted value for a variable attached to a\n * feature flag. Returns appropriate variable value depending on whether there\n * was a matching variation, feature was enabled or not or varible was part of the\n * available variation or not. Also logs the appropriate message explaining how it\n * evaluated the value of the variable.\n *\n * @param {string} featureKey           Key of the feature whose variable's value is\n *                                      being accessed\n * @param {boolean} featureEnabled      Boolean indicating if feature is enabled or not\n * @param {object} variation            variation returned by decision service\n * @param {object} variable             varible whose value is being evaluated\n * @param {string} userId               ID for the user\n * @return {string|null}                String value of the variable or null if the config Obj\n *                                      is null\n */\nOptimizely.prototype._getFeatureVariableValueFromVariation = function(featureKey, featureEnabled, variation, variable, userId) {\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return null;\n  }\n\n  var variableValue = variable.defaultValue;\n  if (variation !== null) {\n    var value = projectConfig.getVariableValueForVariation(configObj, variable, variation, this.logger);\n    if (value !== null) {\n      if (featureEnabled) {\n        variableValue = value;\n        this.logger.log(\n          LOG_LEVEL.INFO,\n          sprintf(\n            LOG_MESSAGES.USER_RECEIVED_VARIABLE_VALUE,\n            MODULE_NAME,\n            variableValue,\n            variable.key,\n            featureKey\n          )\n        );\n      } else {\n        this.logger.log(\n          LOG_LEVEL.INFO,\n          sprintf(\n            LOG_MESSAGES.FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE,\n            MODULE_NAME,\n            featureKey,\n            userId,\n            variableValue\n          )\n        );\n      }\n    } else {\n      this.logger.log(\n        LOG_LEVEL.INFO,\n        sprintf(\n          LOG_MESSAGES.VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE,\n          MODULE_NAME,\n          variable.key,\n          variation.key\n        )\n      );\n    }\n  } else {\n    this.logger.log(\n      LOG_LEVEL.INFO,\n      sprintf(\n        LOG_MESSAGES.USER_RECEIVED_DEFAULT_VARIABLE_VALUE,\n        MODULE_NAME,\n        userId,\n        variable.key,\n        featureKey\n      )\n    );\n  }\n\n  return projectConfig.getTypeCastValue(variableValue, variable.type, this.logger);\n}\n\n/**\n * Returns value for the given boolean variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {boolean|null}       Boolean value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableBoolean = function(featureKey, variableKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableBoolean'));\n      return null;\n    }\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.BOOLEAN, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns value for the given double variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {number|null}        Number value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableDouble = function(featureKey, variableKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableDouble'));\n      return null;\n    }\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.DOUBLE, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns value for the given integer variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {number|null}        Number value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableInteger = function(featureKey, variableKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableInteger'));\n      return null;\n    }\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.INTEGER, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns value for the given string variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {string|null}        String value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableString = function(featureKey, variableKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableString'));\n      return null;\n    }\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.STRING, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns value for the given json variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {object|null}        Object value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableJSON = function(featureKey, variableKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getFeatureVariableJSON'));\n      return null;\n    }\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.JSON, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns values for all the variables attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variables are being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {object|null}        Object containing all the variables, or null if the\n *                              feature key is invalid\n */\nOptimizely.prototype.getAllFeatureVariables = function(featureKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getAllFeatureVariables'));\n      return null;\n    }\n\n    if (!this.__validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {\n      return null;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n\n    var featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n    if (!featureFlag) {\n      return null;\n    }\n\n    var decision = this.decisionService.getVariationForFeature(configObj, featureFlag, userId, attributes);\n    var featureEnabled = decision.variation !== null ? decision.variation.featureEnabled : false;\n    var allVariables = {};\n\n    featureFlag.variables.forEach(function (variable) {\n      allVariables[variable.key] = this._getFeatureVariableValueFromVariation(featureKey, featureEnabled, decision.variation, variable, userId);\n    }.bind(this));\n\n    var sourceInfo = {};\n    if (decision.decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n      sourceInfo = {\n        experimentKey: decision.experiment.key,\n        variationKey: decision.variation.key,\n      };\n    }\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n      type: DECISION_NOTIFICATION_TYPES.ALL_FEATURE_VARIABLES,\n      userId: userId,\n      attributes: attributes || {},\n      decisionInfo: {\n        featureKey: featureKey,\n        featureEnabled: featureEnabled,\n        source: decision.decisionSource,\n        variableValues: allVariables,\n        sourceInfo: sourceInfo,\n      },\n    });\n\n    return allVariables;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns OptimizelyConfig object containing experiments and features data\n * @return {Object}\n *\n * OptimizelyConfig Object Schema\n * {\n *   'experimentsMap': {\n *     'my-fist-experiment': {\n *       'id': '111111',\n *       'key': 'my-fist-experiment'\n *       'variationsMap': {\n *         'variation_1': {\n *           'id': '121212',\n *           'key': 'variation_1',\n *           'variablesMap': {\n *             'age': {\n *               'id': '222222',\n *               'key': 'age',\n *               'type': 'integer',\n *               'value': '0',\n *             }\n *           }\n *         }\n *       }\n *     }\n *   },\n *   'featuresMap': {\n *     'awesome-feature': {\n *       'id': '333333',\n *       'key': 'awesome-feature',\n *       'experimentsMap': Object,\n *       'variationsMap': Object,\n *     }\n *   }\n * }\n */\nOptimizely.prototype.getOptimizelyConfig = function() {\n  try {\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n    return this.projectConfigManager.getOptimizelyConfig();\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Stop background processes belonging to this instance, including:\n *\n * - Active datafile requests\n * - Pending datafile requests\n * - Pending event queue flushes\n *\n * In-flight datafile requests will be aborted. Any events waiting to be sent\n * as part of a batched event request will be immediately flushed to the event\n * dispatcher.\n *\n * Returns a Promise that fulfills after all in-flight event dispatcher requests\n * (including any final request resulting from flushing the queue as described\n * above) are complete. If there are no in-flight event dispatcher requests and\n * no queued events waiting to be sent, returns an immediately-fulfilled Promise.\n *\n * Returned Promises are fulfilled with result objects containing these\n * properties:\n *    - success (boolean): true if the event dispatcher signaled completion of\n *                         all in-flight and final requests, or if there were no\n *                         queued events and no in-flight requests. false if an\n *                         unexpected error was encountered during the close\n *                         process.\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message.\n *\n * NOTE: After close is called, this instance is no longer usable - any events\n * generated will no longer be sent to the event dispatcher.\n *\n * @return {Promise}\n */\nOptimizely.prototype.close = function() {\n  try {\n    var eventProcessorStoppedPromise = this.eventProcessor.stop();\n    if (this.__disposeOnUpdate) {\n      this.__disposeOnUpdate();\n      this.__disposeOnUpdate = null;\n    }\n    if (this.projectConfigManager) {\n      this.projectConfigManager.stop();\n    }\n    Object.keys(this.__readyTimeouts).forEach(\n      function(readyTimeoutId) {\n        var readyTimeoutRecord = this.__readyTimeouts[readyTimeoutId];\n        clearTimeout(readyTimeoutRecord.readyTimeout);\n        readyTimeoutRecord.onClose();\n      }.bind(this)\n    );\n    this.__readyTimeouts = {};\n    return eventProcessorStoppedPromise.then(\n      function() {\n        return {\n          success: true,\n        };\n      },\n      function(err) {\n        return {\n          success: false,\n          reason: String(err),\n        };\n      }\n    );\n  } catch (err) {\n    this.logger.log(LOG_LEVEL.ERROR, err.message);\n    this.errorHandler.handleError(err);\n    return Promise.resolve({\n      success: false,\n      reason: String(err),\n    });\n  }\n};\n\n/**\n * Returns a Promise that fulfills when this instance is ready to use (meaning\n * it has a valid datafile), or has failed to become ready within a period of\n * time (configurable by the timeout property of the options argument), or when\n * this instance is closed via the close method.\n *\n * If a valid datafile was provided in the constructor, the returned Promise is\n * immediately fulfilled. If an sdkKey was provided, a manager will be used to\n * fetch  a datafile, and the returned promise will fulfill if that fetch\n * succeeds or fails before the timeout. The default timeout is 30 seconds,\n * which will be used if no timeout is provided in the argument options object.\n *\n * The returned Promise is fulfilled with a result object containing these\n * properties:\n *    - success (boolean): True if this instance is ready to use with a valid\n *                         datafile, or false if this instance failed to become\n *                         ready or was closed prior to becoming ready.\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message. Failure could be due to\n *                         expiration of the timeout, network errors,\n *                         unsuccessful responses, datafile parse errors,\n *                         datafile validation errors, or the instance being\n *                         closed\n * @param  {Object=}          options\n * @param  {number|undefined} options.timeout\n * @return {Promise}\n */\nOptimizely.prototype.onReady = function(options) {\n  var timeout;\n  if (typeof options === 'object' && options !== null) {\n    timeout = options.timeout;\n  }\n  if (!fns.isSafeInteger(timeout)) {\n    timeout = DEFAULT_ONREADY_TIMEOUT;\n  }\n\n  var resolveTimeoutPromise;\n  var timeoutPromise = new Promise(function(resolve) {\n    resolveTimeoutPromise = resolve;\n  });\n\n  var timeoutId = this.__nextReadyTimeoutId;\n  this.__nextReadyTimeoutId++;\n\n  var onReadyTimeout = function() {\n    delete this.__readyTimeouts[timeoutId];\n    resolveTimeoutPromise({\n      success: false,\n      reason: sprintf('onReady timeout expired after %s ms', timeout),\n    });\n  }.bind(this);\n  var readyTimeout = setTimeout(onReadyTimeout, timeout);\n  var onClose = function() {\n    resolveTimeoutPromise({\n      success: false,\n      reason: 'Instance closed',\n    });\n  };\n\n  this.__readyTimeouts[timeoutId] = {\n    readyTimeout: readyTimeout,\n    onClose: onClose,\n  };\n\n  this.__readyPromise.then(\n    function() {\n      clearTimeout(readyTimeout);\n      delete this.__readyTimeouts[timeoutId];\n      resolveTimeoutPromise({\n        success: true,\n      });\n    }.bind(this)\n  );\n\n  return Promise.race([this.__readyPromise, timeoutPromise]);\n};\n\nexport default Optimizely;\n","/**\n * Copyright 2016-2017, 2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ConsoleLogHandler } from '@optimizely/js-sdk-logging';\n\nfunction NoOpLogger() {}\n\nNoOpLogger.prototype.log = function() {};\n\nexport var createLogger = function(opts) {\n  return new ConsoleLogHandler(opts);\n};\n\nexport var createNoOpLogger = function() {\n  return new NoOpLogger();\n};\n\nexport default {\n  createLogger,\n  createNoOpLogger,\n};\n","/**\n * Copyright 2016, 2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Default error handler implementation\n */\nexport var handleError = function() {\n  // no-op\n}\n\nexport default {\n  handleError,\n}\n","/**\n * Copyright 2016-2018, 2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\n\n/**\n * Dispatch an HTTP request to the given url and the specified options\n * @param {Object}  eventObj          Event object containing\n * @param {string}  eventObj.url      the url to make the request to\n * @param {Object}  eventObj.params   parameters to pass to the request (i.e. in the POST body)\n * @param {string}  eventObj.httpVerb the HTTP request method type. only POST is supported.\n * @param {function} callback         callback to execute\n * @return {ClientRequest|undefined}          ClientRequest object which made the request, or undefined if no request was made (error)\n */\nexport var dispatchEvent = function(eventObj, callback) {\n  // Non-POST requests not supported\n  if (eventObj.httpVerb !== 'POST') {\n    return;\n  }\n\n  var parsedUrl = url.parse(eventObj.url);\n\n  var dataString = JSON.stringify(eventObj.params);\n\n  var requestOptions = {\n    host: parsedUrl.host,\n    path: parsedUrl.path,\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n      'content-length': dataString.length.toString(),\n    },\n  };\n\n  var requestCallback = function(response) {\n    if (response && response.statusCode && response.statusCode >= 200 && response.statusCode < 400) {\n      callback(response);\n    }\n  };\n\n  var req = (parsedUrl.protocol === 'http:' ? http : https).request(requestOptions, requestCallback);\n  // Add no-op error listener to prevent this from throwing\n  req.on('error', function() {});\n  req.write(dataString);\n  req.end();\n  return req;\n};\n\nexport default {\n  dispatchEvent,\n};\n","/**\n * Copyright 2019-2020, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSafeInteger } from '../fns';\n\n/**\n * Return true if the argument is a valid event batch size, false otherwise\n * @param {*} eventBatchSize\n * @returns boolean\n */\nexport var validateEventBatchSize = function(eventBatchSize) {\n  return isSafeInteger(eventBatchSize) && eventBatchSize >= 1;\n};\n\n/**\n * Return true if the argument is a valid event flush interval, false otherwise\n * @param {*} eventFlushInterval\n * @returns boolean\n */\nexport var validateEventFlushInterval = function(eventFlushInterval) {\n  return isSafeInteger(eventFlushInterval) && eventFlushInterval > 0;\n};\n\nexport default {\n  validateEventBatchSize: validateEventBatchSize,\n  validateEventFlushInterval: validateEventFlushInterval,\n};\n","/****************************************************************************\n * Copyright 2016-2017, 2019-2020 Optimizely, Inc. and contributors        *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nimport { \n  getLogger,\n  setLogHandler,\n  setLogLevel,\n  setErrorHandler,\n  getErrorHandler,\n  LogLevel,\n} from '@optimizely/js-sdk-logging';\n\nimport fns from './utils/fns';\nimport Optimizely from './optimizely';\nimport enums from './utils/enums';\nimport loggerPlugin from './plugins/logger';\nimport configValidator from './utils/config_validator';\nimport defaultErrorHandler from './plugins/error_handler';\nimport defaultEventDispatcher from './plugins/event_dispatcher/index.node';\nimport eventProcessorConfigValidator from './utils/event_processor_config_validator';\n\nvar logger = getLogger();\nsetLogLevel(LogLevel.ERROR);\n\nvar DEFAULT_EVENT_BATCH_SIZE = 10;\nvar DEFAULT_EVENT_FLUSH_INTERVAL = 30000; // Unit is ms, default is 30s\n\n/**\n * Creates an instance of the Optimizely class\n * @param  {Object} config\n * @param  {Object} config.datafile\n * @param  {Object} config.errorHandler\n * @param  {Object} config.eventDispatcher\n * @param  {Object} config.logger\n * @param  {Object} config.userProfileService\n * @param {Object} config.eventBatchSize\n * @param {Object} config.eventFlushInterval\n * @return {Object} the Optimizely object\n */\nvar createInstance = function(config) {\n  try {\n    var hasLogger = false;\n    config = config || {};\n\n    // TODO warn about setting per instance errorHandler / logger / logLevel\n    if (config.errorHandler) {\n      setErrorHandler(config.errorHandler);\n    }\n    if (config.logger) {\n      // only set a logger in node if one is provided, by not setting we are noop-ing\n      hasLogger = true;\n      setLogHandler(config.logger);\n      // respect the logger's shouldLog functionality\n      setLogLevel(LogLevel.NOTSET);\n    }\n    if (config.logLevel !== undefined) {\n      setLogLevel(config.logLevel);\n    }\n\n    try {\n      configValidator.validate(config);\n      config.isValidInstance = true;\n    } catch (ex) {\n      if (hasLogger) {\n        logger.error(ex);\n      } else {\n        console.error(ex.message);\n      }\n      config.isValidInstance = false;\n    }\n\n    config = fns.assign(\n      {\n        clientEngine: enums.NODE_CLIENT_ENGINE,\n        eventBatchSize: DEFAULT_EVENT_BATCH_SIZE,\n        eventDispatcher: defaultEventDispatcher,\n        eventFlushInterval: DEFAULT_EVENT_FLUSH_INTERVAL,\n      },\n      config,\n      {\n        // always get the OptimizelyLogger facade from logging\n        logger: logger,\n        errorHandler: getErrorHandler(),\n      }\n    );\n\n    if (!eventProcessorConfigValidator.validateEventBatchSize(config.eventBatchSize)) {\n      logger.warn('Invalid eventBatchSize %s, defaulting to %s', config.eventBatchSize, DEFAULT_EVENT_BATCH_SIZE);\n      config.eventBatchSize = DEFAULT_EVENT_BATCH_SIZE;\n    }\n    if (!eventProcessorConfigValidator.validateEventFlushInterval(config.eventFlushInterval)) {\n      logger.warn(\n        'Invalid eventFlushInterval %s, defaulting to %s',\n        config.eventFlushInterval,\n        DEFAULT_EVENT_FLUSH_INTERVAL\n      );\n      config.eventFlushInterval = DEFAULT_EVENT_FLUSH_INTERVAL;\n    }\n\n    return new Optimizely(config);\n  } catch (e) {\n    logger.error(e);\n    return null;\n  }\n};\n\n/**\n * Entry point into the Optimizely Node testing SDK\n */\nexport {\n  loggerPlugin as logging,\n  defaultErrorHandler as errorHandler,\n  defaultEventDispatcher as eventDispatcher,\n  enums,\n  setLogHandler as setLogger,\n  setLogLevel,\n  createInstance,\n}\n\nexport default {\n  logging: loggerPlugin,\n  errorHandler: defaultErrorHandler,\n  eventDispatcher: defaultEventDispatcher,\n  enums: enums,\n  setLogger: setLogHandler,\n  setLogLevel: setLogLevel,\n  createInstance: createInstance,\n};\n"],"names":["MAX_SAFE_INTEGER_LIMIT","Math","pow","isSafeInteger","number","abs","assign","target","Object","apply","arguments","to","index","length","nextSource","nextKey","prototype","hasOwnProperty","call","currentTimestamp","round","Date","getTime","keyBy","arr","key","keyByUtil","item","uuid","isNumber","value","LOG_LEVEL","NOTSET","DEBUG","INFO","WARNING","ERROR","ERROR_MESSAGES","CONDITION_EVALUATOR_ERROR","DATAFILE_AND_SDK_KEY_MISSING","EXPERIMENT_KEY_NOT_IN_DATAFILE","FEATURE_NOT_IN_DATAFILE","IMPROPERLY_FORMATTED_EXPERIMENT","INVALID_ATTRIBUTES","INVALID_BUCKETING_ID","INVALID_DATAFILE","INVALID_DATAFILE_MALFORMED","INVALID_JSON","INVALID_ERROR_HANDLER","INVALID_EVENT_DISPATCHER","INVALID_EVENT_TAGS","INVALID_EXPERIMENT_KEY","INVALID_EXPERIMENT_ID","INVALID_GROUP_ID","INVALID_LOGGER","INVALID_ROLLOUT_ID","INVALID_USER_ID","INVALID_USER_PROFILE_SERVICE","NO_DATAFILE_SPECIFIED","NO_JSON_PROVIDED","NO_VARIATION_FOR_EXPERIMENT_KEY","UNDEFINED_ATTRIBUTE","UNRECOGNIZED_ATTRIBUTE","UNABLE_TO_CAST_VALUE","USER_NOT_IN_FORCED_VARIATION","USER_PROFILE_LOOKUP_ERROR","USER_PROFILE_SAVE_ERROR","VARIABLE_KEY_NOT_IN_DATAFILE","VARIATION_ID_NOT_IN_DATAFILE","VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT","INVALID_INPUT_FORMAT","INVALID_DATAFILE_VERSION","INVALID_VARIATION_KEY","LOG_MESSAGES","ACTIVATE_USER","DISPATCH_CONVERSION_EVENT","DISPATCH_IMPRESSION_EVENT","DEPRECATED_EVENT_VALUE","EVENT_KEY_NOT_FOUND","EXPERIMENT_NOT_RUNNING","FEATURE_ENABLED_FOR_USER","FEATURE_NOT_ENABLED_FOR_USER","FEATURE_HAS_NO_EXPERIMENTS","FAILED_TO_PARSE_VALUE","FAILED_TO_PARSE_REVENUE","FORCED_BUCKETING_FAILED","INVALID_OBJECT","INVALID_CLIENT_ENGINE","INVALID_VARIATION_ID","NOTIFICATION_LISTENER_EXCEPTION","NO_ROLLOUT_EXISTS","NOT_ACTIVATING_USER","NOT_TRACKING_USER","PARSED_REVENUE_VALUE","PARSED_NUMERIC_VALUE","RETURNING_STORED_VARIATION","ROLLOUT_HAS_NO_EXPERIMENTS","SAVED_VARIATION","SAVED_VARIATION_NOT_FOUND","SHOULD_NOT_DISPATCH_ACTIVATE","SKIPPING_JSON_VALIDATION","TRACK_EVENT","USER_ASSIGNED_TO_EXPERIMENT_BUCKET","USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP","USER_BUCKETED_INTO_TARGETING_RULE","USER_IN_FEATURE_EXPERIMENT","USER_IN_ROLLOUT","USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE","USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE","USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP","USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP","USER_NOT_BUCKETED_INTO_TARGETING_RULE","USER_NOT_IN_FEATURE_EXPERIMENT","USER_NOT_IN_ROLLOUT","USER_FORCED_IN_VARIATION","USER_MAPPED_TO_FORCED_VARIATION","USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE","USER_MEETS_CONDITIONS_FOR_TARGETING_RULE","USER_HAS_VARIATION","USER_HAS_FORCED_VARIATION","USER_HAS_NO_VARIATION","USER_HAS_NO_FORCED_VARIATION","USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT","USER_NOT_IN_ANY_EXPERIMENT","USER_NOT_IN_EXPERIMENT","USER_RECEIVED_DEFAULT_VARIABLE_VALUE","FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE","VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE","USER_RECEIVED_VARIABLE_VALUE","VALID_DATAFILE","VALID_USER_PROFILE_SERVICE","VARIATION_REMOVED_FOR_USER","VARIABLE_REQUESTED_WITH_WRONG_TYPE","VALID_BUCKETING_ID","BUCKETING_ID_NOT_STRING","EVALUATING_AUDIENCE","EVALUATING_AUDIENCES_COMBINED","AUDIENCE_EVALUATION_RESULT","AUDIENCE_EVALUATION_RESULT_COMBINED","MISSING_ATTRIBUTE_VALUE","UNEXPECTED_CONDITION_VALUE","UNEXPECTED_TYPE","UNEXPECTED_TYPE_NULL","UNKNOWN_CONDITION_TYPE","UNKNOWN_MATCH_TYPE","UPDATED_OPTIMIZELY_CONFIG","OUT_OF_BOUNDS","UNABLE_TO_ATTACH_UNLOAD","RESERVED_EVENT_KEYWORDS","REVENUE","VALUE","VALID_CLIENT_ENGINES","NOTIFICATION_TYPES","notificationTypesEnum","FEATURE_VARIABLE_TYPES","BOOLEAN","DOUBLE","INTEGER","STRING","JSON","DATAFILE_VERSIONS","V2","V3","V4","CONTROL_ATTRIBUTES","BOT_FILTERING","BUCKETING_ID","STICKY_BUCKETING_KEY","USER_AGENT","JAVASCRIPT_CLIENT_ENGINE","NODE_CLIENT_ENGINE","REACT_CLIENT_ENGINE","NODE_CLIENT_VERSION","DECISION_NOTIFICATION_TYPES","AB_TEST","FEATURE","FEATURE_TEST","FEATURE_VARIABLE","ALL_FEATURE_VARIABLES","DECISION_SOURCES","ROLLOUT","AUDIENCE_EVALUATION_TYPES","RULE","EXPERIMENT","validate","attributes","Array","isArray","Error","sprintf","keys","forEach","attributeKey","attributeValue","fns","MAX_HASH_VALUE","bucket","bucketerParams","groupId","experimentKeyMap","experimentKey","group","groupIdMap","policy","bucketedExperimentId","this","bucketUserIntoExperiment","bucketingId","userId","logger","notbucketedInAnyExperimentLogMessage","log","experimentId","notBucketedIntoExperimentOfGroupLogMessage","bucketedIntoExperimentOfGroupLogMessage","bucketValue","_generateBucketValue","bucketedUserLogMessage","entityId","_findBucket","trafficAllocationConfig","variationIdMap","invalidVariationIdLogMessage","bucketingKey","id","trafficAllocation","i","endOfRange","hashValue","murmurhash","v3","parseInt","ex","message","SUPPORTED_VERSIONS","config","errorHandler","handleError","eventDispatcher","dispatchEvent","datafile","String","parse","indexOf","version","MODULE_NAME","isFeatureExperiment","projectConfig","experimentFeatureMap","createProjectConfig","datafileCopy","audiences","map","audience","experiments","experiment","featureFlags","featureFlag","groups","groupCopy","rollouts","rollout","rolloutCopy","createMutationSafeDatafileCopy","conditions","audiencesById","typedAudiences","attributeKeyMap","eventKeyMap","events","Id","push","rolloutIdMap","objectValues","variationKeyMap","variations","experimentIdMap","variationVariableUsageMap","variation","variables","featureKeyMap","feature","variable","type","subType","variableKeyMap","experimentIds","experimentInFeature","getExperimentId","getLayerId","layerId","getAttributeId","attribute","hasReservedPrefix","WARN","getEventId","eventKey","event","getExperimentStatus","status","isActive","isRunning","getExperimentAudienceConditions","audienceConditions","audienceIds","getVariationKeyFromId","variationId","getVariationIdFromExperimentAndVariationKey","variationKey","getExperimentFromKey","getTrafficAllocation","getExperimentFromId","getFeatureFromKey","featureKey","getVariableForFeature","variableKey","getVariableValueForVariation","variableUsage","getTypeCastValue","variableValue","variableType","castValue","isNaN","parseFloat","e","getAudiencesById","eventWithKeyExists","tryCreatingProjectConfig","configValidator","jsonSchemaValidator","DEFAULT_OPERATOR_TYPES","evaluate","leafEvaluator","firstOperator","restOfConditions","slice","sawNullResult","conditionResult","andEvaluator","result","notEvaluator","orEvaluator","MATCH_TYPES","EVALUATORS_BY_MATCH_TYPE","exactEvaluator","condition","userAttributes","userValue","name","conditionName","userValueType","conditionValue","stringify","isValueTypeValidForExactConditions","conditionValueType","conditionMatch","match","getLogger","AudienceEvaluator","UNSTABLE_conditionEvaluators","typeToEvaluatorMap","custom_attribute","customAttributeConditionEvaluator","evaluateAudience","audienceId","conditionTreeEvaluator","evaluateConditionWithUserAttributes","bind","resultText","toString","toUpperCase","evaluator","err","input","enums","DecisionService","options","audienceEvaluator","forcedVariationMap","userProfileService","getVariation","configObj","_getBucketingId","__checkIfExperimentIsActive","forcedVariationKey","getForcedVariation","__getWhitelistedVariation","experimentBucketMap","__resolveExperimentBucketMap","__getStoredVariation","__checkIfUserIsInAudience","userDoesNotMeetConditionsLogMessage","__buildBucketerParams","bucketer","userHasNoVariationLogMessage","userInVariationLogMessage","__saveUserProfile","userProfile","__getUserProfile","attributeExperimentBucketMap","experiment_bucket_map","experimentNotRunningLogMessage","forcedVariations","forcedBucketingSucceededMessageLog","forcedBucketingFailedMessageLog","evaluationAttribute","loggingKey","experimentAudienceConditions","decision","variation_id","user_id","lookup","save","getVariationForFeature","experimentDecision","_getVariationForFeatureExperiment","rolloutDecision","_getVariationForRollout","_getExperimentInGroup","decisionSource","rolloutId","rolloutRule","endIndex","everyoneElseRule","removeForcedVariation","__setInForcedVariationMap","experimentToVariationMap","setForcedVariation","stringValidator","REVENUE_EVENT_METRIC_NAME","VALUE_EVENT_METRIC_NAME","eventTags","rawValue","parsedRevenueValue","parsedEventValue","ENDPOINT","getCommonEventParams","anonymize_ip","anonymizeIP","botFiltering","visitor","snapshots","visitor_id","commonParams","account_id","accountId","project_id","projectId","visitors","revision","client_name","clientEngine","client_version","clientVersion","enrich_decisions","attributeValidator","attributeId","entity_id","getImpressionEvent","impressionEvent","httpVerb","url","impressionEventParams","decisions","campaign_id","experiment_id","timestamp","params","getConversionEvent","conversionEvent","snapshot","eventDict","revenue","eventTagUtils","eventValue","getVisitorSnapshot","buildVisitorAttributes","builtAttributes","attributesValidator","NotificationCenter","__notificationListeners","notificationTypeEnum","__listenerId","addNotificationListener","notificationType","callback","callbackAlreadyAdded","listenerEntry","returnId","removeNotificationListener","listenerId","indexToRemove","typeToRemove","some","every","undefined","splice","clearAllNotificationListeners","clearNotificationListeners","sendNotifications","notificationData","userProfileServiceInstance","getMergedVariablesMap","featureVariablesMap","featureId","variablesObject","experimentFeatureVariables","tempVariablesIdMap","reduce","variablesMap","featureVariable","variationVariable","featureEnabled","defaultValue","getFeaturesMap","allExperiments","features","experimentsMap","getOptimizelyConfig","rolloutExperimentIds","resultMap","variationsMap","getExperimentsMap","featuresMap","getErrorMessage","maybeError","defaultMessage","ProjectConfigManager","__initialize","error","__updateListeners","__configObj","__optimizelyConfigObj","__readyPromise","Promise","resolve","success","reason","sdkKey","datafileAndSdkKeyMissingError","projectConfigCreationEx","initialDatafile","__getDatafileFromConfig","datafileManagerConfig","__validateDatafileOptions","datafileOptions","datafileManager","HttpPollingDatafileManager","start","onReady","then","__onDatafileManagerReadyFulfill","__onDatafileManagerReadyReject","on","__onDatafileManagerUpdate","newConfigObj","newDatafile","get","__handleNewConfigObj","oldConfigObj","listener","getConfig","onUpdate","stop","Optimizely","__isOptimizelyConfigValid","isValidInstance","projectConfigManager","__disposeOnUpdate","notificationCenter","OPTIMIZELY_CONFIG_UPDATE","projectConfigManagerReadyPromise","userProfileServiceValidator","decisionService","eventProcessor","eventProcessor.LogTierV1EventProcessor","dispatcher","flushInterval","eventFlushInterval","batchSize","eventBatchSize","maxQueueSize","eventMaxQueueSize","eventProcessorStartedPromise","all","promiseResults","__readyTimeouts","__nextReadyTimeoutId","NoOpLogger","__isValidInstance","activate","__validateInputs","experiment_key","__notActivatingExperiment","shouldNotDispatchActivateLogMessage","_sendImpressionEvent","failedActivationLogMessage","user","context","clientName","layer","buildImpressionEvent","process","__emitNotificationCenterActivate","impressionEventOptions","ACTIVATE","logEvent","track","event_key","eventId","tags","buildConversionEvent","__filterEmptyValues","__emitNotificationCenterTrack","failedTrackLogMessage","conversionEventOptions","TRACK","decisionNotificationType","DECISION","decisionInfo","stringInputs","inputKeys","eventTagsValidator","isFeatureEnabled","feature_key","sourceInfo","featureInfo","source","getEnabledFeatures","enabledFeatures","getFeatureVariable","_getFeatureVariableForType","variable_key","_getFeatureVariableValueFromVariation","getFeatureVariableBoolean","getFeatureVariableDouble","getFeatureVariableInteger","getFeatureVariableString","getFeatureVariableJSON","getAllFeatureVariables","allVariables","variableValues","close","eventProcessorStoppedPromise","readyTimeoutId","readyTimeoutRecord","clearTimeout","readyTimeout","onClose","timeout","resolveTimeoutPromise","timeoutPromise","timeoutId","onReadyTimeout","setTimeout","race","createLogger","opts","ConsoleLogHandler","createNoOpLogger","eventObj","parsedUrl","dataString","requestOptions","host","path","method","headers","content-type","content-length","req","protocol","http","https","request","response","statusCode","write","end","setLogLevel","LogLevel","createInstance","hasLogger","setErrorHandler","setLogHandler","logLevel","console","defaultEventDispatcher","getErrorHandler","eventProcessorConfigValidator","warn","logging","loggerPlugin","defaultErrorHandler","setLogger"],"mappings":"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"}