import { ConsoleLogHandler, getLogger, setLogHandler, setLogLevel, LogLevel, setErrorHandler, getErrorHandler } from '@optimizely/js-sdk-logging';
export { setLogLevel, setLogHandler as setLogger } from '@optimizely/js-sdk-logging';
import { LogTierV1EventProcessor, LocalStoragePendingEventsDispatcher } from '@optimizely/js-sdk-event-processor';
import { generateUUID, keyBy as keyBy$1, NOTIFICATION_TYPES as NOTIFICATION_TYPES$2, sprintf, objectValues } from '@optimizely/js-sdk-utils';
import murmurhash from 'murmurhash';
import { HttpPollingDatafileManager } from '@optimizely/js-sdk-datafile-manager';

/**
 * Copyright 2017, 2019-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MAX_SAFE_INTEGER_LIMIT = Math.pow(2, 53);

var assign = function (target) {
  if (!target) {
    return {};
  }
  if (typeof Object.assign === 'function') {
    return Object.assign.apply(Object, arguments);
  } else {
    var to = Object(target);
    for (var index = 1; index < arguments.length; index++) {
      var nextSource = arguments[index];
      if (nextSource !== null && nextSource !== undefined) {
        for (var nextKey in nextSource) {
          // Avoid bugs when hasOwnProperty is shadowed
          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
    return to;
  }
};

var currentTimestamp = function () {
  return Math.round(new Date().getTime());
};

var isSafeInteger = function (number) {
  return typeof number == 'number' && Math.abs(number) <= MAX_SAFE_INTEGER_LIMIT;
};

var keyBy = function (arr, key) {
  if (!arr) return {};
  return keyBy$1(arr, function (item) {
    return item[key];
  });
};

var isNumber = function (value) {
  return typeof value === 'number';
};

var fns = {
  assign: assign,
  currentTimestamp: currentTimestamp,
  isSafeInteger: isSafeInteger,
  keyBy: keyBy,
  uuid: generateUUID,
  isNumber: isNumber,
};

/****************************************************************************
 * Copyright 2016-2020, Optimizely, Inc. and contributors                   *
 *                                                                          *
 * Licensed under the Apache License, Version 2.0 (the "License");          *
 * you may not use this file except in compliance with the License.         *
 * You may obtain a copy of the License at                                  *
 *                                                                          *
 *    http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                          *
 * Unless required by applicable law or agreed to in writing, software      *
 * distributed under the License is distributed on an "AS IS" BASIS,        *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 * See the License for the specific language governing permissions and      *
 * limitations under the License.                                           *
 ***************************************************************************/

/**
 * Contains global enums used throughout the library
 */
var LOG_LEVEL = {
  NOTSET: 0,
  DEBUG: 1,
  INFO: 2,
  WARNING: 3,
  ERROR: 4,
};

var ERROR_MESSAGES = {
  CONDITION_EVALUATOR_ERROR: '%s: Error evaluating audience condition of type %s: %s',
  DATAFILE_AND_SDK_KEY_MISSING: '%s: You must provide at least one of sdkKey or datafile. Cannot start Optimizely',
  EXPERIMENT_KEY_NOT_IN_DATAFILE: '%s: Experiment key %s is not in datafile.',
  FEATURE_NOT_IN_DATAFILE: '%s: Feature key %s is not in datafile.',
  IMPROPERLY_FORMATTED_EXPERIMENT: '%s: Experiment key %s is improperly formatted.',
  INVALID_ATTRIBUTES: '%s: Provided attributes are in an invalid format.',
  INVALID_BUCKETING_ID: '%s: Unable to generate hash for bucketing ID %s: %s',
  INVALID_DATAFILE: '%s: Datafile is invalid - property %s: %s',
  INVALID_DATAFILE_MALFORMED: '%s: Datafile is invalid because it is malformed.',
  INVALID_JSON: '%s: JSON object is not valid.',
  INVALID_ERROR_HANDLER: '%s: Provided "errorHandler" is in an invalid format.',
  INVALID_EVENT_DISPATCHER: '%s: Provided "eventDispatcher" is in an invalid format.',
  INVALID_EVENT_TAGS: '%s: Provided event tags are in an invalid format.',
  INVALID_EXPERIMENT_KEY: '%s: Experiment key %s is not in datafile. It is either invalid, paused, or archived.',
  INVALID_EXPERIMENT_ID: '%s: Experiment ID %s is not in datafile.',
  INVALID_GROUP_ID: '%s: Group ID %s is not in datafile.',
  INVALID_LOGGER: '%s: Provided "logger" is in an invalid format.',
  INVALID_ROLLOUT_ID: '%s: Invalid rollout ID %s attached to feature %s',
  INVALID_USER_ID: '%s: Provided user ID is in an invalid format.',
  INVALID_USER_PROFILE_SERVICE: '%s: Provided user profile service instance is in an invalid format: %s.',
  NO_DATAFILE_SPECIFIED: '%s: No datafile specified. Cannot start optimizely.',
  NO_JSON_PROVIDED: '%s: No JSON object to validate against schema.',
  NO_VARIATION_FOR_EXPERIMENT_KEY: '%s: No variation key %s defined in datafile for experiment %s.',
  UNDEFINED_ATTRIBUTE: '%s: Provided attribute: %s has an undefined value.',
  UNRECOGNIZED_ATTRIBUTE: '%s: Unrecognized attribute %s provided. Pruning before sending event to Optimizely.',
  UNABLE_TO_CAST_VALUE: '%s: Unable to cast value %s to type %s, returning null.',
  USER_NOT_IN_FORCED_VARIATION: '%s: User %s is not in the forced variation map. Cannot remove their forced variation.',
  USER_PROFILE_LOOKUP_ERROR: '%s: Error while looking up user profile for user ID "%s": %s.',
  USER_PROFILE_SAVE_ERROR: '%s: Error while saving user profile for user ID "%s": %s.',
  VARIABLE_KEY_NOT_IN_DATAFILE: '%s: Variable with key "%s" associated with feature with key "%s" is not in datafile.',
  VARIATION_ID_NOT_IN_DATAFILE: '%s: No variation ID %s defined in datafile for experiment %s.',
  VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT: '%s: Variation ID %s is not in the datafile.',
  INVALID_INPUT_FORMAT: '%s: Provided %s is in an invalid format.',
  INVALID_DATAFILE_VERSION: '%s: This version of the JavaScript SDK does not support the given datafile version: %s',
  INVALID_VARIATION_KEY: '%s: Provided variation key is in an invalid format.',
};

var LOG_MESSAGES = {
  ACTIVATE_USER: '%s: Activating user %s in experiment %s.',
  DISPATCH_CONVERSION_EVENT: '%s: Dispatching conversion event to URL %s with params %s.',
  DISPATCH_IMPRESSION_EVENT: '%s: Dispatching impression event to URL %s with params %s.',
  DEPRECATED_EVENT_VALUE: '%s: Event value is deprecated in %s call.',
  EVENT_KEY_NOT_FOUND: '%s: Event key %s is not in datafile.',
  EXPERIMENT_NOT_RUNNING: '%s: Experiment %s is not running.',
  FEATURE_ENABLED_FOR_USER: '%s: Feature %s is enabled for user %s.',
  FEATURE_NOT_ENABLED_FOR_USER: '%s: Feature %s is not enabled for user %s.',
  FEATURE_HAS_NO_EXPERIMENTS: '%s: Feature %s is not attached to any experiments.',
  FAILED_TO_PARSE_VALUE: '%s: Failed to parse event value "%s" from event tags.',
  FAILED_TO_PARSE_REVENUE: '%s: Failed to parse revenue value "%s" from event tags.',
  FORCED_BUCKETING_FAILED: '%s: Variation key %s is not in datafile. Not activating user %s.',
  INVALID_OBJECT: '%s: Optimizely object is not valid. Failing %s.',
  INVALID_CLIENT_ENGINE: '%s: Invalid client engine passed: %s. Defaulting to node-sdk.',
  INVALID_VARIATION_ID: '%s: Bucketed into an invalid variation ID. Returning null.',
  NOTIFICATION_LISTENER_EXCEPTION: '%s: Notification listener for (%s) threw exception: %s',
  NO_ROLLOUT_EXISTS: '%s: There is no rollout of feature %s.',
  NOT_ACTIVATING_USER: '%s: Not activating user %s for experiment %s.',
  NOT_TRACKING_USER: '%s: Not tracking user %s.',
  PARSED_REVENUE_VALUE: '%s: Parsed revenue value "%s" from event tags.',
  PARSED_NUMERIC_VALUE: '%s: Parsed event value "%s" from event tags.',
  RETURNING_STORED_VARIATION:
    '%s: Returning previously activated variation "%s" of experiment "%s" for user "%s" from user profile.',
  ROLLOUT_HAS_NO_EXPERIMENTS: '%s: Rollout of feature %s has no experiments',
  SAVED_VARIATION: '%s: Saved variation "%s" of experiment "%s" for user "%s".',
  SAVED_VARIATION_NOT_FOUND:
    '%s: User %s was previously bucketed into variation with ID %s for experiment %s, but no matching variation was found.',
  SHOULD_NOT_DISPATCH_ACTIVATE: '%s: Experiment %s is not in "Running" state. Not activating user.',
  SKIPPING_JSON_VALIDATION: '%s: Skipping JSON schema validation.',
  TRACK_EVENT: '%s: Tracking event %s for user %s.',
  USER_ASSIGNED_TO_EXPERIMENT_BUCKET: '%s: Assigned bucket %s to user with bucketing ID %s.',
  USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is in experiment %s of group %s.',
  USER_BUCKETED_INTO_TARGETING_RULE: '%s: User %s bucketed into targeting rule %s.',
  USER_IN_FEATURE_EXPERIMENT: '%s: User %s is in variation %s of experiment %s on the feature %s.',
  USER_IN_ROLLOUT: '%s: User %s is in rollout of feature %s.',
  USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE: '%s: User %s bucketed into everyone targeting rule.',
  USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE:
    '%s: User %s not bucketed into everyone targeting rule due to traffic allocation.',
  USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is not in experiment %s of group %s.',
  USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP: '%s: User %s is not in any experiment of group %s.',
  USER_NOT_BUCKETED_INTO_TARGETING_RULE:
    '%s User %s not bucketed into targeting rule %s due to traffic allocation. Trying everyone rule.',
  USER_NOT_IN_FEATURE_EXPERIMENT: '%s: User %s is not in any experiment on the feature %s.',
  USER_NOT_IN_ROLLOUT: '%s: User %s is not in rollout of feature %s.',
  USER_FORCED_IN_VARIATION: '%s: User %s is forced in variation %s.',
  USER_MAPPED_TO_FORCED_VARIATION: '%s: Set variation %s for experiment %s and user %s in the forced variation map.',
  USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s does not meet conditions for targeting rule %s.',
  USER_MEETS_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s meets conditions for targeting rule %s.',
  USER_HAS_VARIATION: '%s: User %s is in variation %s of experiment %s.',
  USER_HAS_FORCED_VARIATION: '%s: Variation %s is mapped to experiment %s and user %s in the forced variation map.',
  USER_HAS_NO_VARIATION: '%s: User %s is in no variation of experiment %s.',
  USER_HAS_NO_FORCED_VARIATION: '%s: User %s is not in the forced variation map.',
  USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT: '%s: No experiment %s mapped to user %s in the forced variation map.',
  USER_NOT_IN_ANY_EXPERIMENT: '%s: User %s is not in any experiment of group %s.',
  USER_NOT_IN_EXPERIMENT: '%s: User %s does not meet conditions to be in experiment %s.',
  USER_RECEIVED_DEFAULT_VARIABLE_VALUE:
    '%s: User "%s" is not in any variation or rollout rule. Returning default value for variable "%s" of feature flag "%s".',
  FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE:
    '%s: Feature "%s" is not enabled for user %s. Returning the default variable value "%s".',
  VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE:
    '%s: Variable "%s" is not used in variation "%s". Returning default value.',
  USER_RECEIVED_VARIABLE_VALUE: '%s: Got variable value "%s" for variable "%s" of feature flag "%s"',
  VALID_DATAFILE: '%s: Datafile is valid.',
  VALID_USER_PROFILE_SERVICE: '%s: Valid user profile service provided.',
  VARIATION_REMOVED_FOR_USER: '%s: Variation mapped to experiment %s has been removed for user %s.',
  VARIABLE_REQUESTED_WITH_WRONG_TYPE:
    '%s: Requested variable type "%s", but variable is of type "%s". Use correct API to retrieve value. Returning None.',
  VALID_BUCKETING_ID: '%s: BucketingId is valid: "%s"',
  BUCKETING_ID_NOT_STRING: '%s: BucketingID attribute is not a string. Defaulted to userId',
  EVALUATING_AUDIENCE: '%s: Starting to evaluate audience "%s" with conditions: %s.',
  EVALUATING_AUDIENCES_COMBINED: '%s: Evaluating audiences for %s "%s": %s.',
  AUDIENCE_EVALUATION_RESULT: '%s: Audience "%s" evaluated to %s.',
  AUDIENCE_EVALUATION_RESULT_COMBINED: '%s: Audiences for %s %s collectively evaluated to %s.',
  MISSING_ATTRIBUTE_VALUE:
    '%s: Audience condition %s evaluated to UNKNOWN because no value was passed for user attribute "%s".',
  UNEXPECTED_CONDITION_VALUE:
    '%s: Audience condition %s evaluated to UNKNOWN because the condition value is not supported.',
  UNEXPECTED_TYPE:
    '%s: Audience condition %s evaluated to UNKNOWN because a value of type "%s" was passed for user attribute "%s".',
  UNEXPECTED_TYPE_NULL:
    '%s: Audience condition %s evaluated to UNKNOWN because a null value was passed for user attribute "%s".',
  UNKNOWN_CONDITION_TYPE:
    '%s: Audience condition %s has an unknown condition type. You may need to upgrade to a newer release of the Optimizely SDK.',
  UNKNOWN_MATCH_TYPE:
    '%s: Audience condition %s uses an unknown match type. You may need to upgrade to a newer release of the Optimizely SDK.',
  UPDATED_OPTIMIZELY_CONFIG: '%s: Updated Optimizely config to revision %s (project id %s)',
  OUT_OF_BOUNDS:
    '%s: Audience condition %s evaluated to UNKNOWN because the number value for user attribute "%s" is not in the range [-2^53, +2^53].',
  UNABLE_TO_ATTACH_UNLOAD: '%s: unable to bind optimizely.close() to page unload event: "%s"',
};

var RESERVED_EVENT_KEYWORDS = {
  REVENUE: 'revenue',
  VALUE: 'value',
};

var CONTROL_ATTRIBUTES = {
  BOT_FILTERING: '$opt_bot_filtering',
  BUCKETING_ID: '$opt_bucketing_id',
  STICKY_BUCKETING_KEY: '$opt_experiment_bucket_map',
  USER_AGENT: '$opt_user_agent',
};

var JAVASCRIPT_CLIENT_ENGINE = 'javascript-sdk';
var NODE_CLIENT_ENGINE = 'node-sdk';
var REACT_CLIENT_ENGINE = 'react-sdk';
var NODE_CLIENT_VERSION = '4.2.1';

var VALID_CLIENT_ENGINES = [
  NODE_CLIENT_ENGINE,
  REACT_CLIENT_ENGINE,
  JAVASCRIPT_CLIENT_ENGINE,
];

var NOTIFICATION_TYPES = NOTIFICATION_TYPES$2;

var DECISION_NOTIFICATION_TYPES = {
  AB_TEST: 'ab-test',
  FEATURE: 'feature',
  FEATURE_TEST: 'feature-test',
  FEATURE_VARIABLE: 'feature-variable',
  ALL_FEATURE_VARIABLES: 'all-feature-variables',
};

/*
 * Represents the source of a decision for feature management. When a feature
 * is accessed through isFeatureEnabled or getVariableValue APIs, the decision
 * source is used to decide whether to dispatch an impression event to
 * Optimizely.
 */
var DECISION_SOURCES = {
  FEATURE_TEST: 'feature-test',
  ROLLOUT: 'rollout',
};

var AUDIENCE_EVALUATION_TYPES = {
  RULE: 'rule',
  EXPERIMENT: 'experiment',
};

/*
 * Possible types of variables attached to features
 */
var FEATURE_VARIABLE_TYPES = {
  BOOLEAN: 'boolean',
  DOUBLE: 'double',
  INTEGER: 'integer',
  STRING: 'string',
  JSON: 'json',
};

/*
 * Supported datafile versions
 */
var DATAFILE_VERSIONS = {
  V2: '2',
  V3: '3',
  V4: '4',
};

var enums = {
  LOG_LEVEL: LOG_LEVEL,
  ERROR_MESSAGES: ERROR_MESSAGES,
  LOG_MESSAGES: LOG_MESSAGES,
  RESERVED_EVENT_KEYWORDS: RESERVED_EVENT_KEYWORDS,
  CONTROL_ATTRIBUTES: CONTROL_ATTRIBUTES,
  JAVASCRIPT_CLIENT_ENGINE: JAVASCRIPT_CLIENT_ENGINE,
  NODE_CLIENT_ENGINE: NODE_CLIENT_ENGINE,
  REACT_CLIENT_ENGINE: REACT_CLIENT_ENGINE,
  NODE_CLIENT_VERSION: NODE_CLIENT_VERSION,
  VALID_CLIENT_ENGINES: VALID_CLIENT_ENGINES,
  NOTIFICATION_TYPES: NOTIFICATION_TYPES,
  DECISION_NOTIFICATION_TYPES: DECISION_NOTIFICATION_TYPES,
  DECISION_SOURCES: DECISION_SOURCES,
  FEATURE_VARIABLE_TYPES: FEATURE_VARIABLE_TYPES,
  DATAFILE_VERSIONS: DATAFILE_VERSIONS,
  AUDIENCE_EVALUATION_TYPES: AUDIENCE_EVALUATION_TYPES
};

/**
 * Copyright 2016, 2018-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MODULE_NAME = 'CONFIG_VALIDATOR';
var SUPPORTED_VERSIONS = [DATAFILE_VERSIONS.V2, DATAFILE_VERSIONS.V3, DATAFILE_VERSIONS.V4];

/**
 * Validates the given config options
 * @param  {Object} config
 * @param  {Object} config.errorHandler
 * @param  {Object} config.eventDispatcher
 * @param  {Object} config.logger
 * @return {Boolean} True if the config options are valid
 * @throws If any of the config options are not valid
 */
var validate = function(config) {
  if (config.errorHandler && typeof config.errorHandler.handleError !== 'function') {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_ERROR_HANDLER, MODULE_NAME));
  }

  if (config.eventDispatcher && typeof config.eventDispatcher.dispatchEvent !== 'function') {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_DISPATCHER, MODULE_NAME));
  }

  if (config.logger && typeof config.logger.log !== 'function') {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_LOGGER, MODULE_NAME));
  }

  return true;
};

/**
 * Validates the datafile
 * @param {string}  datafile
 * @return {Boolean} True if the datafile is valid
 * @throws If the datafile is not valid for any of the following reasons:
 - The datafile string is undefined
 - The datafile string cannot be parsed as a JSON object
 - The datafile version is not supported
 */
var validateDatafile = function(datafile) {
  if (!datafile) {
    throw new Error(sprintf(ERROR_MESSAGES.NO_DATAFILE_SPECIFIED, MODULE_NAME));
  }

  if (typeof datafile === 'string' || datafile instanceof String) {
    // Attempt to parse the datafile string
    try {
      datafile = JSON.parse(datafile);
    } catch (ex) {
      throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_MALFORMED, MODULE_NAME));
    }
  }

  if (SUPPORTED_VERSIONS.indexOf(datafile.version) === -1) {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_VERSION, MODULE_NAME, datafile.version));
  }

  return true;
};

/**
 * Provides utility methods for validating that the configuration options are valid
 */
var configValidator = {
  validate: validate,
  validateDatafile: validateDatafile,
};

/**
 * Copyright 2016, 2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Default error handler implementation
 */
var handleError = function() {
  // no-op
};

var defaultErrorHandler = {
  handleError,
};

/**
 * Copyright 2016-2017, 2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var POST_METHOD = 'POST';
var GET_METHOD = 'GET';
var READYSTATE_COMPLETE = 4;

/**
 * Sample event dispatcher implementation for tracking impression and conversions
 * Users of the SDK can provide their own implementation
 * @param  {Object} eventObj
 * @param  {Function} callback
 */
var dispatchEvent = function(eventObj, callback) {
  var url = eventObj.url;
  var params = eventObj.params;
  var req;
  if (eventObj.httpVerb === POST_METHOD) {
    req = new XMLHttpRequest();
    req.open(POST_METHOD, url, true);
    req.setRequestHeader('Content-Type', 'application/json');
    req.onreadystatechange = function() {
      if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {
        try {
          callback({ statusCode: req.status });
        } catch (e) {
          // TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)
        }
      }
    };
    req.send(JSON.stringify(params));
  } else {
    // add param for cors headers to be sent by the log endpoint
    url += '?wxhr=true';
    if (params) {
      url += '&' + toQueryString(params);
    }

    req = new XMLHttpRequest();
    req.open(GET_METHOD, url, true);
    req.onreadystatechange = function() {
      if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {
        try {
          callback();
        } catch (e) {
          // TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)
        }
      }
    };
    req.send();
  }
};

var toQueryString = function(obj) {
  return Object.keys(obj)
    .map(function(k) {
      return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);
    })
    .join('&');
};

var defaultEventDispatcher = {
  dispatchEvent,
};

/**
 * Copyright 2016-2017, 2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function NoOpLogger() {}

NoOpLogger.prototype.log = function() {};

var createLogger = function(opts) {
  return new ConsoleLogHandler(opts);
};

var createNoOpLogger = function() {
  return new NoOpLogger();
};

var loggerPlugin = {
  createLogger,
  createNoOpLogger,
};

/**
 * Copyright 2016, 2018-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MODULE_NAME$1 = 'ATTRIBUTES_VALIDATOR';

/**
 * Validates user's provided attributes
 * @param  {Object}  attributes
 * @return {boolean} True if the attributes are valid
 * @throws If the attributes are not valid
 */
var validate$1 = function(attributes) {
  if (typeof attributes === 'object' && !Array.isArray(attributes) && attributes !== null) {
    Object.keys(attributes).forEach(function(key) {
      if (typeof attributes[key] === 'undefined') {
        throw new Error(sprintf(ERROR_MESSAGES.UNDEFINED_ATTRIBUTE, MODULE_NAME$1, key));
      }
    });
    return true;
  } else {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_ATTRIBUTES, MODULE_NAME$1));
  }
};

var isAttributeValid = function(attributeKey, attributeValue) {
  return (
    typeof attributeKey === 'string' &&
    (typeof attributeValue === 'string' ||
      typeof attributeValue === 'boolean' ||
      (fns.isNumber(attributeValue) && fns.isSafeInteger(attributeValue)))
  );
};

/**
 * Provides utility method for validating that the attributes user has provided are valid
 */
var attributesValidator = {
  validate: validate$1,
  isAttributeValid: isAttributeValid,
};

/**
 * Copyright 2016, 2019-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var HASH_SEED = 1;
var MAX_HASH_VALUE = Math.pow(2, 32);
var MAX_TRAFFIC_VALUE = 10000;
var MODULE_NAME$2 = 'BUCKETER';
var RANDOM_POLICY = 'random';

/**
 * Determines ID of variation to be shown for the given input params
 * @param  {Object}         bucketerParams
 * @param  {string}         bucketerParams.experimentId
 * @param  {string}         bucketerParams.experimentKey
 * @param  {string}         bucketerParams.userId
 * @param  {Object[]}       bucketerParams.trafficAllocationConfig
 * @param  {Array}          bucketerParams.experimentKeyMap
 * @param  {Object}         bucketerParams.groupIdMap
 * @param  {Object}         bucketerParams.variationIdMap
 * @param  {string}         bucketerParams.varationIdMap[].key
 * @param  {Object}         bucketerParams.logger
 * @param  {string}         bucketerParams.bucketingId
 * @return Variation ID that user has been bucketed into, null if user is not bucketed into any experiment
 */
var bucket = function(bucketerParams) {
  // Check if user is in a random group; if so, check if user is bucketed into a specific experiment
  var experiment = bucketerParams.experimentKeyMap[bucketerParams.experimentKey];
  var groupId = experiment['groupId'];
  if (groupId) {
    var group = bucketerParams.groupIdMap[groupId];
    if (!group) {
      throw new Error(sprintf(ERROR_MESSAGES.INVALID_GROUP_ID, MODULE_NAME$2, groupId));
    }
    if (group.policy === RANDOM_POLICY) {
      var bucketedExperimentId = this.bucketUserIntoExperiment(
        group,
        bucketerParams.bucketingId,
        bucketerParams.userId,
        bucketerParams.logger
      );

      // Return if user is not bucketed into any experiment
      if (bucketedExperimentId === null) {
        var notbucketedInAnyExperimentLogMessage = sprintf(
          LOG_MESSAGES.USER_NOT_IN_ANY_EXPERIMENT,
          MODULE_NAME$2,
          bucketerParams.userId,
          groupId
        );
        bucketerParams.logger.log(LOG_LEVEL.INFO, notbucketedInAnyExperimentLogMessage);
        return null;
      }

      // Return if user is bucketed into a different experiment than the one specified
      if (bucketedExperimentId !== bucketerParams.experimentId) {
        var notBucketedIntoExperimentOfGroupLogMessage = sprintf(
          LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP,
          MODULE_NAME$2,
          bucketerParams.userId,
          bucketerParams.experimentKey,
          groupId
        );
        bucketerParams.logger.log(LOG_LEVEL.INFO, notBucketedIntoExperimentOfGroupLogMessage);
        return null;
      }

      // Continue bucketing if user is bucketed into specified experiment
      var bucketedIntoExperimentOfGroupLogMessage = sprintf(
        LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP,
        MODULE_NAME$2,
        bucketerParams.userId,
        bucketerParams.experimentKey,
        groupId
      );
      bucketerParams.logger.log(LOG_LEVEL.INFO, bucketedIntoExperimentOfGroupLogMessage);
    }
  }
  var bucketingId = sprintf('%s%s', bucketerParams.bucketingId, bucketerParams.experimentId);
  var bucketValue = this._generateBucketValue(bucketingId);

  var bucketedUserLogMessage = sprintf(
    LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET,
    MODULE_NAME$2,
    bucketValue,
    bucketerParams.userId
  );
  bucketerParams.logger.log(LOG_LEVEL.DEBUG, bucketedUserLogMessage);

  var entityId = this._findBucket(bucketValue, bucketerParams.trafficAllocationConfig);

  if (!bucketerParams.variationIdMap.hasOwnProperty(entityId)) {
    if (entityId) {
      var invalidVariationIdLogMessage = sprintf(LOG_MESSAGES.INVALID_VARIATION_ID, MODULE_NAME$2);
      bucketerParams.logger.log(LOG_LEVEL.WARNING, invalidVariationIdLogMessage);
    }
    return null;
  }

  return entityId;
};

/**
 * Returns bucketed experiment ID to compare against experiment user is being called into
 * @param {Object} group        Group that experiment is in
 * @param {string} bucketingId  Bucketing ID
 * @param {string} userId       ID of user to be bucketed into experiment
 * @param {Object} logger       Logger implementation
 * @return {string|null} ID of experiment if user is bucketed into experiment within the group, null otherwise
 */
var bucketUserIntoExperiment = function(group, bucketingId, userId, logger) {
  var bucketingKey = sprintf('%s%s', bucketingId, group.id);
  var bucketValue = this._generateBucketValue(bucketingKey);
  logger.log(
    LOG_LEVEL.DEBUG,
    sprintf(LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET, MODULE_NAME$2, bucketValue, userId)
  );
  var trafficAllocationConfig = group.trafficAllocation;
  var bucketedExperimentId = this._findBucket(bucketValue, trafficAllocationConfig);
  return bucketedExperimentId;
};

/**
 * Returns entity ID associated with bucket value
 * @param  {string}   bucketValue
 * @param  {Object[]} trafficAllocationConfig
 * @param  {number}   trafficAllocationConfig[].endOfRange
 * @param  {number}   trafficAllocationConfig[].entityId
 * @return {string|null}   Entity ID for bucketing if bucket value is within traffic allocation boundaries, null otherwise
 */
var _findBucket = function(bucketValue, trafficAllocationConfig) {
  for (var i = 0; i < trafficAllocationConfig.length; i++) {
    if (bucketValue < trafficAllocationConfig[i].endOfRange) {
      return trafficAllocationConfig[i].entityId;
    }
  }
  return null;
};

/**
 * Helper function to generate bucket value in half-closed interval [0, MAX_TRAFFIC_VALUE)
 * @param  {string} bucketingKey String value for bucketing
 * @return {string} the generated bucket value
 * @throws If bucketing value is not a valid string
 */
var _generateBucketValue = function(bucketingKey) {
  try {
    // NOTE: the mmh library already does cast the hash value as an unsigned 32bit int
    // https://github.com/perezd/node-murmurhash/blob/master/murmurhash.js#L115
    var hashValue = murmurhash.v3(bucketingKey, HASH_SEED);
    var ratio = hashValue / MAX_HASH_VALUE;
    return parseInt(ratio * MAX_TRAFFIC_VALUE, 10);
  } catch (ex) {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_BUCKETING_ID, MODULE_NAME$2, bucketingKey, ex.message));
  }
};

var bucketer = {
  bucket: bucket,
  bucketUserIntoExperiment: bucketUserIntoExperiment,
  _findBucket: _findBucket,
  _generateBucketValue: _generateBucketValue,
};

/**
 * Copyright 2016-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var EXPERIMENT_RUNNING_STATUS = 'Running';
var RESERVED_ATTRIBUTE_PREFIX = '$opt_';
var MODULE_NAME$3 = 'PROJECT_CONFIG';

function createMutationSafeDatafileCopy(datafile) {
  var datafileCopy = fns.assign({}, datafile);
  datafileCopy.audiences = (datafile.audiences || []).map(function(audience) {
    return fns.assign({}, audience);
  });
  datafileCopy.experiments = (datafile.experiments || []).map(function(experiment) {
    return fns.assign({}, experiment);
  });
  datafileCopy.featureFlags = (datafile.featureFlags || []).map(function(featureFlag) {
    return fns.assign({}, featureFlag);
  });
  datafileCopy.groups = (datafile.groups || []).map(function(group) {
    var groupCopy = fns.assign({}, group);
    groupCopy.experiments = (group.experiments || []).map(function(experiment) {
      return fns.assign({}, experiment);
    });
    return groupCopy;
  });
  datafileCopy.rollouts = (datafile.rollouts || []).map(function(rollout) {
    var rolloutCopy = fns.assign({}, rollout);
    rolloutCopy.experiments = (rollout.experiments || []).map(function(experiment) {
      return fns.assign({}, experiment);
    });
    return rolloutCopy;
  });
  return datafileCopy;
}

/**
 * Creates projectConfig object to be used for quick project property lookup
 * @param  {Object} datafile JSON datafile representing the project
 * @return {Object} Object representing project configuration
 */
var createProjectConfig = function(datafile) {
  var projectConfig = createMutationSafeDatafileCopy(datafile);

  /*
   * Conditions of audiences in projectConfig.typedAudiences are not
   * expected to be string-encoded as they are here in projectConfig.audiences.
   */
  (projectConfig.audiences || []).forEach(function(audience) {
    audience.conditions = JSON.parse(audience.conditions);
  });
  projectConfig.audiencesById = fns.keyBy(projectConfig.audiences, 'id');
  fns.assign(projectConfig.audiencesById, fns.keyBy(projectConfig.typedAudiences, 'id'));

  projectConfig.attributeKeyMap = fns.keyBy(projectConfig.attributes, 'key');
  projectConfig.eventKeyMap = fns.keyBy(projectConfig.events, 'key');
  projectConfig.groupIdMap = fns.keyBy(projectConfig.groups, 'id');

  var experiments;
  Object.keys(projectConfig.groupIdMap || {}).forEach(function(Id) {
    experiments = projectConfig.groupIdMap[Id].experiments;
    (experiments || []).forEach(function(experiment) {
      projectConfig.experiments.push(fns.assign(experiment, { groupId: Id }));
    });
  });

  projectConfig.rolloutIdMap = fns.keyBy(projectConfig.rollouts || [], 'id');
  objectValues(projectConfig.rolloutIdMap || {}).forEach(function (rollout) {
    (rollout.experiments || []).forEach(function(experiment) {
      projectConfig.experiments.push(experiment);
      // Creates { <variationKey>: <variation> } map inside of the experiment
      experiment.variationKeyMap = fns.keyBy(experiment.variations, 'key');
    });
  });

  projectConfig.experimentKeyMap = fns.keyBy(projectConfig.experiments, 'key');
  projectConfig.experimentIdMap = fns.keyBy(projectConfig.experiments, 'id');

  projectConfig.variationIdMap = {};
  projectConfig.variationVariableUsageMap = {};
  (projectConfig.experiments || []).forEach(function(experiment) {
    // Creates { <variationKey>: <variation> } map inside of the experiment
    experiment.variationKeyMap = fns.keyBy(experiment.variations, 'key');

    // Creates { <variationId>: { key: <variationKey>, id: <variationId> } } mapping for quick lookup
    fns.assign(projectConfig.variationIdMap, fns.keyBy(experiment.variations, 'id'));
    objectValues(experiment.variationKeyMap || {}).forEach(function(variation) {
      if (variation.variables) {
        projectConfig.variationVariableUsageMap[variation.id] = fns.keyBy(variation.variables, 'id');
      }
    });
  });

  // Object containing experiment Ids that exist in any feature
  // for checking that experiment is a feature experiment or not.
  projectConfig.experimentFeatureMap = {};

  projectConfig.featureKeyMap = fns.keyBy(projectConfig.featureFlags || [], 'key');
  objectValues(projectConfig.featureKeyMap || {}).forEach(function(feature) {
    // Json type is represented in datafile as a subtype of string for the sake of backwards compatibility.
    // Converting it to a first-class json type while creating Project Config
    feature.variables.forEach(function(variable) {
      if (variable.type === FEATURE_VARIABLE_TYPES.STRING && variable.subType === FEATURE_VARIABLE_TYPES.JSON) {
        variable.type = FEATURE_VARIABLE_TYPES.JSON;
        delete variable.subType;
      }
    });

    feature.variableKeyMap = fns.keyBy(feature.variables, 'key');
    (feature.experimentIds || []).forEach(function(experimentId) {
      // Add this experiment in experiment-feature map.
      if (projectConfig.experimentFeatureMap[experimentId]) {
        projectConfig.experimentFeatureMap[experimentId].push(feature.id);
      } else {
        projectConfig.experimentFeatureMap[experimentId] = [feature.id];
      }

      var experimentInFeature = projectConfig.experimentIdMap[experimentId];
      // Experiments in feature can only belong to one mutex group.
      if (experimentInFeature.groupId && !feature.groupId) {
        feature.groupId = experimentInFeature.groupId;
      }
    });
  });

  return projectConfig;
};

/**
 * Get experiment ID for the provided experiment key
 * @param  {Object} projectConfig Object representing project configuration
 * @param  {string} experimentKey Experiment key for which ID is to be determined
 * @return {string} Experiment ID corresponding to the provided experiment key
 * @throws If experiment key is not in datafile
 */
var getExperimentId = function(projectConfig, experimentKey) {
  var experiment = projectConfig.experimentKeyMap[experimentKey];
  if (!experiment) {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME$3, experimentKey));
  }
  return experiment.id;
};

/**
 * Get layer ID for the provided experiment key
 * @param  {Object} projectConfig Object representing project configuration
 * @param  {string} experimentId Experiment ID for which layer ID is to be determined
 * @return {string} Layer ID corresponding to the provided experiment key
 * @throws If experiment key is not in datafile
 */
var getLayerId = function(projectConfig, experimentId) {
  var experiment = projectConfig.experimentIdMap[experimentId];
  if (!experiment) {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME$3, experimentId));
  }
  return experiment.layerId;
};

/**
 * Get attribute ID for the provided attribute key
 * @param  {Object}      projectConfig Object representing project configuration
 * @param  {string}      attributeKey  Attribute key for which ID is to be determined
 * @param  {Object}      logger
 * @return {string|null} Attribute ID corresponding to the provided attribute key. Attribute key if it is a reserved attribute.
 */
var getAttributeId = function(projectConfig, attributeKey, logger) {
  var attribute = projectConfig.attributeKeyMap[attributeKey];
  var hasReservedPrefix = attributeKey.indexOf(RESERVED_ATTRIBUTE_PREFIX) === 0;
  if (attribute) {
    if (hasReservedPrefix) {
      logger.log(
        LOG_LEVEL.WARN,
        sprintf(
          'Attribute %s unexpectedly has reserved prefix %s; using attribute ID instead of reserved attribute name.',
          attributeKey,
          RESERVED_ATTRIBUTE_PREFIX
        )
      );
    }
    return attribute.id;
  } else if (hasReservedPrefix) {
    return attributeKey;
  }

  logger.log(LOG_LEVEL.DEBUG, sprintf(ERROR_MESSAGES.UNRECOGNIZED_ATTRIBUTE, MODULE_NAME$3, attributeKey));
  return null;
};

/**
 * Get event ID for the provided
 * @param  {Object}      projectConfig Object representing project configuration
 * @param  {string}      eventKey      Event key for which ID is to be determined
 * @return {string|null} Event ID corresponding to the provided event key
 */
var getEventId = function(projectConfig, eventKey) {
  var event = projectConfig.eventKeyMap[eventKey];
  if (event) {
    return event.id;
  }
  return null;
};

/**
 * Get experiment status for the provided experiment key
 * @param  {Object} projectConfig Object representing project configuration
 * @param  {string} experimentKey Experiment key for which status is to be determined
 * @return {string} Experiment status corresponding to the provided experiment key
 * @throws If experiment key is not in datafile
 */
var getExperimentStatus = function(projectConfig, experimentKey) {
  var experiment = projectConfig.experimentKeyMap[experimentKey];
  if (!experiment) {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME$3, experimentKey));
  }
  return experiment.status;
};

/**
 * Returns whether experiment has a status of 'Running'
 * @param  {Object}  projectConfig Object representing project configuration
 * @param  {string}  experimentKey Experiment key for which status is to be compared with 'Running'
 * @return {Boolean}               true if experiment status is set to 'Running', false otherwise
 */
var isActive = function(projectConfig, experimentKey) {
  return this.getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;
};

/**
 * Determine for given experiment if event is running, which determines whether should be dispatched or not
 */
var isRunning = function(projectConfig, experimentKey) {
  return this.getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;
};

/**
 * Get audience conditions for the experiment
 * @param  {Object}         projectConfig Object representing project configuration
 * @param  {string}         experimentKey Experiment key for which audience conditions are to be determined
 * @return {Array}          Audience conditions for the experiment - can be an array of audience IDs, or a
 *                          nested array of conditions
 *                          Examples: ["5", "6"], ["and", ["or", "1", "2"], "3"]
 * @throws If experiment key is not in datafile
 */
var getExperimentAudienceConditions = function(projectConfig, experimentKey) {
  var experiment = projectConfig.experimentKeyMap[experimentKey];
  if (!experiment) {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME$3, experimentKey));
  }

  return experiment.audienceConditions || experiment.audienceIds;
};

/**
 * Get variation key given experiment key and variation ID
 * @param  {Object} projectConfig Object representing project configuration
 * @param  {string} variationId   ID of the variation
 * @return {string} Variation key or null if the variation ID is not found
 */
var getVariationKeyFromId = function(projectConfig, variationId) {
  if (projectConfig.variationIdMap.hasOwnProperty(variationId)) {
    return projectConfig.variationIdMap[variationId].key;
  }
  return null;
};

/**
 * Get the variation ID given the experiment key and variation key
 * @param  {Object} projectConfig Object representing project configuration
 * @param  {string} experimentKey Key of the experiment the variation belongs to
 * @param  {string} variationKey  The variation key
 * @return {string} the variation ID
 */
var getVariationIdFromExperimentAndVariationKey = function(projectConfig, experimentKey, variationKey) {
  var experiment = projectConfig.experimentKeyMap[experimentKey];
  if (experiment.variationKeyMap.hasOwnProperty(variationKey)) {
    return experiment.variationKeyMap[variationKey].id;
  }
  return null;
};

/**
 * Get experiment from provided experiment key
 * @param  {Object} projectConfig  Object representing project configuration
 * @param  {string} experimentKey  Event key for which experiment IDs are to be retrieved
 * @return {Object} experiment
 * @throws If experiment key is not in datafile
 */
var getExperimentFromKey = function(projectConfig, experimentKey) {
  if (projectConfig.experimentKeyMap.hasOwnProperty(experimentKey)) {
    var experiment = projectConfig.experimentKeyMap[experimentKey];
    if (experiment) {
      return experiment;
    }
  }

  throw new Error(sprintf(ERROR_MESSAGES.EXPERIMENT_KEY_NOT_IN_DATAFILE, MODULE_NAME$3, experimentKey));
};

/**
 * Given an experiment key, returns the traffic allocation within that experiment
 * @param  {Object} projectConfig Object representing project configuration
 * @param  {string} experimentKey Key representing the experiment
 * @return {Array<Object>}        Traffic allocation for the experiment
 * @throws If experiment key is not in datafile
 */
var getTrafficAllocation = function(projectConfig, experimentKey) {
  var experiment = projectConfig.experimentKeyMap[experimentKey];
  if (!experiment) {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME$3, experimentKey));
  }
  return experiment.trafficAllocation;
};

/**
 * Get experiment from provided experiment id. Log an error if no experiment
 * exists in the project config with the given ID.
 * @param  {Object} projectConfig  Object representing project configuration
 * @param  {string} experimentId  ID of desired experiment object
 * @return {Object} Experiment object
 */
var getExperimentFromId = function(projectConfig, experimentId, logger) {
  if (projectConfig.experimentIdMap.hasOwnProperty(experimentId)) {
    var experiment = projectConfig.experimentIdMap[experimentId];
    if (experiment) {
      return experiment;
    }
  }

  logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME$3, experimentId));
  return null;
};

/**
 * Get feature from provided feature key. Log an error if no feature exists in
 * the project config with the given key.
 * @param {Object} projectConfig
 * @param {string} featureKey
 * @param {Object} logger
 * @return {Object|null} Feature object, or null if no feature with the given
 * key exists
 */
var getFeatureFromKey = function(projectConfig, featureKey, logger) {
  if (projectConfig.featureKeyMap.hasOwnProperty(featureKey)) {
    var feature = projectConfig.featureKeyMap[featureKey];
    if (feature) {
      return feature;
    }
  }

  logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME$3, featureKey));
  return null;
};

/**
 * Get the variable with the given key associated with the feature with the
 * given key. If the feature key or the variable key are invalid, log an error
 * message.
 * @param {Object} projectConfig
 * @param {string} featureKey
 * @param {string} variableKey
 * @param {Object} logger
 * @return {Object|null} Variable object, or null one or both of the given
 * feature and variable keys are invalid
 */
var getVariableForFeature = function(projectConfig, featureKey, variableKey, logger) {
  var feature = projectConfig.featureKeyMap[featureKey];
  if (!feature) {
    logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME$3, featureKey));
    return null;
  }

  var variable = feature.variableKeyMap[variableKey];
  if (!variable) {
    logger.log(
      LOG_LEVEL.ERROR,
      sprintf(ERROR_MESSAGES.VARIABLE_KEY_NOT_IN_DATAFILE, MODULE_NAME$3, variableKey, featureKey)
    );
    return null;
  }

  return variable;
};

/**
 * Get the value of the given variable for the given variation. If the given
 * variable has no value for the given variation, return null. Log an error message if the variation is invalid. If the
 * variable or variation are invalid, return null.
 * @param {Object} projectConfig
 * @param {Object} variable
 * @param {Object} variation
 * @param {Object} logger
 * @return {string|null} The value of the given variable for the given
 * variation, or null if the given variable has no value
 * for the given variation or if the variation or variable are invalid
 */
var getVariableValueForVariation = function(projectConfig, variable, variation, logger) {
  if (!variable || !variation) {
    return null;
  }

  if (!projectConfig.variationVariableUsageMap.hasOwnProperty(variation.id)) {
    logger.log(
      LOG_LEVEL.ERROR,
      sprintf(ERROR_MESSAGES.VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT, MODULE_NAME$3, variation.id)
    );
    return null;
  }

  var variableUsages = projectConfig.variationVariableUsageMap[variation.id];
  var variableUsage = variableUsages[variable.id];

  return variableUsage ? variableUsage.value : null;
};

/**
 * Given a variable value in string form, try to cast it to the argument type.
 * If the type cast succeeds, return the type casted value, otherwise log an
 * error and return null.
 * @param {string} variableValue  Variable value in string form
 * @param {string} variableType   Type of the variable whose value was passed
 *                                in the first argument. Must be one of
 *                                FEATURE_VARIABLE_TYPES in
 *                                lib/utils/enums/index.js. The return value's
 *                                type is determined by this argument (boolean
 *                                for BOOLEAN, number for INTEGER or DOUBLE,
 *                                and string for STRING).
 * @param {Object} logger         Logger instance
 * @returns {*}                   Variable value of the appropriate type, or
 *                                null if the type cast failed
 */
var getTypeCastValue = function(variableValue, variableType, logger) {
  var castValue;

  switch (variableType) {
    case FEATURE_VARIABLE_TYPES.BOOLEAN:
      if (variableValue !== 'true' && variableValue !== 'false') {
        logger.log(
          LOG_LEVEL.ERROR,
          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$3, variableValue, variableType)
        );
        castValue = null;
      } else {
        castValue = variableValue === 'true';
      }
      break;

    case FEATURE_VARIABLE_TYPES.INTEGER:
      castValue = parseInt(variableValue, 10);
      if (isNaN(castValue)) {
        logger.log(
          LOG_LEVEL.ERROR,
          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$3, variableValue, variableType)
        );
        castValue = null;
      }
      break;

    case FEATURE_VARIABLE_TYPES.DOUBLE:
      castValue = parseFloat(variableValue);
      if (isNaN(castValue)) {
        logger.log(
          LOG_LEVEL.ERROR,
          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$3, variableValue, variableType)
        );
        castValue = null;
      }
      break;

    case FEATURE_VARIABLE_TYPES.JSON:
      try {
        castValue = JSON.parse(variableValue);
      } catch (e) {
        logger.log(
          LOG_LEVEL.ERROR,
          sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$3, variableValue, variableType)
        );
        castValue = null;
      }
      break;

    default:
      // type is STRING
      castValue = variableValue;
      break;
  }

  return castValue;
};

/**
 * Returns an object containing all audiences in the project config. Keys are audience IDs
 * and values are audience objects.
 * @param projectConfig
 * @returns {Object}
 */
var getAudiencesById = function(projectConfig) {
  return projectConfig.audiencesById;
};

/**
 * Returns true if an event with the given key exists in the datafile, and false otherwise
 * @param {Object} projectConfig
 * @param {string} eventKey
 * @returns {boolean}
 */
var eventWithKeyExists = function(projectConfig, eventKey) {
  return projectConfig.eventKeyMap.hasOwnProperty(eventKey);
};

/**
 *
 * @param {Object} projectConfig
 * @param {string} experimentId
 * @returns {boolean} Returns true if experiment belongs to
 * any feature, false otherwise.
 */
var isFeatureExperiment = function(projectConfig, experimentId) {
  return projectConfig.experimentFeatureMap.hasOwnProperty(experimentId);
};

/**
 * Try to create a project config object from the given datafile and
 * configuration properties.
 * If successful, return the project config object, otherwise throws an error
 * @param  {Object} config
 * @param  {Object} config.datafile
 * @param  {Object} config.jsonSchemaValidator
 * @param  {Object} config.logger
 * @return {Object} Project config object
 */
var tryCreatingProjectConfig = function(config) {
  configValidator.validateDatafile(config.datafile);
  if (!config.jsonSchemaValidator) {
    config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.SKIPPING_JSON_VALIDATION, MODULE_NAME$3));
  } else {
    config.jsonSchemaValidator.validate(config.datafile);
    config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VALID_DATAFILE, MODULE_NAME$3));
  }
  return this.createProjectConfig(config.datafile);
};

var projectConfig = {
  createProjectConfig: createProjectConfig,
  getExperimentId: getExperimentId,
  getLayerId: getLayerId,
  getAttributeId: getAttributeId,
  getEventId: getEventId,
  getExperimentStatus: getExperimentStatus,
  isActive: isActive,
  isRunning: isRunning,
  getExperimentAudienceConditions: getExperimentAudienceConditions,
  getVariationKeyFromId: getVariationKeyFromId,
  getVariationIdFromExperimentAndVariationKey: getVariationIdFromExperimentAndVariationKey,
  getExperimentFromKey: getExperimentFromKey,
  getTrafficAllocation: getTrafficAllocation,
  getExperimentFromId: getExperimentFromId,
  getFeatureFromKey: getFeatureFromKey,
  getVariableForFeature: getVariableForFeature,
  getVariableValueForVariation: getVariableValueForVariation,
  getTypeCastValue: getTypeCastValue,
  getAudiencesById: getAudiencesById,
  eventWithKeyExists: eventWithKeyExists,
  isFeatureExperiment: isFeatureExperiment,
  tryCreatingProjectConfig: tryCreatingProjectConfig,
};

/****************************************************************************
 * Copyright 2018, 2020, Optimizely, Inc. and contributors                  *
 *                                                                          *
 * Licensed under the Apache License, Version 2.0 (the "License");          *
 * you may not use this file except in compliance with the License.         *
 * You may obtain a copy of the License at                                  *
 *                                                                          *
 *    http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                          *
 * Unless required by applicable law or agreed to in writing, software      *
 * distributed under the License is distributed on an "AS IS" BASIS,        *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 * See the License for the specific language governing permissions and      *
 * limitations under the License.                                           *
 ***************************************************************************/

var AND_CONDITION = 'and';
var OR_CONDITION = 'or';
var NOT_CONDITION = 'not';

var DEFAULT_OPERATOR_TYPES = [AND_CONDITION, OR_CONDITION, NOT_CONDITION];

/**
 * Top level method to evaluate conditions
 * @param  {Array|*}    conditions      Nested array of and/or conditions, or a single leaf
 *                                      condition value of any type
 *                                      Example: ['and', '0', ['or', '1', '2']]
 * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition
 *                                      values
 * @return {?Boolean}                   Result of evaluating the conditions using the operator
 *                                      rules and the leaf evaluator. A return value of null
 *                                      indicates that the conditions are invalid or unable to be
 *                                      evaluated
 */
var evaluate = function(conditions, leafEvaluator) {
  if (Array.isArray(conditions)) {
    var firstOperator = conditions[0];
    var restOfConditions = conditions.slice(1);

    if (DEFAULT_OPERATOR_TYPES.indexOf(firstOperator) === -1) {
      // Operator to apply is not explicit - assume 'or'
      firstOperator = OR_CONDITION;
      restOfConditions = conditions;
    }

    switch (firstOperator) {
      case AND_CONDITION:
        return andEvaluator(restOfConditions, leafEvaluator);
      case NOT_CONDITION:
        return notEvaluator(restOfConditions, leafEvaluator);
      default:
        // firstOperator is OR_CONDITION
        return orEvaluator(restOfConditions, leafEvaluator);
    }
  }

  var leafCondition = conditions;
  return leafEvaluator(leafCondition);
};

/**
 * Evaluates an array of conditions as if the evaluator had been applied
 * to each entry and the results AND-ed together.
 * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]
 * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values
 * @return {?Boolean}                   Result of evaluating the conditions. A return value of null
 *                                      indicates that the conditions are invalid or unable to be
 *                                      evaluated.
 */
function andEvaluator(conditions, leafEvaluator) {
  var sawNullResult = false;
  for (var i = 0; i < conditions.length; i++) {
    var conditionResult = evaluate(conditions[i], leafEvaluator);
    if (conditionResult === false) {
      return false;
    }
    if (conditionResult === null) {
      sawNullResult = true;
    }
  }
  return sawNullResult ? null : true;
}

/**
 * Evaluates an array of conditions as if the evaluator had been applied
 * to a single entry and NOT was applied to the result.
 * @param  {Array}      conditions      Array of conditions ex: [operand_1]
 * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values
 * @return {?Boolean}                   Result of evaluating the conditions. A return value of null
 *                                      indicates that the conditions are invalid or unable to be
 *                                      evaluated.
 */
function notEvaluator(conditions, leafEvaluator) {
  if (conditions.length > 0) {
    var result = evaluate(conditions[0], leafEvaluator);
    return result === null ? null : !result;
  }
  return null;
}

/**
 * Evaluates an array of conditions as if the evaluator had been applied
 * to each entry and the results OR-ed together.
 * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]
 * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values
 * @return {?Boolean}                   Result of evaluating the conditions. A return value of null
 *                                      indicates that the conditions are invalid or unable to be
 *                                      evaluated.
 */
function orEvaluator(conditions, leafEvaluator) {
  var sawNullResult = false;
  for (var i = 0; i < conditions.length; i++) {
    var conditionResult = evaluate(conditions[i], leafEvaluator);
    if (conditionResult === true) {
      return true;
    }
    if (conditionResult === null) {
      sawNullResult = true;
    }
  }
  return sawNullResult ? null : false;
}

var conditionTreeEvaluator = {
  evaluate: evaluate,
};

/****************************************************************************
 * Copyright 2018-2019, 2020 Optimizely, Inc. and contributors              *
 *                                                                          *
 * Licensed under the Apache License, Version 2.0 (the "License");          *
 * you may not use this file except in compliance with the License.         *
 * You may obtain a copy of the License at                                  *
 *                                                                          *
 *    http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                          *
 * Unless required by applicable law or agreed to in writing, software      *
 * distributed under the License is distributed on an "AS IS" BASIS,        *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 * See the License for the specific language governing permissions and      *
 * limitations under the License.                                           *
 ***************************************************************************/

var MODULE_NAME$4 = 'CUSTOM_ATTRIBUTE_CONDITION_EVALUATOR';

var EXACT_MATCH_TYPE = 'exact';
var EXISTS_MATCH_TYPE = 'exists';
var GREATER_THAN_MATCH_TYPE = 'gt';
var LESS_THAN_MATCH_TYPE = 'lt';
var SUBSTRING_MATCH_TYPE = 'substring';

var MATCH_TYPES = [
  EXACT_MATCH_TYPE,
  EXISTS_MATCH_TYPE,
  GREATER_THAN_MATCH_TYPE,
  LESS_THAN_MATCH_TYPE,
  SUBSTRING_MATCH_TYPE,
];

var EVALUATORS_BY_MATCH_TYPE = {};
EVALUATORS_BY_MATCH_TYPE[EXACT_MATCH_TYPE] = exactEvaluator;
EVALUATORS_BY_MATCH_TYPE[EXISTS_MATCH_TYPE] = existsEvaluator;
EVALUATORS_BY_MATCH_TYPE[GREATER_THAN_MATCH_TYPE] = greaterThanEvaluator;
EVALUATORS_BY_MATCH_TYPE[LESS_THAN_MATCH_TYPE] = lessThanEvaluator;
EVALUATORS_BY_MATCH_TYPE[SUBSTRING_MATCH_TYPE] = substringEvaluator;

/**
 * Given a custom attribute audience condition and user attributes, evaluate the
 * condition against the attributes.
 * @param  {Object}     condition
 * @param  {Object}     userAttributes
 * @param  {Object}     logger
 * @return {?Boolean}   true/false if the given user attributes match/don't match the given condition,
 *                                      null if the given user attributes and condition can't be evaluated
 * TODO: Change to accept and object with named properties
 */
var evaluate$1 = function(condition, userAttributes, logger) {
  var conditionMatch = condition.match;
  if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {
    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$4, JSON.stringify(condition)));
    return null;
  }

  var attributeKey = condition.name;
  if (!userAttributes.hasOwnProperty(attributeKey) && conditionMatch != EXISTS_MATCH_TYPE) {
    logger.log(
      LOG_LEVEL.DEBUG,
      sprintf(LOG_MESSAGES.MISSING_ATTRIBUTE_VALUE, MODULE_NAME$4, JSON.stringify(condition), attributeKey)
    );
    return null;
  }

  var evaluatorForMatch = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || exactEvaluator;
  return evaluatorForMatch(condition, userAttributes, logger);
};

/**
 * Returns true if the value is valid for exact conditions. Valid values include
 * strings, booleans, and numbers that aren't NaN, -Infinity, or Infinity.
 * @param value
 * @returns {Boolean}
 */
function isValueTypeValidForExactConditions(value) {
  return typeof value === 'string' || typeof value === 'boolean' || fns.isNumber(value);
}

/**
 * Evaluate the given exact match condition for the given user attributes
 * @param   {Object}    condition
 * @param   {Object}    userAttributes
 * @param   {Object}    logger
 * @return  {?Boolean}  true if the user attribute value is equal (===) to the condition value,
 *                      false if the user attribute value is not equal (!==) to the condition value,
 *                      null if the condition value or user attribute value has an invalid type, or
 *                      if there is a mismatch between the user attribute type and the condition value
 *                      type
 */
function exactEvaluator(condition, userAttributes, logger) {
  var conditionValue = condition.value;
  var conditionValueType = typeof conditionValue;
  var conditionName = condition.name;
  var userValue = userAttributes[conditionName];
  var userValueType = typeof userValue;

  if (
    !isValueTypeValidForExactConditions(conditionValue) ||
    (fns.isNumber(conditionValue) && !fns.isSafeInteger(conditionValue))
  ) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$4, JSON.stringify(condition))
    );
    return null;
  }

  if (userValue === null) {
    logger.log(
      LOG_LEVEL.DEBUG,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$4, JSON.stringify(condition), conditionName)
    );
    return null;
  }

  if (!isValueTypeValidForExactConditions(userValue) || conditionValueType !== userValueType) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$4, JSON.stringify(condition), userValueType, conditionName)
    );
    return null;
  }

  if (fns.isNumber(userValue) && !fns.isSafeInteger(userValue)) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$4, JSON.stringify(condition), conditionName)
    );
    return null;
  }

  return conditionValue === userValue;
}

/**
 * Evaluate the given exists match condition for the given user attributes
 * @param   {Object}  condition
 * @param   {Object}  userAttributes
 * @returns {Boolean} true if both:
 *                      1) the user attributes have a value for the given condition, and
 *                      2) the user attribute value is neither null nor undefined
 *                    Returns false otherwise
 */
function existsEvaluator(condition, userAttributes) {
  var userValue = userAttributes[condition.name];
  return typeof userValue !== 'undefined' && userValue !== null;
}

/**
 * Evaluate the given greater than match condition for the given user attributes
 * @param   {Object}    condition
 * @param   {Object}    userAttributes
 * @param   {Object}    logger
 * @returns {?Boolean}  true if the user attribute value is greater than the condition value,
 *                      false if the user attribute value is less than or equal to the condition value,
 *                      null if the condition value isn't a number or the user attribute value
 *                      isn't a number
 */
function greaterThanEvaluator(condition, userAttributes, logger) {
  var conditionName = condition.name;
  var userValue = userAttributes[conditionName];
  var userValueType = typeof userValue;
  var conditionValue = condition.value;

  if (!fns.isSafeInteger(conditionValue)) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$4, JSON.stringify(condition))
    );
    return null;
  }

  if (userValue === null) {
    logger.log(
      LOG_LEVEL.DEBUG,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$4, JSON.stringify(condition), conditionName)
    );
    return null;
  }

  if (!fns.isNumber(userValue)) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$4, JSON.stringify(condition), userValueType, conditionName)
    );
    return null;
  }

  if (!fns.isSafeInteger(userValue)) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$4, JSON.stringify(condition), conditionName)
    );
    return null;
  }

  return userValue > conditionValue;
}

/**
 * Evaluate the given less than match condition for the given user attributes
 * @param   {Object}    condition
 * @param   {Object}    userAttributes
 * @param   {Object}    logger
 * @returns {?Boolean}  true if the user attribute value is less than the condition value,
 *                      false if the user attribute value is greater than or equal to the condition value,
 *                      null if the condition value isn't a number or the user attribute value isn't a
 *                      number
 */
function lessThanEvaluator(condition, userAttributes, logger) {
  var conditionName = condition.name;
  var userValue = userAttributes[condition.name];
  var userValueType = typeof userValue;
  var conditionValue = condition.value;

  if (!fns.isSafeInteger(conditionValue)) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$4, JSON.stringify(condition))
    );
    return null;
  }

  if (userValue === null) {
    logger.log(
      LOG_LEVEL.DEBUG,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$4, JSON.stringify(condition), conditionName)
    );
    return null;
  }

  if (!fns.isNumber(userValue)) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$4, JSON.stringify(condition), userValueType, conditionName)
    );
    return null;
  }

  if (!fns.isSafeInteger(userValue)) {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$4, JSON.stringify(condition), conditionName)
    );
    return null;
  }

  return userValue < conditionValue;
}

/**
 * Evaluate the given substring match condition for the given user attributes
 * @param   {Object}    condition
 * @param   {Object}    userAttributes
 * @param   {Object}    logger
 * @returns {?Boolean}  true if the condition value is a substring of the user attribute value,
 *                      false if the condition value is not a substring of the user attribute value,
 *                      null if the condition value isn't a string or the user attribute value
 *                      isn't a string
 */
function substringEvaluator(condition, userAttributes, logger) {
  var conditionName = condition.name;
  var userValue = userAttributes[condition.name];
  var userValueType = typeof userValue;
  var conditionValue = condition.value;

  if (typeof conditionValue !== 'string') {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$4, JSON.stringify(condition))
    );
    return null;
  }

  if (userValue === null) {
    logger.log(
      LOG_LEVEL.DEBUG,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$4, JSON.stringify(condition), conditionName)
    );
    return null;
  }

  if (typeof userValue !== 'string') {
    logger.log(
      LOG_LEVEL.WARNING,
      sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$4, JSON.stringify(condition), userValueType, conditionName)
    );
    return null;
  }

  return userValue.indexOf(conditionValue) !== -1;
}

var customAttributeConditionEvaluator = {
  evaluate: evaluate$1,
};

/**
 * Copyright 2016, 2018-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger = getLogger();
var MODULE_NAME$5 = 'AUDIENCE_EVALUATOR';

/**
 * Construct an instance of AudienceEvaluator with given options
 * @param {Object=} UNSTABLE_conditionEvaluators A map of condition evaluators provided by the consumer. This enables matching
 *                                                   condition types which are not supported natively by the SDK. Note that built in
 *                                                   Optimizely evaluators cannot be overridden.
 * @constructor
 */
function AudienceEvaluator(UNSTABLE_conditionEvaluators) {
  this.typeToEvaluatorMap = fns.assign({}, UNSTABLE_conditionEvaluators, {
    custom_attribute: customAttributeConditionEvaluator,
  });
}

/**
 * Determine if the given user attributes satisfy the given audience conditions
 * @param  {Array|String|null|undefined}  audienceConditions    Audience conditions to match the user attributes against - can be an array
 *                                                              of audience IDs, a nested array of conditions, or a single leaf condition.
 *                                                              Examples: ["5", "6"], ["and", ["or", "1", "2"], "3"], "1"
 * @param  {Object}                       audiencesById         Object providing access to full audience objects for audience IDs
 *                                                              contained in audienceConditions. Keys should be audience IDs, values
 *                                                              should be full audience objects with conditions properties
 * @param  {Object}                       [userAttributes]      User attributes which will be used in determining if audience conditions
 *                                                              are met. If not provided, defaults to an empty object
 * @return {Boolean}                                            true if the user attributes match the given audience conditions, false
 *                                                              otherwise
 */
AudienceEvaluator.prototype.evaluate = function(audienceConditions, audiencesById, userAttributes) {
  // if there are no audiences, return true because that means ALL users are included in the experiment
  if (!audienceConditions || audienceConditions.length === 0) {
    return true;
  }

  if (!userAttributes) {
    userAttributes = {};
  }

  var evaluateAudience = function(audienceId) {
    var audience = audiencesById[audienceId];
    if (audience) {
      logger.log(
        LOG_LEVEL.DEBUG,
        sprintf(LOG_MESSAGES.EVALUATING_AUDIENCE, MODULE_NAME$5, audienceId, JSON.stringify(audience.conditions))
      );
      var result = conditionTreeEvaluator.evaluate(
        audience.conditions,
        this.evaluateConditionWithUserAttributes.bind(this, userAttributes)
      );
      var resultText = result === null ? 'UNKNOWN' : result.toString().toUpperCase();
      logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT, MODULE_NAME$5, audienceId, resultText));
      return result;
    }

    return null;
  }.bind(this);

  return conditionTreeEvaluator.evaluate(audienceConditions, evaluateAudience) || false;
};

/**
 * Wrapper around evaluator.evaluate that is passed to the conditionTreeEvaluator.
 * Evaluates the condition provided given the user attributes if an evaluator has been defined for the condition type.
 * @param  {Object} userAttributes     A map of user attributes.
 * @param  {Object} condition          A single condition object to evaluate.
 * @return {Boolean|null}              true if the condition is satisfied, null if a matcher is not found.
 */
AudienceEvaluator.prototype.evaluateConditionWithUserAttributes = function(userAttributes, condition) {
  var evaluator = this.typeToEvaluatorMap[condition.type];
  if (!evaluator) {
    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_CONDITION_TYPE, MODULE_NAME$5, JSON.stringify(condition)));
    return null;
  }
  try {
    return evaluator.evaluate(condition, userAttributes, logger);
  } catch (err) {
    logger.log(
      LOG_LEVEL.ERROR,
      sprintf(ERROR_MESSAGES.CONDITION_EVALUATOR_ERROR, MODULE_NAME$5, condition.type, err.message)
    );
  }
  return null;
};

/**
 * Copyright 2018, 2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Validates provided value is a non-empty string
 * @param  {string}  input
 * @return {boolean} True for non-empty string, false otherwise
 */
var validate$2 = function(input) {
  return typeof input === 'string' && input !== '';
};

var stringValidator = {
  validate: validate$2,
};

/****************************************************************************
 * Copyright 2017-2020 Optimizely, Inc. and contributors                    *
 *                                                                          *
 * Licensed under the Apache License, Version 2.0 (the "License");          *
 * you may not use this file except in compliance with the License.         *
 * You may obtain a copy of the License at                                  *
 *                                                                          *
 *    http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                          *
 * Unless required by applicable law or agreed to in writing, software      *
 * distributed under the License is distributed on an "AS IS" BASIS,        *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 * See the License for the specific language governing permissions and      *
 * limitations under the License.                                           *
 ***************************************************************************/

var MODULE_NAME$6 = 'DECISION_SERVICE';
var ERROR_MESSAGES$1 = enums.ERROR_MESSAGES;
var LOG_LEVEL$1 = enums.LOG_LEVEL;
var LOG_MESSAGES$1 = enums.LOG_MESSAGES;
var DECISION_SOURCES$1 = enums.DECISION_SOURCES;
var AUDIENCE_EVALUATION_TYPES$1 = enums.AUDIENCE_EVALUATION_TYPES;

/**
 * Optimizely's decision service that determines which variation of an experiment the user will be allocated to.
 *
 * The decision service contains all logic around how a user decision is made. This includes all of the following (in order):
 *   1. Checking experiment status
 *   2. Checking forced bucketing
 *   3. Checking whitelisting
 *   4. Checking user profile service for past bucketing decisions (sticky bucketing)
 *   5. Checking audience targeting
 *   6. Using Murmurhash3 to bucket the user.
 *
 * @constructor
 * @param   {Object} options
 * @param   {Object} options.userProfileService An instance of the user profile service for sticky bucketing.
 * @param   {Object} options.logger An instance of a logger to log messages.
 * @returns {Object}
 */
function DecisionService(options) {
  this.audienceEvaluator = new AudienceEvaluator(options.UNSTABLE_conditionEvaluators);
  this.forcedVariationMap = {};
  this.logger = options.logger;
  this.userProfileService = options.userProfileService || null;
}

/**
 * Gets variation where visitor will be bucketed.
 * @param  {Object}      configObj      The parsed project configuration object
 * @param  {string}      experimentKey
 * @param  {string}      userId
 * @param  {Object}      attributes
 * @return {string|null} the variation the user is bucketed into.
 */
DecisionService.prototype.getVariation = function(configObj, experimentKey, userId, attributes) {
  // by default, the bucketing ID should be the user ID
  var bucketingId = this._getBucketingId(userId, attributes);

  if (!this.__checkIfExperimentIsActive(configObj, experimentKey)) {
    return null;
  }
  var experiment = configObj.experimentKeyMap[experimentKey];
  var forcedVariationKey = this.getForcedVariation(configObj, experimentKey, userId);
  if (forcedVariationKey) {
    return forcedVariationKey;
  }

  var variation = this.__getWhitelistedVariation(experiment, userId);
  if (variation) {
    return variation.key;
  }

  // check for sticky bucketing
  var experimentBucketMap = this.__resolveExperimentBucketMap(userId, attributes);
  variation = this.__getStoredVariation(configObj, experiment, userId, experimentBucketMap);
  if (variation) {
    this.logger.log(
      LOG_LEVEL$1.INFO,
      sprintf(LOG_MESSAGES$1.RETURNING_STORED_VARIATION, MODULE_NAME$6, variation.key, experimentKey, userId)
    );
    return variation.key;
  }

  // Perform regular targeting and bucketing
  if (!this.__checkIfUserIsInAudience(configObj, experimentKey, AUDIENCE_EVALUATION_TYPES$1.EXPERIMENT, userId, attributes, '')) {
    var userDoesNotMeetConditionsLogMessage = sprintf(
      LOG_MESSAGES$1.USER_NOT_IN_EXPERIMENT,
      MODULE_NAME$6,
      userId,
      experimentKey
    );
    this.logger.log(LOG_LEVEL$1.INFO, userDoesNotMeetConditionsLogMessage);
    return null;
  }

  var bucketerParams = this.__buildBucketerParams(configObj, experimentKey, bucketingId, userId);
  var variationId = bucketer.bucket(bucketerParams);
  variation = configObj.variationIdMap[variationId];
  if (!variation) {
    var userHasNoVariationLogMessage = sprintf(
      LOG_MESSAGES$1.USER_HAS_NO_VARIATION,
      MODULE_NAME$6,
      userId,
      experimentKey
    );
    this.logger.log(LOG_LEVEL$1.DEBUG, userHasNoVariationLogMessage);
    return null;
  }

  var userInVariationLogMessage = sprintf(
    LOG_MESSAGES$1.USER_HAS_VARIATION,
    MODULE_NAME$6,
    userId,
    variation.key,
    experimentKey
  );
  this.logger.log(LOG_LEVEL$1.INFO, userInVariationLogMessage);
  // persist bucketing
  this.__saveUserProfile(experiment, variation, userId, experimentBucketMap);

  return variation.key;
};

/**
 * Merges attributes from attributes[STICKY_BUCKETING_KEY] and userProfileService
 * @param  {Object} attributes
 * @return {Object} finalized copy of experiment_bucket_map
 */
DecisionService.prototype.__resolveExperimentBucketMap = function(userId, attributes) {
  attributes = attributes || {};
  var userProfile = this.__getUserProfile(userId) || {};
  var attributeExperimentBucketMap = attributes[enums.CONTROL_ATTRIBUTES.STICKY_BUCKETING_KEY];
  return fns.assign({}, userProfile.experiment_bucket_map, attributeExperimentBucketMap);
};

/**
 * Checks whether the experiment is running
 * @param  {Object}  configObj     The parsed project configuration object
 * @param  {string}  experimentKey Key of experiment being validated
 * @param  {string}  userId        ID of user
 * @return {boolean} True if experiment is running
 */
DecisionService.prototype.__checkIfExperimentIsActive = function(configObj, experimentKey) {
  if (!projectConfig.isActive(configObj, experimentKey)) {
    var experimentNotRunningLogMessage = sprintf(LOG_MESSAGES$1.EXPERIMENT_NOT_RUNNING, MODULE_NAME$6, experimentKey);
    this.logger.log(LOG_LEVEL$1.INFO, experimentNotRunningLogMessage);
    return false;
  }

  return true;
};

/**
 * Checks if user is whitelisted into any variation and return that variation if so
 * @param  {Object} experiment
 * @param  {string} userId
 * @return {string|null} Forced variation if it exists for user ID, otherwise null
 */
DecisionService.prototype.__getWhitelistedVariation = function(experiment, userId) {
  if (experiment.forcedVariations && experiment.forcedVariations.hasOwnProperty(userId)) {
    var forcedVariationKey = experiment.forcedVariations[userId];
    if (experiment.variationKeyMap.hasOwnProperty(forcedVariationKey)) {
      var forcedBucketingSucceededMessageLog = sprintf(
        LOG_MESSAGES$1.USER_FORCED_IN_VARIATION,
        MODULE_NAME$6,
        userId,
        forcedVariationKey
      );
      this.logger.log(LOG_LEVEL$1.INFO, forcedBucketingSucceededMessageLog);
      return experiment.variationKeyMap[forcedVariationKey];
    } else {
      var forcedBucketingFailedMessageLog = sprintf(
        LOG_MESSAGES$1.FORCED_BUCKETING_FAILED,
        MODULE_NAME$6,
        forcedVariationKey,
        userId
      );
      this.logger.log(LOG_LEVEL$1.ERROR, forcedBucketingFailedMessageLog);
      return null;
    }
  }

  return null;
};

/**
 * Checks whether the user is included in experiment audience
 * @param  {Object}  configObj            The parsed project configuration object
 * @param  {string}  experimentKey        Key of experiment being validated
 * @param  {string}  evaluationAttribute  String representing experiment key or rule
 * @param  {string}  userId               ID of user
 * @param  {Object}  attributes           Optional parameter for user's attributes
 * @param  {string}  loggingKey           String representing experiment key or rollout rule. To be used in log messages only.
 * @return {boolean} True if user meets audience conditions
 */
DecisionService.prototype.__checkIfUserIsInAudience = function(configObj, experimentKey, evaluationAttribute, userId, attributes, loggingKey) {
  var experimentAudienceConditions = projectConfig.getExperimentAudienceConditions(configObj, experimentKey);
  var audiencesById = projectConfig.getAudiencesById(configObj);
  this.logger.log(
    LOG_LEVEL$1.DEBUG,
    sprintf(
      LOG_MESSAGES$1.EVALUATING_AUDIENCES_COMBINED,
      MODULE_NAME$6,
      evaluationAttribute,
      loggingKey || experimentKey,
      JSON.stringify(experimentAudienceConditions)
    )
  );
  var result = this.audienceEvaluator.evaluate(experimentAudienceConditions, audiencesById, attributes);
  this.logger.log(
    LOG_LEVEL$1.INFO,
    sprintf(
      LOG_MESSAGES$1.AUDIENCE_EVALUATION_RESULT_COMBINED,
      MODULE_NAME$6,
      evaluationAttribute,
      loggingKey || experimentKey,
      result.toString().toUpperCase()
    )
  );

  return result;
};

/**
 * Given an experiment key and user ID, returns params used in bucketer call
 * @param  configObj     The parsed project configuration object
 * @param  experimentKey Experiment key used for bucketer
 * @param  bucketingId   ID to bucket user into
 * @param  userId        ID of user to be bucketed
 * @return {Object}
 */
DecisionService.prototype.__buildBucketerParams = function(configObj, experimentKey, bucketingId, userId) {
  var bucketerParams = {};
  bucketerParams.experimentKey = experimentKey;
  bucketerParams.experimentId = projectConfig.getExperimentId(configObj, experimentKey);
  bucketerParams.userId = userId;
  bucketerParams.trafficAllocationConfig = projectConfig.getTrafficAllocation(configObj, experimentKey);
  bucketerParams.experimentKeyMap = configObj.experimentKeyMap;
  bucketerParams.groupIdMap = configObj.groupIdMap;
  bucketerParams.variationIdMap = configObj.variationIdMap;
  bucketerParams.logger = this.logger;
  bucketerParams.bucketingId = bucketingId;
  return bucketerParams;
};

/**
 * Pull the stored variation out of the experimentBucketMap for an experiment/userId
 * @param  {Object} configObj           The parsed project configuration object
 * @param  {Object} experiment
 * @param  {String} userId
 * @param  {Object} experimentBucketMap mapping experiment => { variation_id: <variationId> }
 * @return {Object} the stored variation or null if the user profile does not have one for the given experiment
 */
DecisionService.prototype.__getStoredVariation = function(configObj, experiment, userId, experimentBucketMap) {
  if (experimentBucketMap.hasOwnProperty(experiment.id)) {
    var decision = experimentBucketMap[experiment.id];
    var variationId = decision.variation_id;
    if (configObj.variationIdMap.hasOwnProperty(variationId)) {
      return configObj.variationIdMap[decision.variation_id];
    } else {
      this.logger.log(
        LOG_LEVEL$1.INFO,
        sprintf(LOG_MESSAGES$1.SAVED_VARIATION_NOT_FOUND, MODULE_NAME$6, userId, variationId, experiment.key)
      );
    }
  }

  return null;
};

/**
 * Get the user profile with the given user ID
 * @param  {string} userId
 * @return {Object|undefined} the stored user profile or undefined if one isn't found
 */
DecisionService.prototype.__getUserProfile = function(userId) {
  var userProfile = {
    user_id: userId,
    experiment_bucket_map: {},
  };

  if (!this.userProfileService) {
    return userProfile;
  }

  try {
    return this.userProfileService.lookup(userId);
  } catch (ex) {
    this.logger.log(
      LOG_LEVEL$1.ERROR,
      sprintf(ERROR_MESSAGES$1.USER_PROFILE_LOOKUP_ERROR, MODULE_NAME$6, userId, ex.message)
    );
  }
};

/**
 * Saves the bucketing decision to the user profile
 * @param {Object} userProfile
 * @param {Object} experiment
 * @param {Object} variation
 * @param {Object} experimentBucketMap
 */
DecisionService.prototype.__saveUserProfile = function(experiment, variation, userId, experimentBucketMap) {
  if (!this.userProfileService) {
    return;
  }

  try {
    experimentBucketMap[experiment.id] = {
      variation_id: variation.id
    };

    this.userProfileService.save({
      user_id: userId,
      experiment_bucket_map: experimentBucketMap,
    });

    this.logger.log(
      LOG_LEVEL$1.INFO,
      sprintf(LOG_MESSAGES$1.SAVED_VARIATION, MODULE_NAME$6, variation.key, experiment.key, userId)
    );
  } catch (ex) {
    this.logger.log(LOG_LEVEL$1.ERROR, sprintf(ERROR_MESSAGES$1.USER_PROFILE_SAVE_ERROR, MODULE_NAME$6, userId, ex.message));
  }
};

/**
 * Given a feature, user ID, and attributes, returns an object representing a
 * decision. If the user was bucketed into a variation for the given feature
 * and attributes, the returned decision object will have variation and
 * experiment properties (both objects), as well as a decisionSource property.
 * decisionSource indicates whether the decision was due to a rollout or an
 * experiment.
 * @param   {Object} configObj  The parsed project configuration object
 * @param   {Object} feature    A feature flag object from project configuration
 * @param   {String} userId     A string identifying the user, for bucketing
 * @param   {Object} attributes Optional user attributes
 * @return  {Object} An object with experiment, variation, and decisionSource
 * properties. If the user was not bucketed into a variation, the variation
 * property is null.
 */
DecisionService.prototype.getVariationForFeature = function(configObj, feature, userId, attributes) {
  var experimentDecision = this._getVariationForFeatureExperiment(configObj, feature, userId, attributes);
  if (experimentDecision.variation !== null) {
    return experimentDecision;
  }

  var rolloutDecision = this._getVariationForRollout(configObj, feature, userId, attributes);
  if (rolloutDecision.variation !== null) {
    this.logger.log(LOG_LEVEL$1.DEBUG, sprintf(LOG_MESSAGES$1.USER_IN_ROLLOUT, MODULE_NAME$6, userId, feature.key));
    return rolloutDecision;
  }

  this.logger.log(LOG_LEVEL$1.DEBUG, sprintf(LOG_MESSAGES$1.USER_NOT_IN_ROLLOUT, MODULE_NAME$6, userId, feature.key));
  return rolloutDecision;
};

DecisionService.prototype._getVariationForFeatureExperiment = function(configObj, feature, userId, attributes) {
  var experiment = null;
  var variationKey = null;

  if (feature.hasOwnProperty('groupId')) {
    var group = configObj.groupIdMap[feature.groupId];
    if (group) {
      experiment = this._getExperimentInGroup(configObj, group, userId);
      if (experiment && feature.experimentIds.indexOf(experiment.id) !== -1) {
        variationKey = this.getVariation(configObj, experiment.key, userId, attributes);
      }
    }
  } else if (feature.experimentIds.length > 0) {
    // If the feature does not have a group ID, then it can only be associated
    // with one experiment, so we look at the first experiment ID only
    experiment = projectConfig.getExperimentFromId(configObj, feature.experimentIds[0], this.logger);
    if (experiment) {
      variationKey = this.getVariation(configObj, experiment.key, userId, attributes);
    }
  } else {
    this.logger.log(LOG_LEVEL$1.DEBUG, sprintf(LOG_MESSAGES$1.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME$6, feature.key));
  }

  var variation = null;
  if (variationKey !== null && experiment !== null) {
    variation = experiment.variationKeyMap[variationKey];
  }
  return {
    experiment: experiment,
    variation: variation,
    decisionSource: DECISION_SOURCES$1.FEATURE_TEST,
  };
};

DecisionService.prototype._getExperimentInGroup = function(configObj, group, userId) {
  var experimentId = bucketer.bucketUserIntoExperiment(group, userId, userId, this.logger);
  if (experimentId) {
    this.logger.log(
      LOG_LEVEL$1.INFO,
      sprintf(LOG_MESSAGES$1.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME$6, userId, experimentId, group.id)
    );
    var experiment = projectConfig.getExperimentFromId(configObj, experimentId, this.logger);
    if (experiment) {
      return experiment;
    }
  }

  this.logger.log(
    LOG_LEVEL$1.INFO,
    sprintf(LOG_MESSAGES$1.USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP, MODULE_NAME$6, userId, group.id)
  );
  return null;
};

DecisionService.prototype._getVariationForRollout = function(configObj, feature, userId, attributes) {
  if (!feature.rolloutId) {
    this.logger.log(LOG_LEVEL$1.DEBUG, sprintf(LOG_MESSAGES$1.NO_ROLLOUT_EXISTS, MODULE_NAME$6, feature.key));
    return {
      experiment: null,
      variation: null,
      decisionSource: DECISION_SOURCES$1.ROLLOUT,
    };
  }

  var rollout = configObj.rolloutIdMap[feature.rolloutId];
  if (!rollout) {
    this.logger.log(
      LOG_LEVEL$1.ERROR,
      sprintf(ERROR_MESSAGES$1.INVALID_ROLLOUT_ID, MODULE_NAME$6, feature.rolloutId, feature.key)
    );
    return {
      experiment: null,
      variation: null,
      decisionSource: DECISION_SOURCES$1.ROLLOUT,
    };
  }

  if (rollout.experiments.length === 0) {
    this.logger.log(LOG_LEVEL$1.ERROR, sprintf(LOG_MESSAGES$1.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME$6, feature.rolloutId));
    return {
      experiment: null,
      variation: null,
      decisionSource: DECISION_SOURCES$1.ROLLOUT,
    };
  }

  var bucketingId = this._getBucketingId(userId, attributes);

  // The end index is length - 1 because the last experiment is assumed to be
  // "everyone else", which will be evaluated separately outside this loop
  var endIndex = rollout.experiments.length - 1;
  var index;
  var rolloutRule;
  var bucketerParams;
  var variationId;
  var variation;
  var loggingKey;
  for (index = 0; index < endIndex; index++) {
    rolloutRule = configObj.experimentKeyMap[rollout.experiments[index].key];
    loggingKey = index + 1;

    if (!this.__checkIfUserIsInAudience(configObj, rolloutRule.key, AUDIENCE_EVALUATION_TYPES$1.RULE, userId, attributes, loggingKey)) {
      this.logger.log(
        LOG_LEVEL$1.DEBUG,
        sprintf(LOG_MESSAGES$1.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME$6, userId, loggingKey)
      );
      continue;
    }

    this.logger.log(
      LOG_LEVEL$1.DEBUG,
      sprintf(LOG_MESSAGES$1.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME$6, userId, loggingKey)
    );
    bucketerParams = this.__buildBucketerParams(configObj, rolloutRule.key, bucketingId, userId);
    variationId = bucketer.bucket(bucketerParams);
    variation = configObj.variationIdMap[variationId];
    if (variation) {
      this.logger.log(
        LOG_LEVEL$1.DEBUG,
        sprintf(LOG_MESSAGES$1.USER_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME$6, userId, loggingKey)
      );
      return {
        experiment: rolloutRule,
        variation: variation,
        decisionSource: DECISION_SOURCES$1.ROLLOUT,
      };
    } else {
      this.logger.log(
        LOG_LEVEL$1.DEBUG,
        sprintf(LOG_MESSAGES$1.USER_NOT_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME$6, userId, loggingKey)
      );
      break;
    }
  }

  var everyoneElseRule = configObj.experimentKeyMap[rollout.experiments[endIndex].key];
  if (this.__checkIfUserIsInAudience(configObj, everyoneElseRule.key, AUDIENCE_EVALUATION_TYPES$1.RULE, userId, attributes, 'Everyone Else')) {
    this.logger.log(
      LOG_LEVEL$1.DEBUG,
      sprintf(LOG_MESSAGES$1.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME$6, userId, 'Everyone Else')
    );
    bucketerParams = this.__buildBucketerParams(configObj, everyoneElseRule.key, bucketingId, userId);
    variationId = bucketer.bucket(bucketerParams);
    variation = configObj.variationIdMap[variationId];
    if (variation) {
      this.logger.log(
        LOG_LEVEL$1.DEBUG,
        sprintf(LOG_MESSAGES$1.USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME$6, userId)
      );
      return {
        experiment: everyoneElseRule,
        variation: variation,
        decisionSource: DECISION_SOURCES$1.ROLLOUT,
      };
    } else {
      this.logger.log(
        LOG_LEVEL$1.DEBUG,
        sprintf(LOG_MESSAGES$1.USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME$6, userId)
      );
    }
  }

  return {
    experiment: null,
    variation: null,
    decisionSource: DECISION_SOURCES$1.ROLLOUT,
  };
};

/**
 * Get bucketing Id from user attributes.
 * @param {String} userId
 * @param {Object} attributes
 * @returns {String} Bucketing Id if it is a string type in attributes, user Id otherwise.
 */
DecisionService.prototype._getBucketingId = function(userId, attributes) {
  var bucketingId = userId;

  // If the bucketing ID key is defined in attributes, than use that in place of the userID for the murmur hash key
  if (
    attributes != null &&
    typeof attributes === 'object' &&
    attributes.hasOwnProperty(enums.CONTROL_ATTRIBUTES.BUCKETING_ID)
  ) {
    if (typeof attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID] === 'string') {
      bucketingId = attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID];
      this.logger.log(LOG_LEVEL$1.DEBUG, sprintf(LOG_MESSAGES$1.VALID_BUCKETING_ID, MODULE_NAME$6, bucketingId));
    } else {
      this.logger.log(LOG_LEVEL$1.WARNING, sprintf(LOG_MESSAGES$1.BUCKETING_ID_NOT_STRING, MODULE_NAME$6));
    }
  }

  return bucketingId;
};

/**
 * Removes forced variation for given userId and experimentKey
 * @param  {string} userId         String representing the user id
 * @param  {number} experimentId   Number representing the experiment id
 * @param  {string} experimentKey  Key representing the experiment id
 * @throws If the user id is not valid or not in the forced variation map
 */
DecisionService.prototype.removeForcedVariation = function(userId, experimentId, experimentKey) {
  if (!userId) {
    throw new Error(sprintf(ERROR_MESSAGES$1.INVALID_USER_ID, MODULE_NAME$6));
  }

  if (this.forcedVariationMap.hasOwnProperty(userId)) {
    delete this.forcedVariationMap[userId][experimentId];
    this.logger.log(
      LOG_LEVEL$1.DEBUG,
      sprintf(LOG_MESSAGES$1.VARIATION_REMOVED_FOR_USER, MODULE_NAME$6, experimentKey, userId)
    );
  } else {
    throw new Error(sprintf(ERROR_MESSAGES$1.USER_NOT_IN_FORCED_VARIATION, MODULE_NAME$6, userId));
  }
};

/**
 * Sets forced variation for given userId and experimentKey
 * @param  {string} userId        String representing the user id
 * @param  {number} experimentId  Number representing the experiment id
 * @param  {number} variationId   Number representing the variation id
 * @throws If the user id is not valid
 */
DecisionService.prototype.__setInForcedVariationMap = function(userId, experimentId, variationId) {
  if (this.forcedVariationMap.hasOwnProperty(userId)) {
    this.forcedVariationMap[userId][experimentId] = variationId;
  } else {
    this.forcedVariationMap[userId] = {};
    this.forcedVariationMap[userId][experimentId] = variationId;
  }

  this.logger.log(
    LOG_LEVEL$1.DEBUG,
    sprintf(LOG_MESSAGES$1.USER_MAPPED_TO_FORCED_VARIATION, MODULE_NAME$6, variationId, experimentId, userId)
  );
};

/**
 * Gets the forced variation key for the given user and experiment.
 * @param  {Object} configObj        Object representing project configuration
 * @param  {string} experimentKey    Key for experiment.
 * @param  {string} userId           The user Id.
 * @return {string|null} Variation   The variation which the given user and experiment should be forced into.
 */
DecisionService.prototype.getForcedVariation = function(configObj, experimentKey, userId) {
  var experimentToVariationMap = this.forcedVariationMap[userId];
  if (!experimentToVariationMap) {
    this.logger.log(LOG_LEVEL$1.DEBUG, sprintf(LOG_MESSAGES$1.USER_HAS_NO_FORCED_VARIATION, MODULE_NAME$6, userId));
    return null;
  }

  var experimentId;
  try {
    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);
    if (experiment.hasOwnProperty('id')) {
      experimentId = experiment['id'];
    } else {
      // catching improperly formatted experiments
      this.logger.log(
        LOG_LEVEL$1.ERROR,
        sprintf(ERROR_MESSAGES$1.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME$6, experimentKey)
      );
      return null;
    }
  } catch (ex) {
    // catching experiment not in datafile
    this.logger.log(LOG_LEVEL$1.ERROR, ex.message);
    return null;
  }

  var variationId = experimentToVariationMap[experimentId];
  if (!variationId) {
    this.logger.log(
      LOG_LEVEL$1.DEBUG,
      sprintf(LOG_MESSAGES$1.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME$6, experimentKey, userId)
    );
    return null;
  }

  var variationKey = projectConfig.getVariationKeyFromId(configObj, variationId);
  if (variationKey) {
    this.logger.log(
      LOG_LEVEL$1.DEBUG,
      sprintf(LOG_MESSAGES$1.USER_HAS_FORCED_VARIATION, MODULE_NAME$6, variationKey, experimentKey, userId)
    );
  } else {
    this.logger.log(
      LOG_LEVEL$1.DEBUG,
      sprintf(LOG_MESSAGES$1.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME$6, experimentKey, userId)
    );
  }

  return variationKey;
};

/**
 * Sets the forced variation for a user in a given experiment
 * @param  {Object} configObj      Object representing project configuration
 * @param  {string} experimentKey  Key for experiment.
 * @param  {string} userId         The user Id.
 * @param  {string} variationKey   Key for variation. If null, then clear the existing experiment-to-variation mapping
 * @return {boolean}               A boolean value that indicates if the set completed successfully.
 */
DecisionService.prototype.setForcedVariation = function(configObj, experimentKey, userId, variationKey) {
  if (variationKey != null && !stringValidator.validate(variationKey)) {
    this.logger.log(LOG_LEVEL$1.ERROR, sprintf(ERROR_MESSAGES$1.INVALID_VARIATION_KEY, MODULE_NAME$6));
    return false;
  }

  var experimentId;
  try {
    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);
    if (experiment.hasOwnProperty('id')) {
      experimentId = experiment['id'];
    } else {
      // catching improperly formatted experiments
      this.logger.log(
        LOG_LEVEL$1.ERROR,
        sprintf(ERROR_MESSAGES$1.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME$6, experimentKey)
      );
      return false;
    }
  } catch (ex) {
    // catching experiment not in datafile
    this.logger.log(LOG_LEVEL$1.ERROR, ex.message);
    return false;
  }

  if (variationKey == null) {
    try {
      this.removeForcedVariation(userId, experimentId, experimentKey, this.logger);
      return true;
    } catch (ex) {
      this.logger.log(LOG_LEVEL$1.ERROR, ex.message);
      return false;
    }
  }

  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);

  if (!variationId) {
    this.logger.log(
      LOG_LEVEL$1.ERROR,
      sprintf(ERROR_MESSAGES$1.NO_VARIATION_FOR_EXPERIMENT_KEY, MODULE_NAME$6, variationKey, experimentKey)
    );
    return false;
  }

  try {
    this.__setInForcedVariationMap(userId, experimentId, variationId);
    return true;
  } catch (ex) {
    this.logger.log(LOG_LEVEL$1.ERROR, ex.message);
    return false;
  }
};

/**
 * Creates an instance of the DecisionService.
 * @param  {Object} options               Configuration options
 * @param  {Object} options.userProfileService
 * @param  {Object} options.logger
 * @return {Object} An instance of the DecisionService
 */
var createDecisionService = function(options) {
  return new DecisionService(options);
};

var decisionService = {
  createDecisionService: createDecisionService,
};

/**
 * Copyright 2017, 2019-2020 Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides utility method for parsing event tag values
 */
var MODULE_NAME$7 = 'EVENT_TAG_UTILS';
var REVENUE_EVENT_METRIC_NAME = RESERVED_EVENT_KEYWORDS.REVENUE;
var VALUE_EVENT_METRIC_NAME = RESERVED_EVENT_KEYWORDS.VALUE;

/**
 * Grab the revenue value from the event tags. "revenue" is a reserved keyword.
 * @param {Object} eventTags
 * @param {Object} logger
 * @return {Integer|null}
 */
var getRevenueValue = function(eventTags, logger) {
  if (eventTags && eventTags.hasOwnProperty(REVENUE_EVENT_METRIC_NAME)) {
    var rawValue = eventTags[REVENUE_EVENT_METRIC_NAME];
    var parsedRevenueValue = parseInt(rawValue, 10);
    if (isNaN(parsedRevenueValue)) {
      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_REVENUE, MODULE_NAME$7, rawValue));
      return null;
    }
    logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_REVENUE_VALUE, MODULE_NAME$7, parsedRevenueValue));
    return parsedRevenueValue;
  }
  return null;
};

/**
 * Grab the event value from the event tags. "value" is a reserved keyword.
 * @param {Object} eventTags
 * @param {Object} logger
 * @return {Number|null}
 */
var getEventValue = function(eventTags, logger) {
  if (eventTags && eventTags.hasOwnProperty(VALUE_EVENT_METRIC_NAME)) {
    var rawValue = eventTags[VALUE_EVENT_METRIC_NAME];
    var parsedEventValue = parseFloat(rawValue);
    if (isNaN(parsedEventValue)) {
      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_VALUE, MODULE_NAME$7, rawValue));
      return null;
    }
    logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_NUMERIC_VALUE, MODULE_NAME$7, parsedEventValue));
    return parsedEventValue;
  }
  return null;
};

var eventTagUtils = {
  getRevenueValue: getRevenueValue,
  getEventValue: getEventValue,
};

/**
 * Copyright 2016-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ACTIVATE_EVENT_KEY = 'campaign_activated';
var CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';
var ENDPOINT = 'https://logx.optimizely.com/v1/events';
var HTTP_VERB = 'POST';

/**
 * Get params which are used same in both conversion and impression events
 * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded
 * @param  {string} options.clientEngine  The client we are using: node or javascript
 * @param  {string} options.clientVersion The version of the client
 * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup
 * @param  {string} options.userId        ID for user
 * @param  {Object} options.Logger        logger
 * @return {Object}                       Common params with properties that are used in both conversion and impression events
 */
function getCommonEventParams(options) {
  var attributes = options.attributes;
  var configObj = options.configObj;
  var anonymize_ip = configObj.anonymizeIP;
  var botFiltering = configObj.botFiltering;
  if (anonymize_ip === null || anonymize_ip === undefined) {
    anonymize_ip = false;
  }

  var visitor = {
    snapshots: [],
    visitor_id: options.userId,
    attributes: [],
  };

  var commonParams = {
    account_id: configObj.accountId,
    project_id: configObj.projectId,
    visitors: [visitor],
    revision: configObj.revision,
    client_name: options.clientEngine,
    client_version: options.clientVersion,
    anonymize_ip: anonymize_ip,
    enrich_decisions: true,
  };

  // Omit attribute values that are not supported by the log endpoint.
  Object.keys(attributes || {}).forEach(function(attributeKey) {
    var attributeValue = attributes[attributeKey];
    if (attributesValidator.isAttributeValid(attributeKey, attributeValue)) {
      var attributeId = projectConfig.getAttributeId(options.configObj, attributeKey, options.logger);
      if (attributeId) {
        commonParams.visitors[0].attributes.push({
          entity_id: attributeId,
          key: attributeKey,
          type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,
          value: attributes[attributeKey],
        });
      }
    }
  });

  if (typeof botFiltering === 'boolean') {
    commonParams.visitors[0].attributes.push({
      entity_id: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,
      key: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,
      type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,
      value: botFiltering,
    });
  }
  return commonParams;
}

/**
 * Creates object of params specific to impression events
 * @param  {Object} configObj    Object representing project configuration
 * @param  {string} experimentId ID of experiment for which impression needs to be recorded
 * @param  {string} variationId  ID for variation which would be presented to user
 * @return {Object}              Impression event params
 */
function getImpressionEventParams(configObj, experimentId, variationId) {
  var impressionEventParams = {
    decisions: [
      {
        campaign_id: projectConfig.getLayerId(configObj, experimentId),
        experiment_id: experimentId,
        variation_id: variationId,
      },
    ],
    events: [
      {
        entity_id: projectConfig.getLayerId(configObj, experimentId),
        timestamp: fns.currentTimestamp(),
        key: ACTIVATE_EVENT_KEY,
        uuid: fns.uuid(),
      },
    ],
  };
  return impressionEventParams;
}

/**
 * Creates object of params specific to conversion events
 * @param  {Object} configObj                 Object representing project configuration
 * @param  {string} eventKey                  Event key representing the event which needs to be recorded
 * @param  {Object} eventTags                 Values associated with the event.
 * @param  {Object} logger                    Logger object
 * @return {Object}                           Conversion event params
 */
function getVisitorSnapshot(configObj, eventKey, eventTags, logger) {
  var snapshot = {
    events: [],
  };

  var eventDict = {
    entity_id: projectConfig.getEventId(configObj, eventKey),
    timestamp: fns.currentTimestamp(),
    uuid: fns.uuid(),
    key: eventKey,
  };

  if (eventTags) {
    var revenue = eventTagUtils.getRevenueValue(eventTags, logger);
    if (revenue !== null) {
      eventDict[enums.RESERVED_EVENT_KEYWORDS.REVENUE] = revenue;
    }

    var eventValue = eventTagUtils.getEventValue(eventTags, logger);
    if (eventValue !== null) {
      eventDict[enums.RESERVED_EVENT_KEYWORDS.VALUE] = eventValue;
    }

    eventDict['tags'] = eventTags;
  }
  snapshot.events.push(eventDict);

  return snapshot;
}

/**
 * Create impression event params to be sent to the logging endpoint
 * @param  {Object} options               Object containing values needed to build impression event
 * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded
 * @param  {string} options.clientEngine  The client we are using: node or javascript
 * @param  {string} options.clientVersion The version of the client
 * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup
 * @param  {string} options.experimentId  Experiment for which impression needs to be recorded
 * @param  {string} options.userId        ID for user
 * @param  {string} options.variationId   ID for variation which would be presented to user
 * @return {Object}                       Params to be used in impression event logging endpoint call
 */
var getImpressionEvent = function(options) {
  var impressionEvent = {
    httpVerb: HTTP_VERB,
  };

  var commonParams = getCommonEventParams(options);
  impressionEvent.url = ENDPOINT;

  var impressionEventParams = getImpressionEventParams(options.configObj, options.experimentId, options.variationId);
  // combine Event params into visitor obj
  commonParams.visitors[0].snapshots.push(impressionEventParams);

  impressionEvent.params = commonParams;

  return impressionEvent;
};

/**
 * Create conversion event params to be sent to the logging endpoint
 * @param  {Object} options                           Object containing values needed to build conversion event
 * @param  {Object} options.attributes                Object representing user attributes and values which need to be recorded
 * @param  {string} options.clientEngine              The client we are using: node or javascript
 * @param  {string} options.clientVersion             The version of the client
 * @param  {Object} options.configObj                 Object representing project configuration, including datafile information and mappings for quick lookup
 * @param  {string} options.eventKey                  Event key representing the event which needs to be recorded
 * @param  {Object} options.eventTags                 Object with event-specific tags
 * @param  {Object} options.logger                    Logger object
 * @param  {string} options.userId                    ID for user
 * @return {Object}                                   Params to be used in conversion event logging endpoint call
 */
var getConversionEvent = function(options) {
  var conversionEvent = {
    httpVerb: HTTP_VERB,
  };

  var commonParams = getCommonEventParams(options);
  conversionEvent.url = ENDPOINT;

  var snapshot = getVisitorSnapshot(options.configObj, options.eventKey, options.eventTags, options.logger);

  commonParams.visitors[0].snapshots = [snapshot];
  conversionEvent.params = commonParams;

  return conversionEvent;
};

/**
 * Copyright 2019-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger$1 = getLogger('EVENT_BUILDER');

/**
 * Creates an ImpressionEvent object from decision data
 * @param {Object} config
 * @param {Object} config.configObj
 * @param {String} config.experimentKey
 * @param {String} config.variationKey
 * @param {String} config.userId
 * @param {Object} config.userAttributes
 * @param {String} config.clientEngine
 * @param {String} config.clientVersion
 * @return {Object} an ImpressionEvent object
 */
var buildImpressionEvent = function(config) {
  var configObj = config.configObj;
  var experimentKey = config.experimentKey;
  var variationKey = config.variationKey;
  var userId = config.userId;
  var userAttributes = config.userAttributes;
  var clientEngine = config.clientEngine;
  var clientVersion = config.clientVersion;

  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);
  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);
  var layerId = projectConfig.getLayerId(configObj, experimentId);

  return {
    type: 'impression',
    timestamp: fns.currentTimestamp(),
    uuid: fns.uuid(),

    user: {
      id: userId,
      attributes: buildVisitorAttributes(configObj, userAttributes),
    },

    context: {
      accountId: configObj.accountId,
      projectId: configObj.projectId,
      revision: configObj.revision,
      clientName: clientEngine,
      clientVersion: clientVersion,
      anonymizeIP: configObj.anonymizeIP || false,
      botFiltering: configObj.botFiltering,
    },

    layer: {
      id: layerId,
    },

    experiment: {
      id: experimentId,
      key: experimentKey,
    },

    variation: {
      id: variationId,
      key: variationKey,
    },
  };
};

/**
 * Creates a ConversionEvent object from track
 * @param {Object} config
 * @param {Object} config.configObj
 * @param {String} config.eventKey
 * @param {Object|undefined} config.eventTags
 * @param {String} config.userId
 * @param {Object} config.userAttributes
 * @param {String} config.clientEngine
 * @param {String} config.clientVersion
 * @return {Object} a ConversionEvent object
 */
var buildConversionEvent = function(config) {
  var configObj = config.configObj;
  var userId = config.userId;
  var userAttributes = config.userAttributes;
  var clientEngine = config.clientEngine;
  var clientVersion = config.clientVersion;

  var eventKey = config.eventKey;
  var eventTags = config.eventTags;
  var eventId = projectConfig.getEventId(configObj, eventKey);

  return {
    type: 'conversion',
    timestamp: fns.currentTimestamp(),
    uuid: fns.uuid(),

    user: {
      id: userId,
      attributes: buildVisitorAttributes(configObj, userAttributes),
    },

    context: {
      accountId: configObj.accountId,
      projectId: configObj.projectId,
      revision: configObj.revision,
      clientName: clientEngine,
      clientVersion: clientVersion,
      anonymizeIP: configObj.anonymizeIP || false,
      botFiltering: configObj.botFiltering,
    },

    event: {
      id: eventId,
      key: eventKey,
    },

    revenue: eventTagUtils.getRevenueValue(eventTags, logger$1),
    value: eventTagUtils.getEventValue(eventTags, logger$1),
    tags: eventTags,
  };
};

function buildVisitorAttributes(configObj, attributes) {
  var builtAttributes = [];
  // Omit attribute values that are not supported by the log endpoint.
  Object.keys(attributes || {}).forEach(function(attributeKey) {
    var attributeValue = attributes[attributeKey];
    if (attributesValidator.isAttributeValid(attributeKey, attributeValue)) {
      var attributeId = projectConfig.getAttributeId(configObj, attributeKey, logger$1);
      if (attributeId) {
        builtAttributes.push({
          entityId: attributeId,
          key: attributeKey,
          value: attributes[attributeKey],
        });
      }
    }
  });

  return builtAttributes;
}

/**
 * Copyright 2017, 2020 Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MODULE_NAME$8 = 'EVENT_TAGS_VALIDATOR';

/**
 * Validates user's provided event tags
 * @param  {Object}  event tags
 * @return {boolean} True if event tags are valid
 * @throws If event tags are not valid
 */
var validate$3 = function(eventTags) {
  if (typeof eventTags === 'object' && !Array.isArray(eventTags) && eventTags !== null) {
    return true;
  } else {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_TAGS, MODULE_NAME$8));
  }
};

var eventTagsValidator = {
  validate: validate$3,
};

/**
 * Copyright 2017, 2019-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MODULE_NAME$9 = 'NOTIFICATION_CENTER';

/**
 * NotificationCenter allows registration and triggering of callback functions using
 * notification event types defined in NOTIFICATION_TYPES of utils/enums/index.js:
 * - ACTIVATE: An impression event will be sent to Optimizely.
 * - TRACK a conversion event will be sent to Optimizely
 * @constructor
 * @param {Object} options
 * @param {Object} options.logger An instance of a logger to log messages with
 * @param {object} options.errorHandler An instance of errorHandler to handle any unexpected error
 * @returns {Object}
 */
function NotificationCenter(options) {
  this.logger = options.logger;
  this.errorHandler = options.errorHandler;
  this.__notificationListeners = {};

  objectValues(NOTIFICATION_TYPES).forEach(
    function(notificationTypeEnum) {
      this.__notificationListeners[notificationTypeEnum] = [];
    }.bind(this)
  );
  this.__listenerId = 1;
}

/**
 * Add a notification callback to the notification center
 * @param {string} notificationType One of the values from NOTIFICATION_TYPES in utils/enums/index.js
 * @param {Function} callback Function that will be called when the event is triggered
 * @returns {number} If the callback was successfully added, returns a listener ID which can be used
 * to remove the callback by calling removeNotificationListener. The ID is a number greater than 0.
 * If there was an error and the listener was not added, addNotificationListener returns -1. This
 * can happen if the first argument is not a valid notification type, or if the same callback
 * function was already added as a listener by a prior call to this function.
 */
NotificationCenter.prototype.addNotificationListener = function(notificationType, callback) {
  try {
    var isNotificationTypeValid = objectValues(NOTIFICATION_TYPES).indexOf(notificationType) > -1;
    if (!isNotificationTypeValid) {
      return -1;
    }

    if (!this.__notificationListeners[notificationType]) {
      this.__notificationListeners[notificationType] = [];
    }

    var callbackAlreadyAdded = false;
    (this.__notificationListeners[notificationType] || []).forEach(function(listenerEntry) {
      if (listenerEntry.callback === callback) {
        callbackAlreadyAdded = true;
        return false;
      }
    });
    if (callbackAlreadyAdded) {
      return -1;
    }

    this.__notificationListeners[notificationType].push({
      id: this.__listenerId,
      callback: callback,
    });

    var returnId = this.__listenerId;
    this.__listenerId += 1;
    return returnId;
  } catch (e) {
    this.logger.log(LOG_LEVEL.ERROR, e.message);
    this.errorHandler.handleError(e);
    return -1;
  }
};

/**
 * Remove a previously added notification callback
 * @param {number} listenerId ID of listener to be removed
 * @returns {boolean} Returns true if the listener was found and removed, and false
 * otherwise.
 */
NotificationCenter.prototype.removeNotificationListener = function(listenerId) {
  try {
    var indexToRemove;
    var typeToRemove;

    Object.keys(this.__notificationListeners).some(
      function(notificationType) {
        var listenersForType = this.__notificationListeners[notificationType];
        (listenersForType || []).every(function(listenerEntry, i) {
          if (listenerEntry.id === listenerId) {
            indexToRemove = i;
            typeToRemove = notificationType;
            return false;
          }
          return true;
        });
        if (indexToRemove !== undefined && typeToRemove !== undefined) {
          return true;
        }
      }.bind(this)
    );

    if (indexToRemove !== undefined && typeToRemove !== undefined) {
      this.__notificationListeners[typeToRemove].splice(indexToRemove, 1);
      return true;
    }
  } catch (e) {
    this.logger.log(LOG_LEVEL.ERROR, e.message);
    this.errorHandler.handleError(e);
  }
  return false;
};

/**
 * Removes all previously added notification listeners, for all notification types
 */
NotificationCenter.prototype.clearAllNotificationListeners = function() {
  try {
    objectValues(NOTIFICATION_TYPES).forEach(
      function(notificationTypeEnum) {
        this.__notificationListeners[notificationTypeEnum] = [];
      }.bind(this)
    );
  } catch (e) {
    this.logger.log(LOG_LEVEL.ERROR, e.message);
    this.errorHandler.handleError(e);
  }
};

/**
 * Remove all previously added notification listeners for the argument type
 * @param {string} notificationType One of NOTIFICATION_TYPES
 */
NotificationCenter.prototype.clearNotificationListeners = function(notificationType) {
  try {
    this.__notificationListeners[notificationType] = [];
  } catch (e) {
    this.logger.log(LOG_LEVEL.ERROR, e.message);
    this.errorHandler.handleError(e);
  }
};

/**
 * Fires notifications for the argument type. All registered callbacks for this type will be
 * called. The notificationData object will be passed on to callbacks called.
 * @param {string} notificationType One of NOTIFICATION_TYPES
 * @param {Object} notificationData Will be passed to callbacks called
 */
NotificationCenter.prototype.sendNotifications = function(notificationType, notificationData) {
  try {
    (this.__notificationListeners[notificationType] || []).forEach(
      function(listenerEntry) {
        var callback = listenerEntry.callback;
        try {
          callback(notificationData);
        } catch (ex) {
          this.logger.log(
            LOG_LEVEL.ERROR,
            sprintf(LOG_MESSAGES.NOTIFICATION_LISTENER_EXCEPTION, MODULE_NAME$9, notificationType, ex.message)
          );
        }
      }.bind(this)
    );
  } catch (e) {
    this.logger.log(LOG_LEVEL.ERROR, e.message);
    this.errorHandler.handleError(e);
  }
};

/**
 * Create an instance of NotificationCenter
 * @param {Object} options
 * @param {Object} options.logger An instance of a logger to log messages with
 * @returns {Object} An instance of NotificationCenter
 */
var createNotificationCenter = function(options) {
  return new NotificationCenter(options);
};

var notificationCenter = {
  createNotificationCenter: createNotificationCenter,
};

/****************************************************************************
 * Copyright 2017, 2020, Optimizely, Inc. and contributors                  *
 *                                                                          *
 * Licensed under the Apache License, Version 2.0 (the "License");          *
 * you may not use this file except in compliance with the License.         *
 * You may obtain a copy of the License at                                  *
 *                                                                          *
 *    http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                          *
 * Unless required by applicable law or agreed to in writing, software      *
 * distributed under the License is distributed on an "AS IS" BASIS,        *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 * See the License for the specific language governing permissions and      *
 * limitations under the License.                                           *
 ***************************************************************************/
var MODULE_NAME$a = 'USER_PROFILE_SERVICE_VALIDATOR';

/**
 * Validates user's provided user profile service instance
 * @param  {Object}  userProfileServiceInstance
 * @return {boolean} True if the instance is valid
 * @throws If the instance is not valid
 */
var validate$4 = function(userProfileServiceInstance) {
  if (typeof userProfileServiceInstance.lookup !== 'function') {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME$a, "Missing function 'lookup'"));
  } else if (typeof userProfileServiceInstance.save !== 'function') {
    throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME$a, "Missing function 'save'"));
  }
  return true;
};

var userProfileServiceValidator = {
  validate: validate$4,
};

/**
 * Copyright 2019-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Get Experiment Ids which are part of rollouts
function getRolloutExperimentIds(rollouts) {
  return (rollouts || []).reduce(function(experimentIds, rollout) {
    rollout.experiments.forEach(function(e) {
      experimentIds[e.id] = true;
    });
    return experimentIds;
  }, {});
}

// Gets Map of all experiments except rollouts
function getExperimentsMap(configObj) {
  var rolloutExperimentIds = getRolloutExperimentIds(configObj.rollouts);
  var featureVariablesMap = (configObj.featureFlags || []).reduce(function(resultMap, feature) {
    resultMap[feature.id] = feature.variables;
    return resultMap;
  }, {});
  return (configObj.experiments || []).reduce(function(experiments, experiment) {
    // skip experiments that are part of a rollout
    if (!rolloutExperimentIds[experiment.id]) {
      experiments[experiment.key] = {
        id: experiment.id,
        key: experiment.key,
        variationsMap: (experiment.variations || []).reduce(function(variations, variation) {
          variations[variation.key] = {
            id: variation.id,
            key: variation.key,
            variablesMap: getMergedVariablesMap(configObj, variation, experiment.id, featureVariablesMap),
          };
          if (isFeatureExperiment(configObj, experiment.id)) {
            variations[variation.key].featureEnabled = variation.featureEnabled;
          }
          return variations;
        }, {}),
      };
    }
    return experiments;
  }, {});
}

// Merges feature key and type from feature variables to variation variables.
function getMergedVariablesMap(configObj, variation, experimentId, featureVariablesMap) {
  var featureId = configObj.experimentFeatureMap[experimentId];
  var variablesObject = {};
  if (featureId) {
    var experimentFeatureVariables = featureVariablesMap[featureId];
    // Temporary variation variables map to get values to merge.
    var tempVariablesIdMap = (variation.variables || []).reduce(function(variablesMap, variable) {
      variablesMap[variable.id] = {
        id: variable.id,
        value: variable.value,
      };
      return variablesMap;
    }, {});
    variablesObject = (experimentFeatureVariables || []).reduce(function(variablesMap, featureVariable) {
      var variationVariable = tempVariablesIdMap[featureVariable.id];
      var variableValue =
        variation.featureEnabled && variationVariable ? variationVariable.value : featureVariable.defaultValue;
      variablesMap[featureVariable.key] = {
        id: featureVariable.id,
        key: featureVariable.key,
        type: featureVariable.type,
        value: variableValue,
      };
      return variablesMap;
    }, {});
  }
  return variablesObject;
}

// Gets map of all experiments
function getFeaturesMap(configObj, allExperiments) {
  return (configObj.featureFlags || []).reduce(function(features, feature) {
    features[feature.key] = {
      id: feature.id,
      key: feature.key,
      experimentsMap: (feature.experimentIds || []).reduce(function(experiments, experimentId) {
        var experimentKey = configObj.experimentIdMap[experimentId].key;
        experiments[experimentKey] = allExperiments[experimentKey];
        return experiments;
      }, {}),
      variablesMap: (feature.variables || []).reduce(function(variables, variable) {
        variables[variable.key] = {
          id: variable.id,
          key: variable.key,
          type: variable.type,
          value: variable.defaultValue,
        };
        return variables;
      }, {}),
    };
    return features;
  }, {});
}

var getOptimizelyConfig = function(configObj) {
  // Fetch all feature variables from feature flags to merge them with variation variables
  var experimentsMap = getExperimentsMap(configObj);
  return {
    experimentsMap: experimentsMap,
    featuresMap: getFeaturesMap(configObj, experimentsMap),
    revision: configObj.revision,
  };
};

/**
 * Copyright 2019-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger$2 = getLogger();
var MODULE_NAME$b = 'PROJECT_CONFIG_MANAGER';

/**
 * Return an error message derived from a thrown value. If the thrown value is
 * an error, return the error's message property. Otherwise, return a default
 * provided by the second argument.
 * @param {*} maybeError
 * @param {String=} defaultMessage
 * @return {String}
 */
function getErrorMessage(maybeError, defaultMessage) {
  if (maybeError instanceof Error) {
    return maybeError.message;
  }
  return defaultMessage || 'Unknown error';
}

/**
 * ProjectConfigManager provides project config objects via its methods
 * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is
 * responsible for parsing and validating datafiles, and converting datafile
 * JSON objects into project config objects.
 * @param {Object}         config
 * @param {Object|string=} config.datafile
 * @param {Object=}        config.datafileOptions
 * @param {Object=}        config.jsonSchemaValidator
 * @param {string=}        config.sdkKey
 */
function ProjectConfigManager(config) {
  try {
    this.__initialize(config);
  } catch (ex) {
    logger$2.error(ex);
    this.__updateListeners = [];
    this.__configObj = null;
    this.__optimizelyConfigObj = null;
    this.__readyPromise = Promise.resolve({
      success: false,
      reason: getErrorMessage(ex, 'Error in initialize'),
    });
  }
}

/**
 * Initialize internal properties including __updateListeners, __configObj, and
 * __readyPromise, using the argument config. Create and subscribe to a datafile
 * manager if appropriate.
 * @param {Object}         config
 * @param {Object|string=} config.datafile
 * @param {Object=}        config.datafileOptions
 * @param {Object=}        config.jsonSchemaValidator
 * @param {string=}        config.sdkKey
 */
ProjectConfigManager.prototype.__initialize = function(config) {
  this.__updateListeners = [];
  this.jsonSchemaValidator = config.jsonSchemaValidator;

  if (!config.datafile && !config.sdkKey) {
    this.__configObj = null;
    var datafileAndSdkKeyMissingError = new Error(sprintf(ERROR_MESSAGES.DATAFILE_AND_SDK_KEY_MISSING, MODULE_NAME$b));
    this.__readyPromise = Promise.resolve({
      success: false,
      reason: getErrorMessage(datafileAndSdkKeyMissingError),
    });
    logger$2.error(datafileAndSdkKeyMissingError);
    return;
  }

  var initialDatafile = this.__getDatafileFromConfig(config);
  var projectConfigCreationEx;
  if (initialDatafile) {
    try {
      this.__configObj = projectConfig.tryCreatingProjectConfig({
        datafile: initialDatafile,
        jsonSchemaValidator: this.jsonSchemaValidator,
        logger: logger$2,
      });
      this.__optimizelyConfigObj = getOptimizelyConfig(this.__configObj);
    } catch (ex) {
      logger$2.error(ex);
      projectConfigCreationEx = ex;
      this.__configObj = null;
    }
  } else {
    this.__configObj = null;
  }

  if (config.sdkKey) {
    var datafileManagerConfig = {
      sdkKey: config.sdkKey,
    };
    if (this.__validateDatafileOptions(config.datafileOptions)) {
      fns.assign(datafileManagerConfig, config.datafileOptions);
    }
    if (initialDatafile && this.__configObj) {
      datafileManagerConfig.datafile = initialDatafile;
    }
    this.datafileManager = new HttpPollingDatafileManager(datafileManagerConfig);
    this.datafileManager.start();
    this.__readyPromise = this.datafileManager
      .onReady()
      .then(this.__onDatafileManagerReadyFulfill.bind(this), this.__onDatafileManagerReadyReject.bind(this));
    this.datafileManager.on('update', this.__onDatafileManagerUpdate.bind(this));
  } else if (this.__configObj) {
    this.__readyPromise = Promise.resolve({
      success: true,
    });
  } else {
    this.__readyPromise = Promise.resolve({
      success: false,
      reason: getErrorMessage(projectConfigCreationEx, 'Invalid datafile'),
    });
  }
};

/**
 * Respond to datafile manager's onReady promise becoming fulfilled.
 * If there are validation or parse failures using the datafile provided by
 * DatafileManager, ProjectConfigManager's ready promise is resolved with an
 * unsuccessful result. Otherwise, ProjectConfigManager updates its own project
 * config object from the new datafile, and its ready promise is resolved with a
 * successful result.
 */
ProjectConfigManager.prototype.__onDatafileManagerReadyFulfill = function() {
  var newDatafile = this.datafileManager.get();
  var newConfigObj;
  try {
    newConfigObj = projectConfig.tryCreatingProjectConfig({
      datafile: newDatafile,
      jsonSchemaValidator: this.jsonSchemaValidator,
      logger: logger$2,
    });
  } catch (ex) {
    logger$2.error(ex);
    return {
      success: false,
      reason: getErrorMessage(ex),
    };
  }
  this.__handleNewConfigObj(newConfigObj);
  return {
    success: true,
  };
};

/**
 * Respond to datafile manager's onReady promise becoming rejected.
 * When DatafileManager's onReady promise is rejected, there is no possibility
 * of obtaining a datafile. In this case, ProjectConfigManager's ready promise
 * is fulfilled with an unsuccessful result.
 * @param {Error} err
 */
ProjectConfigManager.prototype.__onDatafileManagerReadyReject = function(err) {
  return {
    success: false,
    reason: getErrorMessage(err, 'Failed to become ready'),
  };
};

/**
 * Respond to datafile manager's update event. Attempt to update own config
 * object using latest datafile from datafile manager. Call own registered
 * update listeners if successful
 */
ProjectConfigManager.prototype.__onDatafileManagerUpdate = function() {
  var newDatafile = this.datafileManager.get();
  var newConfigObj;
  try {
    newConfigObj = projectConfig.tryCreatingProjectConfig({
      datafile: newDatafile,
      jsonSchemaValidator: this.jsonSchemaValidator,
      logger: logger$2,
    });
  } catch (ex) {
    logger$2.error(ex);
  }
  if (newConfigObj) {
    this.__handleNewConfigObj(newConfigObj);
  }
};

/**
 * If the argument config contains a valid datafile object or string,
 * return a datafile object based on that provided datafile, otherwise
 * return null.
 * @param {Object}         config
 * @param {Object|string=} config.datafile
 * @return {Object|null}
 */
ProjectConfigManager.prototype.__getDatafileFromConfig = function(config) {
  var initialDatafile = null;
  try {
    if (config.datafile) {
      configValidator.validateDatafile(config.datafile);
      if (typeof config.datafile === 'string' || config.datafile instanceof String) {
        initialDatafile = JSON.parse(config.datafile);
      } else {
        initialDatafile = config.datafile;
      }
    }
  } catch (ex) {
    logger$2.error(ex);
  }
  return initialDatafile;
};

/**
 * Validate user-provided datafileOptions. It should be an object or undefined.
 * @param {*} datafileOptions
 * @returns {boolean}
 */
ProjectConfigManager.prototype.__validateDatafileOptions = function(datafileOptions) {
  if (typeof datafileOptions === 'undefined') {
    return true;
  }

  if (typeof datafileOptions === 'object') {
    return datafileOptions !== null;
  }

  return false;
};

/**
 * Update internal project config object to be argument object when the argument
 * object has a different revision than the current internal project config
 * object. If the internal object is updated, call update listeners.
 * @param {Object} newConfigObj
 */
ProjectConfigManager.prototype.__handleNewConfigObj = function(newConfigObj) {
  var oldConfigObj = this.__configObj;

  var oldRevision = oldConfigObj ? oldConfigObj.revision : 'null';
  if (oldRevision === newConfigObj.revision) {
    return;
  }

  this.__configObj = newConfigObj;
  this.__optimizelyConfigObj = getOptimizelyConfig(newConfigObj);

  this.__updateListeners.forEach(function(listener) {
    listener(newConfigObj);
  });
};

/**
 * Returns the current project config object, or null if no project config object
 * is available
 * @return {Object|null}
 */
ProjectConfigManager.prototype.getConfig = function() {
  return this.__configObj;
};

/**
 * Returns the optimizely config object
 * @return {Object}
 */
ProjectConfigManager.prototype.getOptimizelyConfig = function() {
  return this.__optimizelyConfigObj;
};

/**
 * Returns a Promise that fulfills when this ProjectConfigManager is ready to
 * use (meaning it has a valid project config object), or has failed to become
 * ready.
 *
 * Failure can be caused by the following:
 * - At least one of sdkKey or datafile is not provided in the constructor argument
 * - The provided datafile was invalid
 * - The datafile provided by the datafile manager was invalid
 * - The datafile manager failed to fetch a datafile
 *
 * The returned Promise is fulfilled with a result object containing these
 * properties:
 *    - success (boolean): True if this instance is ready to use with a valid
 *                         project config object, or false if it failed to
 *                         become ready
 *    - reason (string=):  If success is false, this is a string property with
 *                         an explanatory message.
 * @return {Promise}
 */
ProjectConfigManager.prototype.onReady = function() {
  return this.__readyPromise;
};

/**
 * Add a listener for project config updates. The listener will be called
 * whenever this instance has a new project config object available.
 * Returns a dispose function that removes the subscription
 * @param {Function} listener
 * @return {Function}
 */
ProjectConfigManager.prototype.onUpdate = function(listener) {
  this.__updateListeners.push(listener);
  return function() {
    var index = this.__updateListeners.indexOf(listener);
    if (index > -1) {
      this.__updateListeners.splice(index, 1);
    }
  }.bind(this);
};

/**
 * Stop the internal datafile manager and remove all update listeners
 */
ProjectConfigManager.prototype.stop = function() {
  if (this.datafileManager) {
    this.datafileManager.stop();
  }
  this.__updateListeners = [];
};

var projectConfigManager = {
  ProjectConfigManager: ProjectConfigManager,
};

/****************************************************************************
 * Copyright 2016-2020, Optimizely, Inc. and contributors                   *
 *                                                                          *
 * Licensed under the Apache License, Version 2.0 (the "License");          *
 * you may not use this file except in compliance with the License.         *
 * You may obtain a copy of the License at                                  *
 *                                                                          *
 *    http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                          *
 * Unless required by applicable law or agreed to in writing, software      *
 * distributed under the License is distributed on an "AS IS" BASIS,        *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 * See the License for the specific language governing permissions and      *
 * limitations under the License.                                           *
 ***************************************************************************/

var ERROR_MESSAGES$2 = enums.ERROR_MESSAGES;
var LOG_LEVEL$2 = enums.LOG_LEVEL;
var LOG_MESSAGES$2 = enums.LOG_MESSAGES;
var MODULE_NAME$c = 'OPTIMIZELY';
var DECISION_SOURCES$2 = enums.DECISION_SOURCES;
var FEATURE_VARIABLE_TYPES$1 = enums.FEATURE_VARIABLE_TYPES;
var DECISION_NOTIFICATION_TYPES$1 = enums.DECISION_NOTIFICATION_TYPES;
var NOTIFICATION_TYPES$1 = enums.NOTIFICATION_TYPES;

var DEFAULT_ONREADY_TIMEOUT = 30000;

/**
 * The Optimizely class
 * @param {Object} config
 * @param {string} config.clientEngine
 * @param {string} config.clientVersion
 * @param {Object} config.datafile
 * @param {Object} config.errorHandler
 * @param {Object} config.eventDispatcher
 * @param {Object} config.logger
 * @param {Object} config.userProfileService
 * @param {Object} config.eventBatchSize
 * @param {Object} config.eventFlushInterval
 */
function Optimizely(config) {
  var clientEngine = config.clientEngine;
  if (enums.VALID_CLIENT_ENGINES.indexOf(clientEngine) === -1) {
    config.logger.log(
      LOG_LEVEL$2.INFO,
      sprintf(LOG_MESSAGES$2.INVALID_CLIENT_ENGINE, MODULE_NAME$c, clientEngine)
    );
    clientEngine = enums.NODE_CLIENT_ENGINE;
  }

  this.clientEngine = clientEngine;
  this.clientVersion = config.clientVersion || enums.NODE_CLIENT_VERSION;
  this.errorHandler = config.errorHandler;
  this.eventDispatcher = config.eventDispatcher;
  this.__isOptimizelyConfigValid = config.isValidInstance;
  this.logger = config.logger;

  this.projectConfigManager = new projectConfigManager.ProjectConfigManager({
    datafile: config.datafile,
    datafileOptions: config.datafileOptions,
    jsonSchemaValidator: config.jsonSchemaValidator,
    sdkKey: config.sdkKey,
  });

  this.__disposeOnUpdate = this.projectConfigManager.onUpdate(
    function(configObj) {
      this.logger.log(
        LOG_LEVEL$2.INFO,
        sprintf(LOG_MESSAGES$2.UPDATED_OPTIMIZELY_CONFIG, MODULE_NAME$c, configObj.revision, configObj.projectId)
      );
      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES$1.OPTIMIZELY_CONFIG_UPDATE);
    }.bind(this)
  );

  var projectConfigManagerReadyPromise = this.projectConfigManager.onReady();

  var userProfileService = null;
  if (config.userProfileService) {
    try {
      if (userProfileServiceValidator.validate(config.userProfileService)) {
        userProfileService = config.userProfileService;
        this.logger.log(LOG_LEVEL$2.INFO, sprintf(LOG_MESSAGES$2.VALID_USER_PROFILE_SERVICE, MODULE_NAME$c));
      }
    } catch (ex) {
      this.logger.log(LOG_LEVEL$2.WARNING, ex.message);
    }
  }

  this.decisionService = decisionService.createDecisionService({
    userProfileService: userProfileService,
    logger: this.logger,
    UNSTABLE_conditionEvaluators: config.UNSTABLE_conditionEvaluators,
  });

  this.notificationCenter = notificationCenter.createNotificationCenter({
    logger: this.logger,
    errorHandler: this.errorHandler,
  });

  this.eventProcessor = new LogTierV1EventProcessor({
    dispatcher: this.eventDispatcher,
    flushInterval: config.eventFlushInterval,
    batchSize: config.eventBatchSize,
    maxQueueSize: config.eventMaxQueueSize,
    notificationCenter: this.notificationCenter,
  });

  var eventProcessorStartedPromise = this.eventProcessor.start();

  this.__readyPromise = Promise.all([projectConfigManagerReadyPromise, eventProcessorStartedPromise]).then(function(promiseResults) {
    // Only return status from project config promise because event processor promise does not return any status.
    return promiseResults[0];
  });

  this.__readyTimeouts = {};
  this.__nextReadyTimeoutId = 0;
}

/**
 * Returns a truthy value if this instance currently has a valid project config
 * object, and the initial configuration object that was passed into the
 * constructor was also valid.
 * @return {*}
 */
Optimizely.prototype.__isValidInstance = function() {
  return this.__isOptimizelyConfigValid && this.projectConfigManager.getConfig();
};

/**
 * Buckets visitor and sends impression event to Optimizely.
 * @param  {string}      experimentKey
 * @param  {string}      userId
 * @param  {Object}      attributes
 * @return {string|null} variation key
 */
Optimizely.prototype.activate = function(experimentKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'activate'));
      return null;
    }

    if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {
      return this.__notActivatingExperiment(experimentKey, userId);
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return null;
    }

    try {
      var variationKey = this.getVariation(experimentKey, userId, attributes);
      if (variationKey === null) {
        return this.__notActivatingExperiment(experimentKey, userId);
      }

      // If experiment is not set to 'Running' status, log accordingly and return variation key
      if (!projectConfig.isRunning(configObj, experimentKey)) {
        var shouldNotDispatchActivateLogMessage = sprintf(
          LOG_MESSAGES$2.SHOULD_NOT_DISPATCH_ACTIVATE,
          MODULE_NAME$c,
          experimentKey
        );
        this.logger.log(LOG_LEVEL$2.DEBUG, shouldNotDispatchActivateLogMessage);
        return variationKey;
      }

      this._sendImpressionEvent(experimentKey, variationKey, userId, attributes);

      return variationKey;
    } catch (ex) {
      this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
      var failedActivationLogMessage = sprintf(
        LOG_MESSAGES$2.NOT_ACTIVATING_USER,
        MODULE_NAME$c,
        userId,
        experimentKey
      );
      this.logger.log(LOG_LEVEL$2.INFO, failedActivationLogMessage);
      this.errorHandler.handleError(ex);
      return null;
    }
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Create an impression event and call the event dispatcher's dispatch method to
 * send this event to Optimizely. Then use the notification center to trigger
 * any notification listeners for the ACTIVATE notification type.
 * @param {string} experimentKey  Key of experiment that was activated
 * @param {string} variationKey   Key of variation shown in experiment that was activated
 * @param {string} userId         ID of user to whom the variation was shown
 * @param {Object} attributes     Optional user attributes
 */
Optimizely.prototype._sendImpressionEvent = function(experimentKey, variationKey, userId, attributes) {
  var configObj = this.projectConfigManager.getConfig();
  if (!configObj) {
    return;
  }

  var impressionEvent = buildImpressionEvent({
    experimentKey: experimentKey,
    variationKey: variationKey,
    userId: userId,
    userAttributes: attributes,
    clientEngine: this.clientEngine,
    clientVersion: this.clientVersion,
    configObj: configObj,
  });
  // TODO is it okay to not pass a projectConfig as second argument
  this.eventProcessor.process(impressionEvent);
  this.__emitNotificationCenterActivate(experimentKey, variationKey, userId, attributes);
};

/**
 * Emit the ACTIVATE notification on the notificationCenter
 * @param {string} experimentKey  Key of experiment that was activated
 * @param {string} variationKey   Key of variation shown in experiment that was activated
 * @param {string} userId         ID of user to whom the variation was shown
 * @param {Object} attributes     Optional user attributes
 */
Optimizely.prototype.__emitNotificationCenterActivate = function(experimentKey, variationKey, userId, attributes) {
  var configObj = this.projectConfigManager.getConfig();
  if (!configObj) {
    return;
  }

  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);
  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);
  var impressionEventOptions = {
    attributes: attributes,
    clientEngine: this.clientEngine,
    clientVersion: this.clientVersion,
    configObj: configObj,
    experimentId: experimentId,
    userId: userId,
    variationId: variationId,
    logger: this.logger,
  };
  var impressionEvent = getImpressionEvent(impressionEventOptions);
  var experiment = configObj.experimentKeyMap[experimentKey];
  var variation;
  if (experiment && experiment.variationKeyMap) {
    variation = experiment.variationKeyMap[variationKey];
  }
  this.notificationCenter.sendNotifications(NOTIFICATION_TYPES$1.ACTIVATE, {
    experiment: experiment,
    userId: userId,
    attributes: attributes,
    variation: variation,
    logEvent: impressionEvent,
  });
};

/**
 * Sends conversion event to Optimizely.
 * @param  {string} eventKey
 * @param  {string} userId
 * @param  {string} attributes
 * @param  {Object} eventTags Values associated with the event.
 */
Optimizely.prototype.track = function(eventKey, userId, attributes, eventTags) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'track'));
      return;
    }

    if (!this.__validateInputs({ user_id: userId, event_key: eventKey }, attributes, eventTags)) {
      return;
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return;
    }

    if (!projectConfig.eventWithKeyExists(configObj, eventKey)) {
      this.logger.log(
        LOG_LEVEL$2.WARNING,
        sprintf(enums.LOG_MESSAGES.EVENT_KEY_NOT_FOUND, MODULE_NAME$c, eventKey)
      );
      this.logger.log(LOG_LEVEL$2.WARNING, sprintf(LOG_MESSAGES$2.NOT_TRACKING_USER, MODULE_NAME$c, userId));
      return;
    }

    // remove null values from eventTags
    eventTags = this.__filterEmptyValues(eventTags);
    var conversionEvent = buildConversionEvent({
      eventKey: eventKey,
      eventTags: eventTags,
      userId: userId,
      userAttributes: attributes,
      clientEngine: this.clientEngine,
      clientVersion: this.clientVersion,
      configObj: configObj,
    });
    this.logger.log(LOG_LEVEL$2.INFO, sprintf(enums.LOG_MESSAGES.TRACK_EVENT, MODULE_NAME$c, eventKey, userId));
    // TODO is it okay to not pass a projectConfig as second argument
    this.eventProcessor.process(conversionEvent);
    this.__emitNotificationCenterTrack(eventKey, userId, attributes, eventTags);
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    var failedTrackLogMessage = sprintf(LOG_MESSAGES$2.NOT_TRACKING_USER, MODULE_NAME$c, userId);
    this.logger.log(LOG_LEVEL$2.ERROR, failedTrackLogMessage);
  }
};

/**
 * Send TRACK event to notificationCenter
 * @param  {string} eventKey
 * @param  {string} userId
 * @param  {string} attributes
 * @param  {Object} eventTags Values associated with the event.
 */
Optimizely.prototype.__emitNotificationCenterTrack = function(eventKey, userId, attributes, eventTags) {
  try {
    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return;
    }

    var conversionEventOptions = {
      attributes: attributes,
      clientEngine: this.clientEngine,
      clientVersion: this.clientVersion,
      configObj: configObj,
      eventKey: eventKey,
      eventTags: eventTags,
      logger: this.logger,
      userId: userId,
    };
    var conversionEvent = getConversionEvent(conversionEventOptions);

    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES$1.TRACK, {
      eventKey: eventKey,
      userId: userId,
      attributes: attributes,
      eventTags: eventTags,
      logEvent: conversionEvent,
    });
  } catch (ex) {
    this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
    this.errorHandler.handleError(ex);
  }
};

/**
 * Gets variation where visitor will be bucketed.
 * @param  {string}      experimentKey
 * @param  {string}      userId
 * @param  {Object}      attributes
 * @return {string|null} variation key
 */
Optimizely.prototype.getVariation = function(experimentKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getVariation'));
      return null;
    }

    try {
      if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {
        return null;
      }

      var configObj = this.projectConfigManager.getConfig();
      if (!configObj) {
        return null;
      }

      var experiment = configObj.experimentKeyMap[experimentKey];
      if (!experiment) {
        this.logger.log(
          LOG_LEVEL$2.DEBUG,
          sprintf(ERROR_MESSAGES$2.INVALID_EXPERIMENT_KEY, MODULE_NAME$c, experimentKey)
        );
        return null;
      }

      var variationKey = this.decisionService.getVariation(configObj, experimentKey, userId, attributes);
      var decisionNotificationType = projectConfig.isFeatureExperiment(configObj, experiment.id)
        ? DECISION_NOTIFICATION_TYPES$1.FEATURE_TEST
        : DECISION_NOTIFICATION_TYPES$1.AB_TEST;

      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES$1.DECISION, {
        type: decisionNotificationType,
        userId: userId,
        attributes: attributes || {},
        decisionInfo: {
          experimentKey: experimentKey,
          variationKey: variationKey,
        },
      });

      return variationKey;
    } catch (ex) {
      this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
      this.errorHandler.handleError(ex);
      return null;
    }
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Force a user into a variation for a given experiment.
 * @param {string} experimentKey
 * @param {string} userId
 * @param {string|null} variationKey user will be forced into. If null, then clear the existing experiment-to-variation mapping.
 * @return boolean A boolean value that indicates if the set completed successfully.
 */
Optimizely.prototype.setForcedVariation = function(experimentKey, userId, variationKey) {
  if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {
    return false;
  }

  var configObj = this.projectConfigManager.getConfig();
  if (!configObj) {
    return false;
  }

  try {
    return this.decisionService.setForcedVariation(configObj, experimentKey, userId, variationKey);
  } catch (ex) {
    this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
    this.errorHandler.handleError(ex);
    return false;
  }
};

/**
 * Gets the forced variation for a given user and experiment.
 * @param  {string} experimentKey
 * @param  {string} userId
 * @return {string|null} The forced variation key.
 */
Optimizely.prototype.getForcedVariation = function(experimentKey, userId) {
  if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {
    return null;
  }

  var configObj = this.projectConfigManager.getConfig();
  if (!configObj) {
    return null;
  }

  try {
    return this.decisionService.getForcedVariation(configObj, experimentKey, userId);
  } catch (ex) {
    this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
    this.errorHandler.handleError(ex);
    return null;
  }
};

/**
 * Validate string inputs, user attributes and event tags.
 * @param  {string}  stringInputs   Map of string keys and associated values
 * @param  {Object}  userAttributes Optional parameter for user's attributes
 * @param  {Object}  eventTags      Optional parameter for event tags
 * @return {boolean} True if inputs are valid
 *
 */
Optimizely.prototype.__validateInputs = function(stringInputs, userAttributes, eventTags) {
  try {
    // Null, undefined or non-string user Id is invalid.
    if (stringInputs.hasOwnProperty('user_id')) {
      var userId = stringInputs.user_id;
      if (typeof userId !== 'string' || userId === null || userId === 'undefined') {
        throw new Error(sprintf(ERROR_MESSAGES$2.INVALID_INPUT_FORMAT, MODULE_NAME$c, 'user_id'));
      }

      delete stringInputs.user_id;
    }

    var inputKeys = Object.keys(stringInputs);
    for (var index = 0; index < inputKeys.length; index++) {
      var key = inputKeys[index];
      if (!stringValidator.validate(stringInputs[key])) {
        throw new Error(sprintf(ERROR_MESSAGES$2.INVALID_INPUT_FORMAT, MODULE_NAME$c, key));
      }
    }
    if (userAttributes) {
      validate$1(userAttributes);
    }
    if (eventTags) {
      eventTagsValidator.validate(eventTags);
    }
    return true;
  } catch (ex) {
    this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
    this.errorHandler.handleError(ex);
    return false;
  }
};

/**
 * Shows failed activation log message and returns null when user is not activated in experiment
 * @param  experimentKey
 * @param  userId
 * @return {null}
 */
Optimizely.prototype.__notActivatingExperiment = function(experimentKey, userId) {
  var failedActivationLogMessage = sprintf(
    LOG_MESSAGES$2.NOT_ACTIVATING_USER,
    MODULE_NAME$c,
    userId,
    experimentKey
  );
  this.logger.log(LOG_LEVEL$2.INFO, failedActivationLogMessage);
  return null;
};

/**
 * Filters out attributes/eventTags with null or undefined values
 * @param  map
 * @returns {Object} map
 */
Optimizely.prototype.__filterEmptyValues = function(map) {
  for (var key in map) {
    if (map.hasOwnProperty(key) && (map[key] === null || map[key] === undefined)) {
      delete map[key];
    }
  }
  return map;
};

/**
 * Returns true if the feature is enabled for the given user.
 * @param {string} featureKey   Key of feature which will be checked
 * @param {string} userId       ID of user which will be checked
 * @param {Object} attributes   Optional user attributes
 * @return {boolean}            True if the feature is enabled for the user, false otherwise
 */
Optimizely.prototype.isFeatureEnabled = function(featureKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(
        LOG_LEVEL$2.ERROR,
        sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'isFeatureEnabled')
      );
      return false;
    }

    if (!this.__validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {
      return false;
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return false;
    }

    var feature = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);
    if (!feature) {
      return false;
    }

    var featureEnabled = false;
    var decision = this.decisionService.getVariationForFeature(configObj, feature, userId, attributes);
    var variation = decision.variation;
    var sourceInfo = {};

    if (variation) {
      featureEnabled = variation.featureEnabled;
      if (decision.decisionSource === DECISION_SOURCES$2.FEATURE_TEST) {
        sourceInfo = {
          experimentKey: decision.experiment.key,
          variationKey: decision.variation.key,
        };
        // got a variation from the exp, so we track the impression
        this._sendImpressionEvent(decision.experiment.key, decision.variation.key, userId, attributes);
      }
    }

    if (featureEnabled === true) {
      this.logger.log(
        LOG_LEVEL$2.INFO,
        sprintf(LOG_MESSAGES$2.FEATURE_ENABLED_FOR_USER, MODULE_NAME$c, featureKey, userId)
      );
    } else {
      this.logger.log(
        LOG_LEVEL$2.INFO,
        sprintf(LOG_MESSAGES$2.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME$c, featureKey, userId)
      );
      featureEnabled = false;
    }

    var featureInfo = {
      featureKey: featureKey,
      featureEnabled: featureEnabled,
      source: decision.decisionSource,
      sourceInfo: sourceInfo,
    };

    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES$1.DECISION, {
      type: DECISION_NOTIFICATION_TYPES$1.FEATURE,
      userId: userId,
      attributes: attributes || {},
      decisionInfo: featureInfo,
    });

    return featureEnabled;
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return false;
  }
};

/**
 * Returns an Array containing the keys of all features in the project that are
 * enabled for the given user.
 * @param {string} userId
 * @param {Object} attributes
 * @return {Array} Array of feature keys (strings)
 */
Optimizely.prototype.getEnabledFeatures = function(userId, attributes) {
  try {
    var enabledFeatures = [];
    if (!this.__isValidInstance()) {
      this.logger.log(
        LOG_LEVEL$2.ERROR,
        sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getEnabledFeatures')
      );
      return enabledFeatures;
    }

    if (!this.__validateInputs({ user_id: userId })) {
      return enabledFeatures;
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return enabledFeatures;
    }

    objectValues(configObj.featureKeyMap).forEach(
      function(feature) {
        if (this.isFeatureEnabled(feature.key, userId, attributes)) {
          enabledFeatures.push(feature.key);
        }
      }.bind(this)
    );

    return enabledFeatures;
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return [];
  }
};

/**
 * Returns dynamically-typed value of the variable attached to the given
 * feature flag. Returns null if the feature key or variable key is invalid.
 *
 * @param {string} featureKey           Key of the feature whose variable's
 *                                      value is being accessed
 * @param {string} variableKey          Key of the variable whose value is
 *                                      being accessed
 * @param {string} userId               ID for the user
 * @param {Object} attributes           Optional user attributes
 * @return {string|boolean|number|null} Value of the variable cast to the appropriate
 *                                      type, or null if the feature key is invalid or
 *                                      the variable key is invalid
 */

Optimizely.prototype.getFeatureVariable = function(featureKey, variableKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getFeatureVariable'));
      return null;
    }
    return this._getFeatureVariableForType(featureKey, variableKey, null, userId, attributes);
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Helper method to get the value for a variable of a certain type attached to a
 * feature flag. Returns null if the feature key is invalid, the variable key is
 * invalid, the given variable type does not match the variable's actual type,
 * or the variable value cannot be cast to the required type. If the given variable
 * type is null, the value of the variable cast to the appropriate type is returned.
 *
 * @param {string} featureKey           Key of the feature whose variable's value is
 *                                      being accessed
 * @param {string} variableKey          Key of the variable whose value is being
 *                                      accessed
 * @param {string|null} variableType    Type of the variable whose value is being
 *                                      accessed (must be one of FEATURE_VARIABLE_TYPES
 *                                      in lib/utils/enums/index.js), or null to return the
 *                                      value of the variable cast to the appropriate type
 * @param {string} userId               ID for the user
 * @param {Object} attributes           Optional user attributes
 * @return {string|boolean|number|null} Value of the variable cast to the appropriate
 *                                      type, or null if the feature key is invalid, the
 *                                      variable key is invalid, or there is a mismatch
 *                                      with the type of the variable
 */
Optimizely.prototype._getFeatureVariableForType = function(featureKey, variableKey, variableType, userId, attributes) {
  if (!this.__validateInputs({ feature_key: featureKey, variable_key: variableKey, user_id: userId }, attributes)) {
    return null;
  }

  var configObj = this.projectConfigManager.getConfig();
  if (!configObj) {
    return null;
  }

  var featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);
  if (!featureFlag) {
    return null;
  }

  var variable = projectConfig.getVariableForFeature(configObj, featureKey, variableKey, this.logger);
  if (!variable) {
    return null;
  }

  if (variableType && variable.type !== variableType) {
    this.logger.log(
      LOG_LEVEL$2.WARNING,
      sprintf(LOG_MESSAGES$2.VARIABLE_REQUESTED_WITH_WRONG_TYPE, MODULE_NAME$c, variableType, variable.type)
    );
    return null;
  }

  var decision = this.decisionService.getVariationForFeature(configObj, featureFlag, userId, attributes);
  var featureEnabled = decision.variation !== null ? decision.variation.featureEnabled : false;
  var variableValue = this._getFeatureVariableValueFromVariation(featureKey, featureEnabled, decision.variation, variable, userId);

  var sourceInfo = {};
  if (decision.decisionSource === DECISION_SOURCES$2.FEATURE_TEST) {
    sourceInfo = {
      experimentKey: decision.experiment.key,
      variationKey: decision.variation.key,
    };
  }

  this.notificationCenter.sendNotifications(NOTIFICATION_TYPES$1.DECISION, {
    type: DECISION_NOTIFICATION_TYPES$1.FEATURE_VARIABLE,
    userId: userId,
    attributes: attributes || {},
    decisionInfo: {
      featureKey: featureKey,
      featureEnabled: featureEnabled,
      source: decision.decisionSource,
      variableKey: variableKey,
      variableValue: variableValue,
      variableType: variable.type,
      sourceInfo: sourceInfo,
    },
  });
  return variableValue;
};

/**
 * Helper method to get the non type-casted value for a variable attached to a
 * feature flag. Returns appropriate variable value depending on whether there
 * was a matching variation, feature was enabled or not or varible was part of the
 * available variation or not. Also logs the appropriate message explaining how it
 * evaluated the value of the variable.
 *
 * @param {string} featureKey           Key of the feature whose variable's value is
 *                                      being accessed
 * @param {boolean} featureEnabled      Boolean indicating if feature is enabled or not
 * @param {object} variation            variation returned by decision service
 * @param {object} variable             varible whose value is being evaluated
 * @param {string} userId               ID for the user
 * @return {string|null}                String value of the variable or null if the config Obj
 *                                      is null
 */
Optimizely.prototype._getFeatureVariableValueFromVariation = function(featureKey, featureEnabled, variation, variable, userId) {
  var configObj = this.projectConfigManager.getConfig();
  if (!configObj) {
    return null;
  }

  var variableValue = variable.defaultValue;
  if (variation !== null) {
    var value = projectConfig.getVariableValueForVariation(configObj, variable, variation, this.logger);
    if (value !== null) {
      if (featureEnabled) {
        variableValue = value;
        this.logger.log(
          LOG_LEVEL$2.INFO,
          sprintf(
            LOG_MESSAGES$2.USER_RECEIVED_VARIABLE_VALUE,
            MODULE_NAME$c,
            variableValue,
            variable.key,
            featureKey
          )
        );
      } else {
        this.logger.log(
          LOG_LEVEL$2.INFO,
          sprintf(
            LOG_MESSAGES$2.FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE,
            MODULE_NAME$c,
            featureKey,
            userId,
            variableValue
          )
        );
      }
    } else {
      this.logger.log(
        LOG_LEVEL$2.INFO,
        sprintf(
          LOG_MESSAGES$2.VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE,
          MODULE_NAME$c,
          variable.key,
          variation.key
        )
      );
    }
  } else {
    this.logger.log(
      LOG_LEVEL$2.INFO,
      sprintf(
        LOG_MESSAGES$2.USER_RECEIVED_DEFAULT_VARIABLE_VALUE,
        MODULE_NAME$c,
        userId,
        variable.key,
        featureKey
      )
    );
  }

  return projectConfig.getTypeCastValue(variableValue, variable.type, this.logger);
};

/**
 * Returns value for the given boolean variable attached to the given feature
 * flag.
 * @param {string} featureKey   Key of the feature whose variable's value is
 *                              being accessed
 * @param {string} variableKey  Key of the variable whose value is being
 *                              accessed
 * @param {string} userId       ID for the user
 * @param {Object} attributes   Optional user attributes
 * @return {boolean|null}       Boolean value of the variable, or null if the
 *                              feature key is invalid, the variable key is
 *                              invalid, or there is a mismatch with the type
 *                              of the variable
 */
Optimizely.prototype.getFeatureVariableBoolean = function(featureKey, variableKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getFeatureVariableBoolean'));
      return null;
    }
    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES$1.BOOLEAN, userId, attributes);
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Returns value for the given double variable attached to the given feature
 * flag.
 * @param {string} featureKey   Key of the feature whose variable's value is
 *                              being accessed
 * @param {string} variableKey  Key of the variable whose value is being
 *                              accessed
 * @param {string} userId       ID for the user
 * @param {Object} attributes   Optional user attributes
 * @return {number|null}        Number value of the variable, or null if the
 *                              feature key is invalid, the variable key is
 *                              invalid, or there is a mismatch with the type
 *                              of the variable
 */
Optimizely.prototype.getFeatureVariableDouble = function(featureKey, variableKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getFeatureVariableDouble'));
      return null;
    }
    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES$1.DOUBLE, userId, attributes);
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Returns value for the given integer variable attached to the given feature
 * flag.
 * @param {string} featureKey   Key of the feature whose variable's value is
 *                              being accessed
 * @param {string} variableKey  Key of the variable whose value is being
 *                              accessed
 * @param {string} userId       ID for the user
 * @param {Object} attributes   Optional user attributes
 * @return {number|null}        Number value of the variable, or null if the
 *                              feature key is invalid, the variable key is
 *                              invalid, or there is a mismatch with the type
 *                              of the variable
 */
Optimizely.prototype.getFeatureVariableInteger = function(featureKey, variableKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getFeatureVariableInteger'));
      return null;
    }
    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES$1.INTEGER, userId, attributes);
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Returns value for the given string variable attached to the given feature
 * flag.
 * @param {string} featureKey   Key of the feature whose variable's value is
 *                              being accessed
 * @param {string} variableKey  Key of the variable whose value is being
 *                              accessed
 * @param {string} userId       ID for the user
 * @param {Object} attributes   Optional user attributes
 * @return {string|null}        String value of the variable, or null if the
 *                              feature key is invalid, the variable key is
 *                              invalid, or there is a mismatch with the type
 *                              of the variable
 */
Optimizely.prototype.getFeatureVariableString = function(featureKey, variableKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getFeatureVariableString'));
      return null;
    }
    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES$1.STRING, userId, attributes);
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Returns value for the given json variable attached to the given feature
 * flag.
 * @param {string} featureKey   Key of the feature whose variable's value is
 *                              being accessed
 * @param {string} variableKey  Key of the variable whose value is being
 *                              accessed
 * @param {string} userId       ID for the user
 * @param {Object} attributes   Optional user attributes
 * @return {object|null}        Object value of the variable, or null if the
 *                              feature key is invalid, the variable key is
 *                              invalid, or there is a mismatch with the type
 *                              of the variable
 */
Optimizely.prototype.getFeatureVariableJSON = function(featureKey, variableKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getFeatureVariableJSON'));
      return null;
    }
    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES$1.JSON, userId, attributes);
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Returns values for all the variables attached to the given feature
 * flag.
 * @param {string} featureKey   Key of the feature whose variables are being
 *                              accessed
 * @param {string} userId       ID for the user
 * @param {Object} attributes   Optional user attributes
 * @return {object|null}        Object containing all the variables, or null if the
 *                              feature key is invalid
 */
Optimizely.prototype.getAllFeatureVariables = function(featureKey, userId, attributes) {
  try {
    if (!this.__isValidInstance()) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf(LOG_MESSAGES$2.INVALID_OBJECT, MODULE_NAME$c, 'getAllFeatureVariables'));
      return null;
    }

    if (!this.__validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {
      return null;
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return null;
    }

    var featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);
    if (!featureFlag) {
      return null;
    }

    var decision = this.decisionService.getVariationForFeature(configObj, featureFlag, userId, attributes);
    var featureEnabled = decision.variation !== null ? decision.variation.featureEnabled : false;
    var allVariables = {};

    featureFlag.variables.forEach(function (variable) {
      allVariables[variable.key] = this._getFeatureVariableValueFromVariation(featureKey, featureEnabled, decision.variation, variable, userId);
    }.bind(this));

    var sourceInfo = {};
    if (decision.decisionSource === DECISION_SOURCES$2.FEATURE_TEST) {
      sourceInfo = {
        experimentKey: decision.experiment.key,
        variationKey: decision.variation.key,
      };
    }
    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES$1.DECISION, {
      type: DECISION_NOTIFICATION_TYPES$1.ALL_FEATURE_VARIABLES,
      userId: userId,
      attributes: attributes || {},
      decisionInfo: {
        featureKey: featureKey,
        featureEnabled: featureEnabled,
        source: decision.decisionSource,
        variableValues: allVariables,
        sourceInfo: sourceInfo,
      },
    });

    return allVariables;
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Returns OptimizelyConfig object containing experiments and features data
 * @return {Object}
 *
 * OptimizelyConfig Object Schema
 * {
 *   'experimentsMap': {
 *     'my-fist-experiment': {
 *       'id': '111111',
 *       'key': 'my-fist-experiment'
 *       'variationsMap': {
 *         'variation_1': {
 *           'id': '121212',
 *           'key': 'variation_1',
 *           'variablesMap': {
 *             'age': {
 *               'id': '222222',
 *               'key': 'age',
 *               'type': 'integer',
 *               'value': '0',
 *             }
 *           }
 *         }
 *       }
 *     }
 *   },
 *   'featuresMap': {
 *     'awesome-feature': {
 *       'id': '333333',
 *       'key': 'awesome-feature',
 *       'experimentsMap': Object,
 *       'variationsMap': Object,
 *     }
 *   }
 * }
 */
Optimizely.prototype.getOptimizelyConfig = function() {
  try {
    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return null;
    }
    return this.projectConfigManager.getOptimizelyConfig();
  } catch (e) {
    this.logger.log(LOG_LEVEL$2.ERROR, e.message);
    this.errorHandler.handleError(e);
    return null;
  }
};

/**
 * Stop background processes belonging to this instance, including:
 *
 * - Active datafile requests
 * - Pending datafile requests
 * - Pending event queue flushes
 *
 * In-flight datafile requests will be aborted. Any events waiting to be sent
 * as part of a batched event request will be immediately flushed to the event
 * dispatcher.
 *
 * Returns a Promise that fulfills after all in-flight event dispatcher requests
 * (including any final request resulting from flushing the queue as described
 * above) are complete. If there are no in-flight event dispatcher requests and
 * no queued events waiting to be sent, returns an immediately-fulfilled Promise.
 *
 * Returned Promises are fulfilled with result objects containing these
 * properties:
 *    - success (boolean): true if the event dispatcher signaled completion of
 *                         all in-flight and final requests, or if there were no
 *                         queued events and no in-flight requests. false if an
 *                         unexpected error was encountered during the close
 *                         process.
 *    - reason (string=):  If success is false, this is a string property with
 *                         an explanatory message.
 *
 * NOTE: After close is called, this instance is no longer usable - any events
 * generated will no longer be sent to the event dispatcher.
 *
 * @return {Promise}
 */
Optimizely.prototype.close = function() {
  try {
    var eventProcessorStoppedPromise = this.eventProcessor.stop();
    if (this.__disposeOnUpdate) {
      this.__disposeOnUpdate();
      this.__disposeOnUpdate = null;
    }
    if (this.projectConfigManager) {
      this.projectConfigManager.stop();
    }
    Object.keys(this.__readyTimeouts).forEach(
      function(readyTimeoutId) {
        var readyTimeoutRecord = this.__readyTimeouts[readyTimeoutId];
        clearTimeout(readyTimeoutRecord.readyTimeout);
        readyTimeoutRecord.onClose();
      }.bind(this)
    );
    this.__readyTimeouts = {};
    return eventProcessorStoppedPromise.then(
      function() {
        return {
          success: true,
        };
      },
      function(err) {
        return {
          success: false,
          reason: String(err),
        };
      }
    );
  } catch (err) {
    this.logger.log(LOG_LEVEL$2.ERROR, err.message);
    this.errorHandler.handleError(err);
    return Promise.resolve({
      success: false,
      reason: String(err),
    });
  }
};

/**
 * Returns a Promise that fulfills when this instance is ready to use (meaning
 * it has a valid datafile), or has failed to become ready within a period of
 * time (configurable by the timeout property of the options argument), or when
 * this instance is closed via the close method.
 *
 * If a valid datafile was provided in the constructor, the returned Promise is
 * immediately fulfilled. If an sdkKey was provided, a manager will be used to
 * fetch  a datafile, and the returned promise will fulfill if that fetch
 * succeeds or fails before the timeout. The default timeout is 30 seconds,
 * which will be used if no timeout is provided in the argument options object.
 *
 * The returned Promise is fulfilled with a result object containing these
 * properties:
 *    - success (boolean): True if this instance is ready to use with a valid
 *                         datafile, or false if this instance failed to become
 *                         ready or was closed prior to becoming ready.
 *    - reason (string=):  If success is false, this is a string property with
 *                         an explanatory message. Failure could be due to
 *                         expiration of the timeout, network errors,
 *                         unsuccessful responses, datafile parse errors,
 *                         datafile validation errors, or the instance being
 *                         closed
 * @param  {Object=}          options
 * @param  {number|undefined} options.timeout
 * @return {Promise}
 */
Optimizely.prototype.onReady = function(options) {
  var timeout;
  if (typeof options === 'object' && options !== null) {
    timeout = options.timeout;
  }
  if (!fns.isSafeInteger(timeout)) {
    timeout = DEFAULT_ONREADY_TIMEOUT;
  }

  var resolveTimeoutPromise;
  var timeoutPromise = new Promise(function(resolve) {
    resolveTimeoutPromise = resolve;
  });

  var timeoutId = this.__nextReadyTimeoutId;
  this.__nextReadyTimeoutId++;

  var onReadyTimeout = function() {
    delete this.__readyTimeouts[timeoutId];
    resolveTimeoutPromise({
      success: false,
      reason: sprintf('onReady timeout expired after %s ms', timeout),
    });
  }.bind(this);
  var readyTimeout = setTimeout(onReadyTimeout, timeout);
  var onClose = function() {
    resolveTimeoutPromise({
      success: false,
      reason: 'Instance closed',
    });
  };

  this.__readyTimeouts[timeoutId] = {
    readyTimeout: readyTimeout,
    onClose: onClose,
  };

  this.__readyPromise.then(
    function() {
      clearTimeout(readyTimeout);
      delete this.__readyTimeouts[timeoutId];
      resolveTimeoutPromise({
        success: true,
      });
    }.bind(this)
  );

  return Promise.race([this.__readyPromise, timeoutPromise]);
};

/**
 * Copyright 2019-2020, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Return true if the argument is a valid event batch size, false otherwise
 * @param {*} eventBatchSize
 * @returns boolean
 */
var validateEventBatchSize = function(eventBatchSize) {
  return isSafeInteger(eventBatchSize) && eventBatchSize >= 1;
};

/**
 * Return true if the argument is a valid event flush interval, false otherwise
 * @param {*} eventFlushInterval
 * @returns boolean
 */
var validateEventFlushInterval = function(eventFlushInterval) {
  return isSafeInteger(eventFlushInterval) && eventFlushInterval > 0;
};

var eventProcessorConfigValidator = {
  validateEventBatchSize: validateEventBatchSize,
  validateEventFlushInterval: validateEventFlushInterval,
};

/**
 * Copyright 2016-2017, 2019-2020 Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logger$3 = getLogger();
setLogHandler(loggerPlugin.createLogger());
setLogLevel(LogLevel.INFO);

var MODULE_NAME$d = 'INDEX_BROWSER';
var DEFAULT_EVENT_BATCH_SIZE = 10;
var DEFAULT_EVENT_FLUSH_INTERVAL = 1000; // Unit is ms, default is 1s

var hasRetriedEvents = false;

/**
 * Creates an instance of the Optimizely class
 * @param  {Object} config
 * @param  {Object} config.datafile
 * @param  {Object} config.errorHandler
 * @param  {Object} config.eventDispatcher
 * @param  {Object} config.logger
 * @param  {Object} config.logLevel
 * @param  {Object} config.userProfileService
 * @param {Object} config.eventBatchSize
 * @param {Object} config.eventFlushInterval
 * @return {Object} the Optimizely object
 */
var createInstance = function(config) {
  try {
    config = config || {};

    // TODO warn about setting per instance errorHandler / logger / logLevel
    if (config.errorHandler) {
      setErrorHandler(config.errorHandler);
    }
    if (config.logger) {
      setLogHandler(config.logger);
      // respect the logger's shouldLog functionality
      setLogLevel(LogLevel.NOTSET);
    }
    if (config.logLevel !== undefined) {
      setLogLevel(config.logLevel);
    }

    try {
      configValidator.validate(config);
      config.isValidInstance = true;
    } catch (ex) {
      logger$3.error(ex);
      config.isValidInstance = false;
    }

    var eventDispatcher;
    // prettier-ignore
    if (config.eventDispatcher == null) { // eslint-disable-line eqeqeq
      // only wrap the event dispatcher with pending events retry if the user didnt override
      eventDispatcher = new LocalStoragePendingEventsDispatcher({
        eventDispatcher: defaultEventDispatcher,
      });

      if (!hasRetriedEvents) {
        eventDispatcher.sendPendingEvents();
        hasRetriedEvents = true;
      }
    } else {
      eventDispatcher = config.eventDispatcher;
    }

    config = fns.assign(
      {
        clientEngine: enums.JAVASCRIPT_CLIENT_ENGINE,
        eventBatchSize: DEFAULT_EVENT_BATCH_SIZE,
        eventFlushInterval: DEFAULT_EVENT_FLUSH_INTERVAL,
      },
      config,
      {
        eventDispatcher: eventDispatcher,
        // always get the OptimizelyLogger facade from logging
        logger: logger$3,
        errorHandler: getErrorHandler(),
      }
    );

    if (!eventProcessorConfigValidator.validateEventBatchSize(config.eventBatchSize)) {
      logger$3.warn('Invalid eventBatchSize %s, defaulting to %s', config.eventBatchSize, DEFAULT_EVENT_BATCH_SIZE);
      config.eventBatchSize = DEFAULT_EVENT_BATCH_SIZE;
    }
    if (!eventProcessorConfigValidator.validateEventFlushInterval(config.eventFlushInterval)) {
      logger$3.warn(
        'Invalid eventFlushInterval %s, defaulting to %s',
        config.eventFlushInterval,
        DEFAULT_EVENT_FLUSH_INTERVAL
      );
      config.eventFlushInterval = DEFAULT_EVENT_FLUSH_INTERVAL;
    }

    var optimizely = new Optimizely(config);

    try {
      if (typeof window.addEventListener === 'function') {
        var unloadEvent = 'onpagehide' in window ? 'pagehide' : 'unload';
        window.addEventListener(
          unloadEvent,
          function() {
            optimizely.close();
          },
          false
        );
      }
    } catch (e) {
      logger$3.error(enums.LOG_MESSAGES.UNABLE_TO_ATTACH_UNLOAD, MODULE_NAME$d, e.message);
    }

    return optimizely;
  } catch (e) {
    logger$3.error(e);
    return null;
  }
};

var __internalResetRetryState = function() {
  hasRetriedEvents = false;
};

var index_browser = {
  logging: loggerPlugin,
  errorHandler: defaultErrorHandler,
  eventDispatcher: defaultEventDispatcher,
  enums: enums,
  setLogger: setLogHandler,
  setLogLevel: setLogLevel,
  createInstance: createInstance,
  __internalResetRetryState: __internalResetRetryState,
};

export default index_browser;
export { __internalResetRetryState, createInstance, enums, defaultErrorHandler as errorHandler, defaultEventDispatcher as eventDispatcher, loggerPlugin as logging };
//# sourceMappingURL=optimizely.browser.es.js.map
